%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: BC master_new strapline outlined.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Matt Owen%%CreationDate: 9/2/10%%BoundingBox: 0 0 412 134%%HiResBoundingBox: 0 0 411.7579 133.9649%%CropBox: 0 0 411.7579 133.9649%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: (BC green)%%CMYKCustomColor: 0.7500 0.1500 0.8000 0 (BC green)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x5199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 44 8%%BeginData: 6144 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FF52527DFD04527EA8FD1FFFA8A8FD04527D5227FD4EFF27A8FD06%FF7D52277DA8FD19FFA87D27527DFD06FFA827FD4DFF52A8FD09FF7D5259%FD17FF59527DFD09FFA827FD4DFF7D53FD0BFF7D277DFD13FF7D277DFD0B%FF7D52FD4EFF27FD0DFF7D52A8FD0FFFA85252FD0DFF7DFD4FFF52FD0EFF%A85252FD0DFF7D527DFD0EFF52FD4FFF52FD10FF7D27FD05FF83A8FD04FF%277DFD10FF7DA8FD4DFFA82752FD10FFA8277DFFFF58332DFFFFA827A8FD%10FF7D2784FD4FFF7D52FD11FF527D835833587CA827FD11FF527DFD52FF%7D52FD11FF52332D342D3352FD11FF5352FD54FF52A8FD10FFA833342D58%3383FD10FFA852FD55FFA852FD10FF2D332D332D3333FD10FF7D7DFD05FF%A8A87DA884A8A8FD1FFFFD05A8FD26FF27FD10FF58335833583358A8FD0F%FF27FD06FFA8F827F827F8277DFD09FF27A8FFFF277DFD0EFF2727F87DF8%A8FD26FF52A8FD0EFF832D342D332D342D58FD0FFF52FD06FFA8F852A8A8%27F827FD09FFF852FFFFF827FD0EFFF8F8A853F87DFD26FF7DA8FD0DFFA8%33342D5833342D58337DA8FD0DFF52FD06FFA8F87DFFFFA82727FF5252FF%FF7D527D52F8275252F82727FFA852F8527EFFA852A8522752F827527DF8%A8277DFFFF7D52A8FD1FFF7D84FD0BFF522752332D332D332D332D335827%52FD0BFF7D7DFD06FF7D27277D5227F8A8FF52F8FFFF7DF87E5227277D52%27277DA827F827F8277DA8F82727535227277D52278427F8FFFF27F8FD20%FFA87DFD08FF7D5252A8FFFF33583358335833583382FFA852527DFD08FF%7E7DFD06FFA8F827F827F82727FF5227FFFF7D27A8FFF87DFFFFF852FF7E%F852FFA8F852A82752FFFFFFF852FF7DF8A87D277DFFF87DFD21FF527DFD%04FF7D52277DA8FD04FF582D332D342D332D3458FFFFFFA87D27527DFD04%FFA827FD07FF7D2753FFFFA8F8F87D52F8FFFF7DF8A8FF2753FFFF2727FF%5227F8F8F82727A8F8A8FFFFFF2727FF5227A8FFF8527DF87DFD22FF5252%2752277DA8FD07FF335833342D5833342D82FD06FFA87D2752275252FD08%FFA8F87DFFFFA852F87D2727FFFF5927A8FFF87DFFFFF852FF7DF8A8FFFF%A8FFA827A8FFFFFFF852FF7DF8A8FF52F85227FD26FF27FD09FFA8332D33%2D332D332D3358FD09FF2EA8FD0AFF84F8277D5227F827A853F87D7D27F8%A8FFF8F87DFFF8F87DA8F8277D27F852A8F8A8FFFFFFF827FF52F87DFF7D%F8F87DFD25FFA87DFD09FF82335833583358335833A8FD09FF7D7DFD0AFF%A8F827F827F852A8FFA828F8525227A8FF272752FF5227F8FF7D27F82752%FFA827A8FFFFFFF852FF7DF8A8FFFF2727A8FD25FF7D7DFD09FF58332D34%2D332D342D3383FD09FFA87DFD36FF7DF827FD26FF7DA8FD09FF8333342D%5833342D583383FD0AFF28FD35FF5927F8A8FD26FF7D7DFD09FF83332D33%2D332D332D3358FD09FFA87DFD0CFFA85327527DFD24FFA852A8FD0EFF52%A8FD17FFA852FD0AFFA75833583358335833FD0AFF7DA8FD0BFF7D27F852%F82727FD30FF5252FFFF277DFD18FF52A8FD0AFFA8342D342D3358FD0AFF%A827FD0BFFA827F8A8FFFF27F87DFFFFFF7DFD07FFA8FD05FFA8FD05FFA8%A8A8FD05FFA8FD09FFA8A8A8FFFFFF2752FD07FFA8A8FD07FFA8FD0CFF27%FD0BFFAE582D587DFD0BFF27A8FD0BFF7DF8A8FD04FF7DA8FF7DF827F852%FFFFF87D2827F8A8FF7DF827F852A8FF5227F8277DFF59277E27522752FF%FF52F8FF5227F82727FFF827F827FF2759FF7D27F82727A8FF52277DF827%52FD0BFF7D52FD0BFF27F8F8A8FD0AFF7D7DFD0CFF27F8A8FD06FF7DF852%847DF852FFF8F8277DF827FFF8277D27F87D7D27F852F827847DF82752A8%2727FFFFF85284F8F87D27F87DA827277DFFF87DA827F8A87D27F8FF2727%F8A82727FD0CFF52FD0AFFA827F8277DFD0AFF52FD0DFF52F8FD07FF5227%FFFFFF52F8FFF852FFFF2752FF27F87D7DFFFF52F859A87DF87D7D27A8FF%FF7EF8A87D277DFFA8A87D52F87DFF5227FFFF277D7EF8A8FFFF5227A852%F8AFFF7DF8FD0CFF52A8FD09FF7DF8F8F852FD0AFF28FD0DFF53F87DFFFF%FF7D275352F8FFFFFF2727FFF852FFFF5227FFA852F827F8A82727275227%52527DF8A8FFFFA8275252F8FFA827F85252F852FF2752FFFFF87D5227A8%FFFF7DF8A82727FFFF5227FD0DFF287D59FD06A8FFF827F827F8FD07A859%7D52A8FD0EFFF827A8FFFF52F8A85227A8FFFF2727FFF87DFFFF2852A852%52FF7D272852F8FFFFA859A87D27A8FFFFFF27272752FF7DF852FF7DF87D%FF5227FFFF277DA8F87DFFFF5227A852F8FFFF7DF8FD0DFFA884A87D7D52%7D527DF821527D52F8F853527D527D7DA87DA8FD0FFF7DF8272727F827FF%A8F8275227F87DFF2752FFFF5227A8F8272727F87D84F82752F8F8A87DF8%A8FFFFFF7DF8277DFF7D27F827F82727FF272727FFF87DFF27F8522EF827%FF27F8FFFF52F8FD15FF5252A8FD04FFA8A8FD18FFA82752527DFFFFFFAF%525252A8FFFF52A8FFFF527DFFA85252277DFFFFA8525252A8FF7D52A8FD%04FF5252FFFFFF525252A87D52FFA85252FF527DFFFF7D52527DFFFF7D27%FFFFA827FDFCFFFDFCFFFD15FF7D52FD05FFA87DFD06FF7DA8FD04FF52FF%A8FD04FFA8527D7DFD0EFFA8A87DFD0CFF52FD11FF52FD11FF7DFD1EFF27%52A8525252A87D7D5252FF2852FF7D27A852FF522752527D527D52277D52%A87D7D7D27A8FFFFA8275252FF28A8277D27527D52A8FF59527D527DFF27%52FFFF28A852FF7D52A8FF52A852527D7D527D52527D7D7D52527D275252%FF28A852525952FD1DFFA87D277D2727522752525253527DF8FF52522752%7D52F8A85227275252527D525227277DF87DFFFF527D2752527D27527D7D%277D27A8FF52F8527D27277D27FF527D27277D522EFF7D5227527D7D2727%27527D2752525227277D522752522752527D52FD1EFF7D52A85227A852FF%7DA87DA82727FFA827A8A852527DA8527D527DFF52A87DA87D59A828A852%FFA87D7D52FF52AFFD057D52A8FF525252AF52FF277DFFFF52AF7D527DA8%FFFF527D52FFFD047D52FF7D7D7DA8527DA8A852FF27A87DA8A852FD29FF%A852A8FD17FFA8FDFCFFFD50FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2010-02-09T10:19:15Z</xap:CreateDate>
         <xap:ModifyDate>2010-02-09T10:19:16Z</xap:ModifyDate>
         <xap:MetadataDate>2010-02-09T10:19:16Z</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>84</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAVAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6z5E8l+W9etb2484afHr&#xA;vmywvJrPWZdUC3caTLR0+rRScoooXhkR0VEGx3qRXFWQP+UX5diptNHTTJCeQl0uSbT3DeIa0eHF&#xA;VNvKnnjSKv5d8zPexDcaZ5gQXUZ8Qt5D6VynzcyfLFVWz/MOG1u4dN822L+W9RmYRwSzMJdPuHPQ&#xA;W96oWOp7JKEc/wAuKsvxV2KuxV2KqV3d2lnbS3V3NHbWsKl5p5WCRoo3LMzEAAeJxVhw88655gWn&#xA;kfShd2jbDzBqZe10/wAKwIB9Yufmqqh/nxVUXyFrGo/H5m80ahfV+1Zaax0m0APVf9Gb6yw7fHOc&#xA;VVYvyk/LRGDSeW7G7kG3qXsQvH38XufVY/fiqSReXtM0H8yNH03yfC2lxyW8975isYGK2BswGig/&#xA;0b+7Sd7kjg8fH4VflXFXpGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsG8parYj&#xA;8wvOdhLILa+uLq2ltbKZTFLPDDYwRPcxhgvqJzUpyWv2cVZzirsVUL/T7HULOWyv7eO7s514T28y&#xA;LJG6nsysCDirCzofmfyYPV8tGTW/Liby+W7mTldW69zp9zIfiVR/uiY/6rr0xVk/l3zLo3mHT/r2&#xA;lz+rGrGOeJ1aOaGVftRTROA8ci91YVxVJtE/NHyrrWuDRrF5munMgidkCxv6QLHi1a7qpIqMohqI&#xA;yNBx4aqEpcI5ozzR50sdDkhsIIJNU8wXoJ0/RbWhnkANDI5PwwwqT8UslFHudsvchK7TyLfa3cRa&#xA;p57mj1GaNhJa+X4a/ou1YfZJRt7qVf8AfkooD9lVxVmoAAoOmKuxV2KsG8v6rZX/AOa3mJ7GUX0E&#xA;el6faS3cKlooLi1uLtpbVplHD1KXKsV5V+7FWc4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqkvmrylpPmWwW2vQ0VxA3q6fqMB9O6tJx9maCUbow+49DUYqhPImvajqWnXdjrHD9PaH&#xA;dPp2qGMcVkdFWSK4Vf2VnhkSQDtUjtirJcVdirsVeV/nA1h5flh13SriTTfMmoK1tObfZLu2ReLf&#xA;WEIKM0XMem/216A0rmPqMnDGhzLi6vNwR25l4tp2oXenX0F9ZyGK6tnWSGQdmU1Gx6j2zXA0bDpY&#xA;yMTYfR/5aaTpcXl6HWoWku9U1pEuNV1O5YSXM0wHFlZwAFSMgqkagKo6DNvCfEAXocc+KIPey7JM&#xA;3Yq7FWGecJ7/AFvX7XyVYXElnBNbG/8AMF5CeMy2PMxR28LjdHuZFYcxuqI1PipirKdK0rTdJ0+D&#xA;TtMto7OxtlCQW0KhEVR4Afjiq+S/sI3KSXMSOv2lZ1BH0E4quhu7WckQTJKV+1wYNSvjQ4qq4q7F&#xA;XYq7FXYq7FXYqpy3FvCVEsqRlzRObBan2riraTwSO8cciu8ezqrAlfmB0xVfirsVdirsVdirsVdi&#xA;rsVdirD9NT6p+a2uRID6Wp6TYXjDt61vNcW7n/ZRmMf7HFWYYq7FUp8w+bfLfl2FJdZ1CKz9U0gh&#xA;YlppW/lhhQNLK3sik4q8I/NXzxH5m1O3hhs5bS304SKn1lTHcM0vAt6kZ3jpw2U7jvQ7DXanJcq7&#xA;nTa7LxSr+awbMZwnqX5UfmZbaHYz6VrP1htNiIlt7iGF51tlZj6hmEQZ0jLsPipQE7kVzO0k+cXa&#xA;9n5bBiej2nS9X0rVrNL3S7yG+s5PsXNtIssZ+TISMzHYovFXYqw/ycPrPnHzvqRG631ppkZP2vTt&#xA;LCGany9W8kI+eKswxV8oah5U8j+Zv+ck/ONh5yuVtNLitlnhke4W1BuFW0RV5sQD8Dv8P9MKoLz1&#xA;5P8AJvlDzn5Tb8ptYluvMV1dcJbOzuVvCEDIQzNHXirbhlfZlr2BxV9E335paPZ/mfp35evaXDan&#xA;qVu11Fdrw9BVWOWWjVbnWkB6LgVvzD+Z+laJ570jybNZ3M+oazA9xbTRBDGojEh4tVg1T6JpQYq8&#xA;V8rfm15gk/P/AFu6k0PzDJY3tlDBH5baKRprJmFopuZrUtxij+Etzp0ceOFVul/m95hb8+r2+bQf&#xA;MbWU1gkK+WDDKZ4GKwj6w9ry4qm1eVP2vfFXqvnn87dM8veYx5W0fSL3zP5mCCWfTdOWvooQGHqu&#xA;A9DxYHZTQdaYFRHkb86fLvmyz1YC0udM1rQ45JdT0S8UJcIsQPIrWnIVHE1oQeoG1VWL6L/zk9of&#xA;mC+06x8v+XdUv7m7nSK9AQcbSOSURiWVo/V235dhTvhpXket6vafmB+e1yPM3ljXbnTxbQ29toCx&#xA;SR3tpVIv300amqRcpGkJ8GU4qzTyP5qh8qfmD+cnmGe0mvbfT7qKSeC24erwNzKrMOZVaKG5Hfpi&#xA;r2Wy/Mvy9d/lwfP0ZddHWzkvGjbj6oMPJXh2PHn6ilOvXAqL8g+crfzn5XtfMVrZz2NpemT6vFc8&#xA;BIUjcx86IWFCymm+KshxV2KuxV2KuxV2KuxVi/mnQdebVLXzH5bniXWLOF7aawuywtby2dlkMTOo&#xA;ZoZFZaxyBTSpBBB2VSi4/MbzZHqNjpH+CbqDVtSWZ7OO6vrBYGFuqtKzS28l06qvNd/S7jFUWfL3&#xA;5iax/wAdvzBFo1q1OVhoEX7wgb0a+ug77+McMZxVNfL/AJE8q6DO11p9ip1GUfv9UuGe5vZNqHnc&#xA;zGSY18OVMVeG/nCmnJ57vRZBBVY2uuBqDOVq9fBulf65q9RXGadJra8Q0wrKXEehfkaJT53+D7It&#xA;JjJ/q1X/AI2pmRpfrc3Qf3nwet6n+Wvle7vpNSs45tE1eXeTU9Ilazmc/wDFoj/dTf8APVGzZO5Q&#xA;otvzU0f+4u9P802ij7F4p0y9/wCR0CzW8h/55R4qgdM/MPzjr9gZNC8nzxyPLNai91C7s0tIZreV&#xA;oJjKsMsl0RHJGwosVW9ga4qybyl5dn0PTpku7xtQ1K+uJL3Urwr6avcSgA+nHVuEaKioi1NANyTv&#xA;iqd4q+V5NM/LzUf+cmPOcHnx7NNIW0DwHULgWsX1kLaBeLl4qtwL/DXpXCqB/O+x/Jjy9pWlX/5a&#xA;31tD5rS9Qwvo169yRCFbkXKSSqhD8ePQn3FcVZLruovY/wDOTvkbVPMLpp7TaIhupJmEcazy2t3E&#xA;VLHiB++bj2xVGecNf0bVf+co/JEemXkV4bK1eK6aBxIqSMlw4QstRy4sD9OKq3l/U9N0/wD5y385&#xA;Pf3cNok2kwQwtPIsYeRotPIRSxFWIU7Yq6DVNN07/nLXWJdQu4bOKTR0jjkndY1LmKBgoZiBWinF&#xA;WKeX7PzJbfnr59sY/OcXkzVLq5kuLea6sra7+tWrytLEiNdMgXjE6Gin4h/q4qmvlzR7GT8z/Mup&#xA;N53bzT5ittFu49Ve20yO1tnj9BY1DXEEzRFkPAUCdR7Yqyv/AJxKsLS3/Ks3UUYWe8v7h7iSg5MU&#xA;CxqK+AVdh8/HEqlXlz/1sLzT/wBsuP8A6hLLFV35R6faal+a/wCcGnXieraXk5t7iM9GjlkuEdfp&#xA;U4q8km1TzFpnl/VfyKQO+o3HmKG3tZSPha1d69uitKkUo9mOKvsnQNGs9D0Ow0ayHG0063itYK9S&#xA;sSBATTuaVOBUfirsVdirsVdirsVdirsVYeB6v5uv6u31Ty+n1Svf6zet9Yp4U+rQ1+YxVmGKuxV8&#xA;n+bLK7svM2qW12rLOlzKWLVqwZyyvv2ZSGBzTzBEiC89miRMg96U5Fqek/kTqdxb+bJrFI+cN7bt&#xA;6rAboYfiVq+G5X6RmTpZVKnO0EiJkd733Ni7h2KsP8g8Y9X862sPxWsOus0TilOdxY2k86j5TSuT&#xA;7nFWYYq7FXn/AJx/K78m7i6u/MnmvTrOOWdlN3qN5cSQIWChV5MZUQfCoGKpf5E8q/8AOPR1Zbjy&#xA;hDo13qsB5xCGdbqaMpv6iJI8jLT+ZR9OKss85flx5J86RQR+ZtKj1D6qSbeQtJFInKnICSFo3oab&#xA;itMVQOh/k7+WmhX1hf6ToUNpe6Zy+pXCvKXUuCGLMztzJDEVepxVEa/+Vn5f+YNch13V9GhudXgK&#xA;GO85SRvWL7HL02QPx7cgfwxV3mb8rPIHmfVYdW1zRobzUYAqx3RaSN6ISVDemycqV25VxVvzj+V3&#xA;kHzlJFL5k0aK+nhHGO45SQzBevEywtG5X2Jpiqv5Z/LvyV5Y0q50rQtKisbK8BW7VS7vKCCtJJXZ&#xA;pW2JpVtu2Ko3yz5W0Dyxpa6VoNmtjp6u0i26M7AM5qxq5Y7/ADxVRt/JPla381XPmyHT0TzDeRiG&#xA;51AM/N4wqIFKluH2YlGy9sVQj+W9D8rr5i8zaFo3r65ewy3d3DC7+rezRK8iRjkXCs7kgcV79MVe&#xA;Ufl55P8ANfmv85778y/NGgSeX7S1iWPS7C5A9V5hEIFdqhC3GPkeRXqQB0wq99wK7FXYqhNN1fSt&#xA;Uga40y9gvoFYxtNbSpMgcAEqWQsK0YGmKovFXYq7FXYq7FWIefdM1KB7LzdokLXGsaCJfVsU2a9s&#xA;JuJubYf5f7tZIv8ALWn7RxVkulapY6rplpqdhKJrK+hS4tpR0aOVQyn7jiqKxVivnn8vdI8121Zf&#xA;9G1OJaW98gqwH8rjbmnt27ZTlwifvcfPp45B5vlnyzqun6/53tvKUDvDdXNy9qLp1Uw8o+VWBDcj&#xA;Xh8O2+2Yv5SXeHAHZ8+8Pq7yj5C8v+V42OnxM13KipPdyMWdwN6U+yoJ3oozLx4Yw5Oxw4I4+TIs&#xA;tbkh86eZn8v6L9YtoPreq3kqWWj2NaeveT1ESFv2UFC7t2RWOKrvJnlo+XtCjspZzd38ryXWp3pF&#xA;DPeXDGSeWnYFjRR2UAdsVTzFXYq+abHSV/Of87/MCeYJJZPKXlB2trbTEdkjd1laIV4kEeq0Ujsw&#xA;+KgVa0wqyf8AMX/nGrSbuGx1H8ukg8t+ZLCdJEn9WeOFkUdfhEzLIrAFWUb717UVZJ58/N2TyLYa&#xA;FpV5YHXvPGqwxKulaexCPPQJI4YoXEbS1Ef7up8BQ4FSnR/z51e0806f5c8/+VJ/K0+rsE029M6z&#xA;27uxChXYKoHxMASGNCRUAb4VXeZfz8vtL/MbVfIem+VLjWdUtIomsGtrgA3EssMU/GRDFSGNElYs&#xA;/Jvs9N9gqM/Lr867vzB5t1Dyd5m0GTy35isYjcCB5RNG8ahWb4uKcTxcMOoZd64qx5P+ci/NOsxa&#xA;jq3k7yJc6z5Z0uRkn1J7kQu/pqHfjEI3YHgQaDkQCKjthVllt+fHk6X8sD+YEqzQ2aubZrAhTObs&#xA;GnoJvxYn7Qav2dzTcYFYv/0MP5n0pbHVPN/kO80TytqLqkOqLN6zR890MsRjjIqN6HiadAcKpr+Y&#xA;/wDzkHYeSvNum6F+h5NWttT09L+3vbWcF2aZpkgijh9NufqPCo5c+jVoabhUDefn/wCY9D07QdQ8&#xA;1eTJtHtdZ1B7G4aa4aN7WNPSIlaN4FL8kkdgKr9g4VZZ+a35qDyIuiW9tpn6Z1bXrsWllYCf6sT0&#xA;Bfn6c1aPIi04/tdcCpH5q/PDVbfzlceTfJvleXzNrdhGJNTKziCCEkKSodlblTmASeO+2+KteWfz&#xA;y1bWrXzDp58pXEPnby8iSS+XPXH79WkVCY5/T+HjyDGqdKUJxVgf/OMvmzzXJ5i1vTZNBnn07UNS&#xA;ml1DVWuKpp8ixSOsDRlDz5OoSoZeuEqyb8mfzC/L7Sfyj1vzPZaGfK+hafqMq3Fit3NqDyzmC3AZ&#xA;HmCtyk5ogXptWu5wKoH/AJyL86JpK+aJfy7u18muwI1IXIMvok0E3p+l9k9j9n/K74VZH56/P7RP&#xA;LnlTy55psLFtX0nzDLwV/V+rvCiirkr6cvJkIKldtx1wKkWpf85F+YdCvtPuvM3ka80fyvqkojtd&#xA;TmnBmVTQh5IQlFbj8XplgadK0wq9xwK7FXYq868vajrflCLUPL58s6pqdna39zLpM9glq0P1G6kN&#xA;xGnKe4g3iaVo+PWijtiqbD8y7Irx/QPmAXXQ2v6Ju618PW4fVvp9WmKsV/Mn88rTy/5WvQmmanp3&#xA;mO7jaHRLS+tHj9WZ6JzSRPUib0uYcrz5dB3xV8q2Xlb8yvImp6V5uu/L19bRWE8V5HNPBIIjwYPx&#xA;lYA8OQFCGocKX2No/wCcWi63p8Oo6Jo2s6pYSqC13bWLGJWp8aAyGMyNGaq3phtxQYEI5vzJt3ot&#xA;l5d8wXk56wjTJ7WnX/dl79Vh7dnxVB2MmreZvPWm6ld6Le6TpWgWlw8S6gsKvJf3ZWIFBFLMpEUC&#xA;yCoP7eKs7xV2KuxV806Drdv+T/55+ZrXzIHtfLfm12u7HUyrNEpMrSpUip4oZnjbuDQnY1wqyf8A&#xA;Nv8A5yAsLXTbPSfy51KLV/NWpXEccH1NVukjSu4NQyM7miqvXqdtqqse86Xl15Q/PfyJ5o85sGs5&#xA;NISyvdUVaQpeiKaKZwFHFQJJwxp0Vq4qt/5yH80+XvO9/wCUfKflC+g1jW5dREy3Fi6XCQKV4fFI&#xA;nNN68232CVbFU78pKrf85d+dSQCV0aEqSOh9LThUfQcVamcxf85ZySLGZGXQiwjWnJiIugr3PTFW&#xA;AeXrH8uL5NV1vyT58vfy2vY5n9bQ9SnjjRiByASNZI2dK1Xj8bKR06Yql/mzzJ5589fkVZa7rRa7&#xA;XQNd9Ge+ijCmW3MACzsvFVJjkfhyoOu+9cVZF56vfJN35MV9V/NbU/MWn6iYaaJaJZz3jNyDrzty&#xA;0bR8CtTzK+G52xVFX+kQ2H/OQP5VaW6zPHZeX7SNFvVVZ19EXnpiVVLKsicRWhNCOuKvWvz68nf4&#xA;q/K/WLOKP1L6yT9IWAAq3rWwLFVHi8fNB/rYFeOflFq17+aX5neW9Tv0Y2fkfRolmL7rLfCsayHr&#xA;8Ts3qf7DCqYz+etX8yfmj5q0TVvO0XkDR9Gne2tYo1t7ae7CO0fP6zNxNSFD/a/aHEd8VQf/ADj/&#xA;AKn5ej/PbzRBZa3Nq0N5aNHp+o6hKHub2SJ4nlYMQvP7DstB9gV6DFU6/wCcZPMGiW2s+cNEuL2K&#xA;HV73WJpLOxdgssqxiRnKKftcQhJp0xKvMvLujalqf/OLGvGxjaX6h5k+uXSJUn0I7S3V2oOoXmGP&#xA;gBXtir2fVvzo/LGb8k7ho9StfXuNHaxj0EOpuVme39EQtBUuFVjQtTjx3rirxvzJo2o6X+Rv5dRa&#xA;gjRyXWr3F1FC4oVhmase3+Wvxj/WxV6z/wA5jf8AkstM/wC21B/1CXWAK92xV2KuxV2KuxVKp/K2&#xA;gXGvQ6/c2aXGrW0fpWtzMWk9FCan0UYlIy37TKAT3OKpqQCKHpiqlbWlpaoyW0McCMxdljUICzdW&#xA;IUDc+OKquKuxV2KuxV2Kpdr3lzQPMFibHW9Pt9RtCeQhuY1kUN/MvIfCfcb4qlfl38tfIPly8N7o&#xA;mg2djeUKi5jiHqgHqFdqsoPehxVNtb0HRNdsH0/WbGDULFyGa3uY1kTkOjAMDQjsRviqW+W/y88j&#xA;+WZ3uNB0S00+5kHF7iGMeqV/l9Q1YL7VpiqPg8teX7fXbjX4NPgj1u7jEN1qKxqJ5IwEAR36kfuk&#xA;+4Yq7/DXl/8ATv6f/R8H6b9P0f0j6a+v6dKcOfWntiqTav8AlR+W2sai+o6l5csbm+kPKWdoVDO3&#xA;i/GnM+7YqyC30jSbfTF0q3soItMWMwrYpGiwCMihT0gOHE16UxVj+l/lT+W2lamuqad5bsLa/jbn&#xA;FOkK1jbryjBqEPhxApiqcXXlfy7d65ba9c6bbza1Zp6VrqDxqZ40+L4UcioH7xvvOKpmQCKHpiqU&#xA;eX/KHlby4J10HSrXSxdFTcC1iWIOUrx5cQK8eRpiqA1/8s/y/wDMGoDUdZ0Cyvr6gDXMsQ9RgtAA&#xA;7CnOgFByriqrZfl55Gsdbg1yx0KytNVto/St7uCFY2ROBiooQAD92ePTptiqrB5F8m2+vf4gt9Es&#xA;odbLPIdRjgjScvIpR25qAasrEMe9cVROheWPLugWMlhounW+nWUrmWW2t41jjaRlCMxVRQkqgH0Y&#xA;qkaflD+V6aj+kV8r6cLvn6gb6unEP15COnAHv9nFU71zyv5c16O3j1rTbfUUtX9S2W4jWQRv05Ly&#xA;GxxVdr/lry/5hs0stc0+DUrSOQTJBcxrIgkVWUOA1dwrkfTiqZYq7FXYq8l1X8w/ONh+YstvPPaQ&#xA;eUor2OwikMPqxSM0AkeJ7yOY/V7v1G4pFMiqdt98Kqekf85HaFdx3Fxf6TcadZWrxie7eSOSNUuL&#xA;We6tn5Js3q/VHT4agNxFTXGlU4Pz3v4V1U3GgXN7LYm7u57aExQNZ2Vjb2c04lZ5G9Rk+u9VAqdu&#xA;I+1iqfeXfzlsdc83RaBBpNzFb3VzfWlnqUkkPCR9NQNcExBjKg5EBajf8MCpRdfnnJo17q0Gs6U8&#xA;1vbXerwWF3bSRAOdJjNwYXjLF0YwivM9T2pvhVE+Z/ze1a082toehabDexWpvY7q4kkHxy22mxX6&#xA;ekVZQoX1uL8q1pQUxVLYv+ci7W3kgs9S0O4N3HZW0+pTWzo0Uc93Z/XIlRCWb03SnxE/CTTehONK&#xA;p3P5wedZvNEEMelx6Vo0kOmSiG64zXLLqc7qrsY5AqVijPwUNCNz2xVV0j/nIeznlsrF9HvL+5ew&#xA;tpp7u2VEEl5Pp4vhEsBdygcHgCXoGNNx8WNKzz8u/PEfnPQDq6WbWBWd7d7Z5Y5XVowCeQQ8oz8V&#xA;Ckiqw8KUJCsO1n8/E0261GL/AAxf3ENg+oD6yktuEkh0m5+r3kwDOGCpVeIIqx22pXCqF8yf85AP&#xA;aQa0ml6JIZbVdSTR765eM29zPpHH63ziR1lREDclqQX6bHFUbb/nFrdrqV/Z6p5cuJVS7vrWyltH&#xA;hYGezsVvfqnEvydyquPUAAJoAMVTix/Ni2uPy5vPOkumvClm5ibTzc25cyeosQUuXURnlIAVkCuP&#xA;5elQrH7X/nIS3urIXUPlq+cW8Zm1YCSJfqqJeGzkr6nBnIb4gOINK1pTDSpr5W/Ne48z+b9PsLKw&#xA;Npot3DqkkdxO8by3AsJ4IEkVEYtEvN5QQ677UPXAqBP/ADkDpSX08UujXMdgZbiHTb8yw8blrO6j&#xA;tbgmMHnEFaUMC/UeBw0qf6b+Z0Wp+cZvLOn6XNcSW01xHdXoliEMaWrxpJIamp+KYAKKmuBWPap/&#xA;zkJo1hr+saV+hr24i0p7m3W8jKcZbqzUNPFxJ/d7E8GY/ERhpVf/AJXrZwtcwajoV1Y30M9zYxWj&#xA;yQyGW/t3tlW1Royy85Vvo2U1p9r+XFUvsPz4mj0eee40efUp7RgJp4DFbRl7nUrmwtYQskj0Zntg&#xA;C1aUq232cVVV/wCchLZ/WjTy5ePc6ertrUSzQcbQQ3QtJvj5Ul4sysOHUHtTGlVbv8+47e5uIx5Y&#xA;v5YYPXl+spLbcGtrO/On3MwBcP8ABLxovGpr2pXFVKP/AJyJ0qbULu0ttBvrj07gW1g8bRE3L/XY&#xA;7FlALARv6koKKx+Je46Y0qc+UPzM1rzF5sh0ttFFhZfVLx7wSyq88V1Y3htJFqp4snNafZrvXAr0&#xA;PFXYq7FXYq7FXYq7FXn2pf8AKl/8cf7kfqH+KPWj9T1eXD6z6f7r1a/6P6/p/Y5/HTpiqWWn/Qu3&#xA;1LUvq36I+o/6J+k6f3NPWP1PnX4ac/7un7HT4MKp9L/yqn67r/qfU/rfoaj/AIgry5eh6dt+kPV9&#xA;vT+r8/8AY4FeceSf8B/8r8v/AKt9Y/Snq3v1Gn6P9H1fTHr8/qv+kcfTr6fq79eXxYVZjP8A8qC/&#xA;xPqv1n9E/p/0r39L+rTnw4n676nL4eXCvL9rj/k4FW6J/wAqD+r2v6J/RnpfWpfq3pcq/Wvqo9f/&#xA;ACuf1b+85dvtb4VQsP8A0Ll9es/T/RX1r6kfqteX+8vpSUrX4a+jz9Pl8XH7O2Ksmu/+VX/X4/rP&#xA;1T656Wn+ny5cvS5Sfo/6OXPh9OBWPP8A9C8fpGP1P0R9b/RqcOf2fqH1I+ny5fB/vF9nl8fp+2FU&#xA;R5N/5U5+ntG/wn6P1r0tS+o/V+fHlSz+s+r6n7z1PS9Hhy/Yr7YFTG//AOVR8bz679S4+lq31zny&#xA;/uvrA/SvL29enqe+Kpe//Khf8R+YvU/RP6b9C5/xDzpy9Kn+l8q/Byp/e8Pi/mxVFSf8qY/QMXr/&#xA;AKP/AEN6s3p+vX0vW+oH1q+p+19SrWv7Pviqrov/ACqD/AV/+jfqH+D/AFG/SfKvp+v8FfW9X956&#xA;v93x5fF9nj2xVA6F/wAqL+oar+h/0f8AUfS/3K+lz9P0vUWvLtT1KVp+171wqi/Kn/Kmv8Y3v+Gf&#xA;0d/imtz9c+q/31Oa/WOm3H1KVptyrTflgVLZ/wDoXz9L+ZfX/RH6R9CX/EfKlfT9QetX9nl6vHn6&#xA;fxc6V3piqdeQ/wDlVH1k/wCDPqX1j0peX1StfT5x+tWv+Xw5d69cVSzUf+VE/wCKtW+vfoz/ABD6&#xA;bfpTnXnSi+p0+D1KcfU4fHSnLFU3uP8AlVv19PrH1H67+nh6fqfb/TnoJTjX/d3pcPw70xVLz/yp&#xA;P/D2tcv0d+g/Sj/TfOvpen9cuPS58u/1z1+NN+dadsVUtH/5Ub+iW/Rf6O/R/wCj29X0+X+8X1r4&#xA;/Ur8X+9P2uXxcuuFUbL/AMqj4S+p9S4fVb71a8v95v0gPrtf8n6/Tn/lYFQFh/yon/Et99R/Rn6e&#xA;+uw/W/Tr6n1v65H6fH9mv1z0+XDbnTlviqdad/yrX/E9v+j/AKr/AIh56j6Hp8vV5fWG/SHt/vRy&#xA;51/axVl+KuxV2KuxV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E7BB92C316F611DFA000D2102D9ABC22</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E7BB92C416F611DFA000D2102D9ABC22</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:25FC76FE164D11DF9D3EE8BA19144116</stRef:instanceID>
            <stRef:documentID>uuid:25FC76FD164D11DF9D3EE8BA19144116</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -133.965 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 133.965 li411.758 133.965 li411.758 0 licpclp[1 0 0 1 0 0 ] concat37.5146 51.6543 mo37.5146 51.6543 31.6719 65.2861 31.6719 72.749 cv31.6719 80.2129 37.1895 84.1074 39.4609 89.2988 cv41.7329 94.4922 42.0703 98.999 43.0308 99.3594 cv45.627 100.333 45.9814 98.7002 48.9023 99.0117 cv53.208 99.4697 55.3828 100.716 58.6152 100.482 cv61.7979 100.252 65.0977 98.71 69.3164 100.009 cv71.6792 100.736 74.5083 101.955 74.5083 101.955 cv83.271 86.0557 li85.2178 63.9883 li81.9717 41.2715 li51.792 36.729 li37.5146 51.6543 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 0 cmykf52.0669 37.5332 mo52.8066 37.6445 80.248 41.7749 81.3042 41.9341 cv81.4546 42.9878 84.4346 63.8418 84.4585 64.0088 cv84.4434 64.1797 82.561 85.5195 82.5332 85.8311 cv82.3882 86.0947 74.7759 99.9063 74.1748 100.997 cv73.2026 100.595 71.2695 99.8203 69.5386 99.2881 cv66.4019 98.3223 63.7349 98.8389 61.3813 99.2939 cv58.5605 99.7295 li56.8232 99.8555 55.4326 99.5303 53.6719 99.1182 cv52.3569 98.8105 50.8667 98.4619 48.9819 98.2617 cv47.4941 98.1025 46.5684 98.4053 45.8242 98.6475 cv45.0054 98.915 44.4644 99.0908 43.2959 98.6533 cv43.1421 98.4648 42.7866 97.1396 42.4727 95.9697 cv41.9844 94.1494 41.3159 91.6563 40.1523 88.9961 cv39.3462 87.1553 38.1909 85.5303 36.9673 83.8105 cv34.7349 80.6719 32.4263 77.4268 32.4263 72.749 cv32.4263 72.749 li32.4263 65.8447 37.6455 53.2861 38.1558 52.0757 cv38.3413 51.8813 51.5493 38.0742 52.0669 37.5332 cvcp36.875 51.2314 mo36.8213 51.3569 li36.5801 51.9194 30.9175 65.2178 30.9175 72.749 cv30.9175 77.9092 33.478 81.5088 35.7378 84.6846 cv36.9146 86.3398 38.0264 87.9023 38.7695 89.6016 cv39.8877 92.1572 40.5396 94.5869 41.0151 96.3604 cv41.6206 98.6172 41.9243 99.75 42.7656 100.065 cv44.4297 100.689 45.3765 100.381 46.2925 100.082 cv46.9932 99.8535 47.6553 99.6377 48.8223 99.7617 cv50.6143 99.9521 52.0562 100.29 53.3281 100.588 cv55.1387 101.011 56.7026 101.377 58.6694 101.235 cv58.6699 101.235 61.6685 100.775 61.6685 100.775 cv63.9541 100.333 66.3184 99.875 69.0942 100.729 cv71.3896 101.437 74.1816 102.636 74.21 102.648 cv74.8384 102.919 li84.0088 86.2803 li85.9771 63.9678 li82.6392 40.6089 li51.5171 35.9248 li36.875 51.2314 licp0 0 0 1 cmykf78.4028 38.6753 mo78.4028 38.6753 83.0625 33.3984 49.5215 12.7148 cv30.0503 0.707031 10.9043 -0.266113 6.36084 1.35693 cv4.42822 2.0459 1.55908 3.48633 0.84375 5.57617 cv0.231445 7.36084 2.9751 6.97949 4.17041 12.877 cv5.38721 18.8809 3.43994 23.0996 3.43994 23.0996 cv3.43994 23.0996 12.8506 27.3184 16.0962 35.106 cv19.3413 42.8936 19.3413 52.3057 19.3413 53.2783 cv19.3413 54.252 20.9639 56.1992 22.9111 57.498 cv24.8584 58.7939 26.8047 60.0928 26.8047 60.0928 cv26.8047 60.0928 30.375 60.417 33.2959 60.0928 cv36.2158 59.7686 57.3091 52.9541 67.6938 47.4365 cv78.0776 41.9199 78.4028 38.6753 78.4028 38.6753 cvcp0 0 0 0 cmykf5.32715 16.8447 mo5.32715 15.6016 5.21191 14.2178 4.90967 12.7271 cv4.17676 9.11035 2.84326 7.66455 2.04688 6.80078 cv1.62549 6.34375 1.50635 6.18555 1.50635 6.03418 cv1.50635 5.96924 1.52832 5.90625 1.55762 5.82129 cv2.26318 3.75928 5.60645 2.42676 6.61426 2.06738 cv10.9771 0.509277 30.0259 1.5791 49.1255 13.3569 cv80.5586 32.7407 77.8296 38.1733 77.7983 38.2261 cv77.73 38.3408 li77.6563 38.5679 li77.6504 38.5981 76.9775 41.6499 67.3398 46.77 cv57.0654 52.229 36.0083 59.0322 33.2124 59.3428 cv30.71 59.6206 27.7192 59.4092 27.0601 59.3564 cv26.7603 59.1563 23.3291 56.8701 23.3291 56.8701 cv21.3237 55.5322 20.0957 53.7842 20.0957 53.2783 cv20.0957 50.8066 19.8574 42.1709 16.7925 34.8159 cv13.9209 27.9248 6.58643 23.8257 4.38818 22.7222 cv4.74268 21.7173 5.32715 19.6592 5.32715 16.8447 cvcp6.10693 0.646484 mo4.60986 1.18018 1.02881 2.70557 0.129883 5.33203 cv-0.274414 6.50977 0.342773 7.17578 0.9375 7.82373 cv1.67188 8.62012 2.78174 9.82373 3.43115 13.0269 cv4.5791 18.6924 2.77295 22.7461 2.75439 22.7847 cv2.43896 23.4751 li3.13086 23.7881 li3.22217 23.8291 12.3105 27.9834 15.3999 35.396 cv18.4331 42.6758 18.5869 51.5693 18.5869 53.2783 cv18.5869 54.6821 20.5728 56.8452 22.4927 58.126 cv22.4932 58.126 26.5454 60.8267 26.5454 60.8267 cv26.7363 60.8442 li26.8853 60.8579 30.4165 61.1714 33.3789 60.8428 cv36.3184 60.5161 57.3926 53.7642 68.0479 48.103 cv77.6836 42.9834 78.9478 39.6978 79.1167 38.9238 cv79.2393 38.7119 79.3774 38.394 79.3774 37.8184 cv79.3774 37.6558 79.3647 37.4771 79.3359 37.2827 cv78.9043 34.3765 74.5088 27.2373 49.9175 12.0728 cv30.1157 -0.13916 10.8184 -1.03662 6.10693 0.646484 cvcp0 0 0 1 cmykf126.974 51.6543 mo126.974 51.6543 132.816 65.2861 132.816 72.749 cv132.816 80.2129 127.299 84.1074 125.027 89.2988 cv122.756 94.4922 122.418 98.999 121.458 99.3594 cv118.862 100.333 118.505 98.7002 115.586 99.0117 cv111.28 99.4697 109.105 100.716 105.872 100.482 cv102.691 100.252 99.3906 98.71 95.1724 100.009 cv92.8105 100.736 89.9795 101.955 89.9795 101.955 cv81.2178 86.0557 li79.271 63.9883 li82.5161 41.2715 li112.695 36.729 li126.974 51.6543 licp0 0 0 0 cmykf112.42 37.5332 mo112.938 38.0737 126.147 51.8813 126.333 52.0757 cv126.843 53.2861 132.062 65.8447 132.062 72.749 cv132.062 77.4277 129.753 80.6729 127.521 83.8115 cv126.297 85.5313 125.142 87.1553 124.335 88.9961 cv123.172 91.6572 122.504 94.1504 122.016 95.9707 cv121.702 97.1396 121.347 98.4648 121.106 98.7021 cv120.024 99.0908 119.483 98.915 118.663 98.6475 cv117.919 98.4043 116.993 98.1025 115.506 98.2617 cv113.622 98.4619 112.131 98.8105 110.816 99.1182 cv109.056 99.5303 107.665 99.8555 105.926 99.7295 cv103.107 99.2939 li100.754 98.8379 98.0869 98.3223 94.9502 99.2881 cv93.2197 99.8203 91.2856 100.595 90.313 100.997 cv89.7119 99.9063 82.1006 86.0947 81.9556 85.8311 cv81.9277 85.5195 80.0454 64.1797 80.0303 64.0088 cv80.0542 63.8418 83.0332 42.9878 83.1836 41.9341 cv84.2397 41.7749 111.681 37.6445 112.42 37.5332 cvcp81.8486 40.6089 mo78.5117 63.9678 li80.48 86.2803 li89.6489 102.919 li90.2778 102.648 li90.3057 102.636 93.1001 101.437 95.3945 100.729 cv98.1704 99.875 100.535 100.333 102.821 100.775 cv105.817 101.235 li107.785 101.377 109.349 101.011 111.16 100.587 cv112.433 100.29 113.874 99.9521 115.666 99.7617 cv116.833 99.6377 117.493 99.8535 118.195 100.082 cv119.112 100.381 120.06 100.689 121.723 100.065 cv122.564 99.75 122.868 98.6172 123.473 96.3613 cv123.949 94.5869 124.6 92.1572 125.718 89.6016 cv126.461 87.9033 127.573 86.3408 128.75 84.6865 cv131.01 81.5098 133.571 77.9092 133.571 72.749 cv133.571 65.2178 127.908 51.9194 127.667 51.3569 cv127.613 51.2314 li112.97 35.9248 li81.8486 40.6089 licp0 0 0 1 cmykf86.0854 38.6753 mo86.0854 38.6753 81.4258 33.3984 114.968 12.7148 cv134.438 0.707031 153.585 -0.266113 158.126 1.35693 cv160.061 2.0459 162.93 3.48633 163.645 5.57617 cv164.256 7.36084 161.514 6.97949 160.319 12.877 cv159.101 18.8809 161.048 23.0996 161.048 23.0996 cv161.048 23.0996 151.636 27.3184 148.393 35.106 cv145.147 42.8936 145.147 52.3057 145.147 53.2783 cv145.147 54.252 143.524 56.1992 141.577 57.498 cv139.631 58.7939 137.684 60.0928 137.684 60.0928 cv137.684 60.0928 134.114 60.417 131.193 60.0928 cv128.272 59.7686 107.179 52.9541 96.7949 47.4365 cv86.4106 41.9199 86.0854 38.6753 86.0854 38.6753 cvcp0 0 0 0 cmykf131.276 59.3428 mo128.48 59.0327 107.423 52.2295 97.1489 46.7705 cv87.5107 41.6499 86.8379 38.5981 86.832 38.5679 cv86.8076 38.4365 li86.6899 38.2261 li86.6587 38.1733 83.9297 32.7407 115.364 13.3569 cv134.463 1.57813 153.511 0.508789 157.873 2.06738 cv158.881 2.42676 162.225 3.7583 162.931 5.82031 cv162.96 5.90527 162.981 5.96924 162.981 6.03369 cv162.981 6.18555 162.863 6.34375 162.441 6.80078 cv161.645 7.66455 160.313 9.11035 159.58 12.7271 cv159.276 14.2192 159.161 15.604 159.161 16.8481 cv159.161 19.6611 159.746 21.7178 160.1 22.7222 cv157.901 23.8257 150.566 27.9248 147.696 34.8159 cv144.631 42.1709 144.393 50.8066 144.393 53.2783 cv144.393 53.7842 143.165 55.5322 141.158 56.8701 cv141.158 56.8701 137.729 59.1567 137.429 59.3564 cv136.769 59.4092 133.779 59.6206 131.276 59.3428 cvcp114.572 12.0728 mo89.98 27.2373 85.584 34.377 85.1523 37.2827 cv85.1235 37.4775 85.1108 37.6558 85.1108 37.8184 cv85.1108 38.394 85.249 38.7119 85.3716 38.9238 cv85.5405 39.6978 86.8047 42.9834 96.4409 48.103 cv107.096 53.7646 128.17 60.5166 131.11 60.8428 cv134.072 61.1714 137.603 60.8574 137.752 60.8442 cv137.943 60.8267 li141.995 58.126 li143.916 56.8452 145.902 54.6821 145.902 53.2783 cv145.902 51.5693 146.056 42.6758 149.089 35.396 cv152.177 27.9834 161.265 23.8291 161.357 23.7881 cv162.049 23.4771 li161.733 22.7847 li161.715 22.7446 159.909 18.6924 161.058 13.0269 cv161.708 9.82324 162.817 8.61963 163.551 7.82324 cv164.146 7.17773 164.762 6.50977 164.358 5.33154 cv163.459 2.70459 159.878 1.17969 158.379 0.645996 cv153.67 -1.03711 134.375 -0.141602 114.572 12.0728 cvcp0 0 0 1 cmykf68.439 106.174 mo68.439 106.174 78.8237 94.8174 78.1738 86.0557 cv77.5259 77.2939 78.499 76.3203 78.499 76.3203 cv87.2607 76.9678 li87.2607 76.9678 86.2871 88.9736 88.5586 94.4922 cv90.8296 100.009 94.4004 103.579 94.4004 103.579 cv94.4004 103.579 90.8296 103.578 86.9365 101.955 cv83.0425 100.333 79.7964 99.6846 78.1738 100.981 cv76.5518 102.28 76.0498 102.003 75.0757 102.977 cv74.1021 103.948 72.5093 104.553 72.5093 104.553 cv70.2368 105.849 68.439 106.174 68.439 106.174 cvcpf78.3496 85.0801 mo78.3496 85.0801 67.9648 77.9414 66.3433 74.0469 cv64.7207 70.1533 64.7207 65.6094 66.9922 63.6621 cv69.2637 61.7158 68.6138 61.0674 68.6138 59.4434 cv68.6138 57.8213 69.2637 55.2256 68.2905 54.5771 cv67.3164 53.9277 66.0186 51.6543 66.6675 49.709 cv67.3164 47.7617 66.9912 46.4639 68.9395 45.165 cv70.8867 43.8682 70.8867 44.1924 70.8867 41.9199 cv70.8867 39.6494 70.2368 36.729 71.8594 35.4302 cv73.4824 34.1328 73.4824 34.1328 73.4824 34.1328 cv73.4824 34.1328 72.5093 30.8867 74.7808 29.5879 cv77.0518 28.2915 77.0518 27.3184 77.377 25.6943 cv77.7012 24.0723 78.6748 20.8271 81.2705 21.4761 cv83.8662 22.126 84.8398 21.4761 84.8398 21.4761 cv84.8398 21.4761 85.814 21.4761 86.4624 24.0723 cv87.1123 26.6675 88.4097 28.6157 89.3833 29.9136 cv90.3574 31.2109 91.3311 32.5098 91.6553 33.8071 cv91.9795 35.106 92.3032 39.6494 93.2783 40.623 cv94.2515 41.5957 95.8745 42.8936 96.1982 44.8408 cv96.5225 46.7881 97.1714 48.0869 97.8208 49.3848 cv98.4702 50.6826 98.4702 52.9541 98.4702 53.9277 cv98.4702 54.9014 98.7949 58.7939 98.4702 60.417 cv98.145 62.04 98.4702 63.6621 97.4971 64.3115 cv96.5225 64.9609 95.873 65.9355 97.1714 68.2061 cv98.4702 70.4766 99.7686 73.7227 98.7949 75.3457 cv97.8208 76.9678 96.8472 79.8877 95.5498 80.2129 cv94.2515 80.5371 92.9521 79.8877 91.9795 81.1865 cv91.0059 82.4844 90.0322 83.459 89.0586 84.1074 cv88.085 84.7578 86.7876 85.0801 86.7876 85.0801 cv78.3496 85.0801 licp/0 <</Name (BC green)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0.75 0.15 0.8 0 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf175.195 42.4727 mo183.359 42.4727 li186.081 42.4727 187.562 43.5127 187.562 46.3945 cv187.562 48.9561 185.761 50.3564 183.359 50.3564 cv175.195 50.3564 li175.195 42.4727 licp170.193 66.9658 mo183.319 66.9658 li190.724 66.9658 193.845 63.4834 193.845 59.001 cv193.845 55.1191 191.964 52.3975 188.482 51.6367 cv188.482 51.5566 li191.083 50.4375 192.564 48.3555 192.564 45.4746 cv192.564 40.7109 189.203 38.3906 184.08 38.3906 cv170.193 38.3906 li170.193 66.9658 licp175.195 53.959 mo184.04 53.959 li187.082 53.959 188.842 55.5596 188.842 58.3613 cv188.842 61.2422 187.082 62.8828 184.04 62.8828 cv175.195 62.8828 li175.195 53.959 licp0 0 0 1 cmykf215.896 66.9658 mo211.414 66.9658 li211.414 64.085 li211.334 64.085 li210.213 66.165 207.732 67.5264 205.451 67.5264 cv200.048 67.5264 197.727 64.8047 197.727 59.4014 cv197.727 46.2754 li202.29 46.2754 li202.29 58.9619 li202.29 62.6035 203.77 63.9238 206.251 63.9238 cv210.054 63.9238 211.334 61.4814 211.334 58.2803 cv211.334 46.2754 li215.896 46.2754 li215.896 66.9658 licpf218.618 46.2754 mo222.06 46.2754 li222.06 40.0713 li226.622 40.0713 li226.622 46.2754 li230.744 46.2754 li230.744 49.6758 li226.622 49.6758 li226.622 60.7217 li226.622 62.6035 226.782 63.5635 228.823 63.5635 cv229.463 63.5635 230.104 63.5635 230.744 63.4043 cv230.744 66.9258 li229.744 67.0049 228.783 67.166 227.783 67.166 cv223.021 67.166 222.14 65.3252 222.06 61.8828 cv222.06 49.6758 li218.618 49.6758 li218.618 46.2754 licpf231.944 46.2754 mo235.387 46.2754 li235.387 40.0713 li239.948 40.0713 li239.948 46.2754 li244.071 46.2754 li244.071 49.6758 li239.948 49.6758 li239.948 60.7217 li239.948 62.6035 240.109 63.5635 242.15 63.5635 cv242.79 63.5635 243.431 63.5635 244.071 63.4043 cv244.071 66.9258 li243.07 67.0049 242.11 67.166 241.109 67.166 cv236.348 67.166 235.467 65.3252 235.387 61.8828 cv235.387 49.6758 li231.944 49.6758 li231.944 46.2754 licpf266.123 57.7998 mo266.883 51.5967 262.88 45.7139 256.357 45.7139 cv250.194 45.7139 246.352 50.7568 246.352 56.6396 cv246.352 63.0039 249.994 67.5264 256.478 67.5264 cv261 67.5264 264.842 65.0039 265.842 60.4824 cv261.521 60.4824 li260.72 62.7627 259.118 63.9238 256.478 63.9238 cv252.676 63.9238 250.914 61.042 250.914 57.7998 cv266.123 57.7998 licp250.914 54.7998 mo251.035 51.7168 253.196 49.3154 256.357 49.3154 cv259.438 49.3154 261.399 51.917 261.56 54.7998 cv250.914 54.7998 licpf269.604 46.2754 mo273.887 46.2754 li273.887 50.2764 li273.967 50.2764 li274.487 48.0752 277.209 45.7139 280.01 45.7139 cv281.051 45.7139 281.33 45.7939 281.731 45.834 cv281.731 50.2373 li281.091 50.1563 280.411 50.0361 279.77 50.0361 cv276.647 50.0361 274.167 52.5586 274.167 57.1191 cv274.167 66.9658 li269.604 66.9658 li269.604 46.2754 licpf283.251 46.2754 mo286.652 46.2754 li286.652 44.5527 li286.652 39.2705 289.415 38.3906 292.376 38.3906 cv293.816 38.3906 294.857 38.4697 295.578 38.6699 cv295.578 42.2324 li294.978 42.0723 294.377 41.9922 293.457 41.9922 cv292.216 41.9922 291.216 42.4326 291.216 44.1533 cv291.216 46.2754 li295.098 46.2754 li295.098 49.6758 li291.216 49.6758 li291.216 66.9658 li286.652 66.9658 li286.652 49.6758 li283.251 49.6758 li283.251 46.2754 licpf298.02 38.3906 mo302.58 38.3906 li302.58 66.9658 li298.02 66.9658 li298.02 38.3906 licpf305.263 46.2754 mo310.265 46.2754 li315.667 61.7227 li315.747 61.7227 li320.99 46.2754 li325.753 46.2754 li317.709 68.0859 li316.229 71.8086 315.148 75.1699 310.386 75.1699 cv309.305 75.1699 308.264 75.0898 307.224 74.9297 cv307.224 71.0879 li307.943 71.208 308.664 71.3672 309.385 71.3672 cv311.506 71.3672 312.025 70.2471 312.586 68.4863 cv313.106 66.8857 li305.263 46.2754 licpf189.483 85.1699 mo188.643 81.8877 186.521 79.4873 182.359 79.4873 cv176.236 79.4873 173.674 84.8896 173.674 90.3721 cv173.674 95.8555 176.236 101.258 182.359 101.258 cv186.801 101.258 189.243 97.9365 189.643 93.7744 cv194.525 93.7744 li194.125 100.618 189.283 105.341 182.359 105.341 cv173.794 105.341 168.671 98.5361 168.671 90.3721 cv168.671 82.208 173.794 75.4043 182.359 75.4043 cv188.802 75.4443 193.885 79.0068 194.485 85.1699 cv189.483 85.1699 licpf207.932 105.221 mo214.576 105.221 218.378 100.657 218.378 94.2949 cv218.378 87.9707 214.576 83.4082 207.932 83.4082 cv201.289 83.4082 197.486 87.9707 197.486 94.2949 cv197.486 100.657 201.289 105.221 207.932 105.221 cvcp207.932 101.618 mo203.85 101.618 202.049 97.8965 202.049 94.2949 cv202.049 90.7324 203.85 87.0098 207.932 87.0098 cv212.014 87.0098 213.815 90.7324 213.815 94.2949 cv213.815 97.8965 212.014 101.618 207.932 101.618 cvcpf222.179 83.9697 mo226.501 83.9697 li226.501 87.0098 li226.581 87.0898 li227.942 84.8096 230.304 83.4082 233.025 83.4082 cv237.508 83.4082 240.349 85.8105 240.349 90.4531 cv240.349 104.66 li235.786 104.66 li235.786 91.6533 li235.706 88.4111 234.425 87.0098 231.744 87.0098 cv228.702 87.0098 226.741 89.4121 226.741 92.4541 cv226.741 104.66 li222.179 104.66 li222.179 83.9697 licpf248.593 98.0156 mo248.833 100.657 250.834 101.618 253.275 101.618 cv254.996 101.618 257.998 101.258 257.878 98.8965 cv257.758 96.4951 254.437 96.2148 251.114 95.4551 cv247.752 94.7344 244.471 93.5342 244.471 89.332 cv244.471 84.8096 249.353 83.4082 253.114 83.4082 cv257.356 83.4082 261.2 85.1699 261.76 89.7725 cv256.997 89.7725 li256.597 87.6104 254.796 87.0098 252.796 87.0098 cv251.474 87.0098 249.032 87.3311 249.032 89.1309 cv249.032 91.373 252.395 91.6934 255.757 92.4541 cv259.079 93.2139 262.44 94.415 262.44 98.4971 cv262.44 103.419 257.478 105.221 253.194 105.221 cv247.992 105.221 244.11 102.899 244.03 98.0156 cv248.593 98.0156 licpf284.691 95.4951 mo285.452 89.292 281.45 83.4082 274.927 83.4082 cv268.764 83.4082 264.921 88.4512 264.921 94.335 cv264.921 100.698 268.563 105.221 275.047 105.221 cv279.569 105.221 283.412 102.698 284.411 98.1768 cv280.09 98.1768 li279.289 100.457 277.688 101.618 275.047 101.618 cv271.245 101.618 269.483 98.7373 269.483 95.4951 cv284.691 95.4951 licp269.483 92.4941 mo269.604 89.4121 271.766 87.0098 274.927 87.0098 cv278.008 87.0098 279.97 89.6113 280.129 92.4941 cv269.483 92.4941 licpf288.174 83.9697 mo292.456 83.9697 li292.456 87.9707 li292.536 87.9707 li293.057 85.7695 295.778 83.4082 298.58 83.4082 cv299.62 83.4082 299.9 83.4893 300.3 83.5283 cv300.3 87.9316 li299.66 87.8506 298.979 87.7314 298.339 87.7314 cv295.218 87.7314 292.736 90.2529 292.736 94.8154 cv292.736 104.66 li288.174 104.66 li288.174 83.9697 licpf301.82 83.9697 mo306.783 83.9697 li312.026 99.8564 li312.106 99.8564 li317.148 83.9697 li321.871 83.9697 li314.468 104.66 li309.345 104.66 li301.82 83.9697 licpf341.962 89.4121 mo341.962 85.0488 337.72 83.4082 333.679 83.4082 cv329.114 83.4082 324.593 84.9688 324.273 90.292 cv328.835 90.292 li329.035 88.0508 330.837 87.0098 333.396 87.0098 cv335.238 87.0098 337.68 87.4512 337.68 89.8115 cv337.68 92.4941 334.758 92.1328 331.477 92.7334 cv327.635 93.1748 323.512 94.0146 323.512 99.1777 cv323.512 103.22 326.874 105.221 330.596 105.221 cv333.037 105.221 335.959 104.46 337.76 102.698 cv338.12 104.58 339.441 105.221 341.281 105.221 cv342.042 105.221 343.482 104.94 344.163 104.699 cv344.163 101.538 li343.683 101.618 343.322 101.618 343.043 101.618 cv342.202 101.618 341.962 101.178 341.962 100.058 cv341.962 89.4121 licp337.399 97.6963 mo337.399 100.577 334.277 101.618 332.277 101.618 cv330.676 101.618 328.074 101.019 328.074 98.9775 cv328.074 96.5752 329.835 95.8555 331.797 95.5352 cv333.798 95.1748 335.998 95.2148 337.399 94.2949 cv337.399 97.6963 licpf344.804 83.9697 mo348.245 83.9697 li348.245 77.7656 li352.808 77.7656 li352.808 83.9697 li356.93 83.9697 li356.93 87.3701 li352.808 87.3701 li352.808 98.416 li352.808 100.298 352.968 101.258 355.009 101.258 cv355.649 101.258 356.29 101.258 356.93 101.099 cv356.93 104.62 li355.93 104.699 354.97 104.86 353.969 104.86 cv349.206 104.86 348.325 103.02 348.245 99.5771 cv348.245 87.3701 li344.804 87.3701 li344.804 83.9697 licpf360.332 76.085 mo364.894 76.085 li364.894 80.4072 li360.332 80.4072 li360.332 76.085 licp360.332 83.9697 mo364.894 83.9697 li364.894 104.66 li360.332 104.66 li360.332 83.9697 licpf379.342 105.221 mo385.985 105.221 389.787 100.657 389.787 94.2949 cv389.787 87.9707 385.985 83.4082 379.342 83.4082 cv372.697 83.4082 368.896 87.9707 368.896 94.2949 cv368.896 100.657 372.697 105.221 379.342 105.221 cvcp379.342 101.618 mo375.26 101.618 373.459 97.8965 373.459 94.2949 cv373.459 90.7324 375.26 87.0098 379.342 87.0098 cv383.424 87.0098 385.225 90.7324 385.225 94.2949 cv385.225 97.8965 383.424 101.618 379.342 101.618 cvcpf393.589 83.9697 mo397.911 83.9697 li397.911 87.0098 li397.991 87.0898 li399.352 84.8096 401.713 83.4082 404.435 83.4082 cv408.916 83.4082 411.758 85.8105 411.758 90.4531 cv411.758 104.66 li407.196 104.66 li407.196 91.6533 li407.116 88.4111 405.835 87.0098 403.153 87.0098 cv400.112 87.0098 398.151 89.4121 398.151 92.4541 cv398.151 104.66 li393.589 104.66 li393.589 83.9697 licpf42.9238 127.364 mo42.9238 129.003 44.1309 129.644 45.6211 129.644 cv47.2598 129.644 47.8706 128.839 47.8706 128.034 cv47.8706 127.215 47.4238 126.887 46.9917 126.724 cv46.2466 126.44 45.2783 126.246 43.8179 125.844 cv42 125.353 41.4639 124.25 41.4639 123.147 cv41.4639 121.017 43.4307 120.019 45.3525 120.019 cv47.5728 120.019 49.4355 121.195 49.4355 123.415 cv47.5728 123.415 li47.4834 122.045 46.5596 121.538 45.2783 121.538 cv44.4141 121.538 43.3262 121.851 43.3262 122.924 cv43.3262 123.669 43.833 124.086 44.5928 124.295 cv44.7568 124.339 47.1108 124.95 47.6621 125.114 cv49.063 125.531 49.7334 126.724 49.7334 127.826 cv49.7334 130.21 47.6177 131.163 45.502 131.163 cv43.0732 131.163 41.1064 130.001 41.0615 127.364 cv42.9238 127.364 licpf55.8423 127.051 mo55.3208 127.394 54.5015 127.379 53.7563 127.513 cv53.0264 127.632 52.3706 127.9 52.3706 128.794 cv52.3706 129.555 53.3394 129.777 53.9351 129.777 cv54.6802 129.777 55.8423 129.391 55.8423 128.317 cv55.8423 127.051 licp57.541 129.196 mo57.541 129.614 57.6304 129.777 57.9434 129.777 cv58.0474 129.777 58.1816 129.777 58.3604 129.748 cv58.3604 130.925 li58.1074 131.015 57.5708 131.119 57.2876 131.119 cv56.6025 131.119 56.1104 130.88 55.9766 130.18 cv55.3062 130.836 54.2183 131.119 53.3096 131.119 cv51.9238 131.119 50.6719 130.374 50.6719 128.869 cv50.6719 126.946 52.207 126.634 53.6372 126.47 cv54.8589 126.246 55.9468 126.381 55.9468 125.382 cv55.9468 124.503 55.0376 124.339 54.3525 124.339 cv53.3989 124.339 52.7285 124.727 52.6538 125.562 cv50.9551 125.562 li51.0742 123.579 52.7583 122.998 54.4565 122.998 cv55.9614 122.998 57.541 123.609 57.541 125.233 cv57.541 129.196 licpf58.584 123.207 mo60.4316 123.207 li62.3833 129.122 li62.4131 129.122 li64.2905 123.207 li66.0488 123.207 li63.292 130.91 li61.3848 130.91 li58.584 123.207 licpf67.0913 123.207 mo68.79 123.207 li68.79 130.91 li67.0913 130.91 li67.0913 123.207 licp67.0913 120.271 mo68.79 120.271 li68.79 121.881 li67.0913 121.881 li67.0913 120.271 licpf70.6079 123.207 mo72.2173 123.207 li72.2173 124.339 li72.2471 124.369 li72.7534 123.52 73.6323 122.998 74.6455 122.998 cv76.3145 122.998 77.3726 123.893 77.3726 125.621 cv77.3726 130.91 li75.6738 130.91 li75.6738 126.067 li75.644 124.86 75.1675 124.339 74.1689 124.339 cv73.0366 124.339 72.3066 125.233 72.3066 126.365 cv72.3066 130.91 li70.6079 130.91 li70.6079 123.207 licpf84.5537 126.887 mo84.5537 125.562 83.958 124.339 82.4829 124.339 cv80.978 124.339 80.4565 125.74 80.4565 127.021 cv80.4565 128.288 81.0674 129.569 82.4829 129.569 cv83.9878 129.569 84.5537 128.198 84.5537 126.887 cvcp86.2524 130.508 mo86.2524 132.817 84.8965 133.965 82.4678 133.965 cv80.9185 133.965 79.1748 133.368 79.0259 131.565 cv80.7246 131.565 li80.9331 132.534 81.708 132.698 82.5723 132.698 cv83.9429 132.698 84.5537 131.998 84.5537 130.731 cv84.5537 129.555 li84.5239 129.555 li84.0474 130.403 83.168 130.91 82.2148 130.91 cv79.771 130.91 78.7578 129.063 78.7578 126.857 cv78.7578 124.786 80.0542 122.998 82.2446 122.998 cv83.2129 122.998 84.0918 123.4 84.5239 124.265 cv84.5537 124.265 li84.5537 123.207 li86.2524 123.207 li86.2524 130.508 licpf95.8926 124.339 mo94.4619 124.339 93.7319 125.427 93.7319 127.066 cv93.7319 128.615 94.5215 129.777 95.8926 129.777 cv97.4419 129.777 98.0229 128.407 98.0229 127.066 cv98.0229 125.665 97.293 124.339 95.8926 124.339 cvcp92.0928 120.271 mo93.7915 120.271 li93.7915 124.205 li93.8213 124.205 li94.2832 123.46 95.252 122.998 96.1162 122.998 cv98.5449 122.998 99.7217 124.846 99.7217 127.096 cv99.7217 129.167 98.6787 131.119 96.3989 131.119 cv95.356 131.119 94.2388 130.865 93.7319 129.853 cv93.7021 129.853 li93.7021 130.91 li92.0928 130.91 li92.0928 120.271 licpf107.887 130.91 mo106.218 130.91 li106.218 129.837 li106.188 129.837 li105.771 130.612 104.848 131.119 103.998 131.119 cv101.987 131.119 101.123 130.105 101.123 128.094 cv101.123 123.207 li102.821 123.207 li102.821 127.93 li102.821 129.286 103.373 129.777 104.296 129.777 cv105.712 129.777 106.188 128.869 106.188 127.677 cv106.188 123.207 li107.887 123.207 li107.887 130.91 licpf108.87 123.207 mo110.151 123.207 li110.151 120.897 li111.85 120.897 li111.85 123.207 li113.385 123.207 li113.385 124.474 li111.85 124.474 li111.85 128.586 li111.85 129.286 111.91 129.644 112.669 129.644 cv112.908 129.644 113.146 129.644 113.385 129.584 cv113.385 130.896 li113.012 130.925 112.655 130.984 112.282 130.984 cv110.509 130.984 110.181 130.299 110.151 129.018 cv110.151 124.474 li108.87 124.474 li108.87 123.207 licpf113.802 123.207 mo115.083 123.207 li115.083 120.897 li116.782 120.897 li116.782 123.207 li118.316 123.207 li118.316 124.474 li116.782 124.474 li116.782 128.586 li116.782 129.286 116.841 129.644 117.601 129.644 cv117.84 129.644 118.078 129.644 118.316 129.584 cv118.316 130.896 li117.944 130.925 117.586 130.984 117.214 130.984 cv115.441 130.984 115.113 130.299 115.083 129.018 cv115.083 124.474 li113.802 124.474 li113.802 123.207 licpf124.798 126.381 mo124.738 125.308 124.008 124.339 122.861 124.339 cv121.684 124.339 120.879 125.233 120.834 126.381 cv124.798 126.381 licp120.834 127.498 mo120.834 128.705 121.49 129.777 122.905 129.777 cv123.889 129.777 124.485 129.346 124.783 128.496 cv126.392 128.496 li126.02 130.18 124.589 131.119 122.905 131.119 cv120.492 131.119 119.136 129.436 119.136 127.066 cv119.136 124.876 120.566 122.998 122.861 122.998 cv125.29 122.998 126.779 125.188 126.496 127.498 cv120.834 127.498 licpf127.763 123.207 mo129.357 123.207 li129.357 124.697 li129.387 124.697 li129.581 123.877 130.594 122.998 131.637 122.998 cv132.024 122.998 132.128 123.028 132.277 123.043 cv132.277 124.682 li132.039 124.652 131.786 124.607 131.547 124.607 cv130.385 124.607 129.461 125.546 129.461 127.245 cv129.461 130.91 li127.763 130.91 li127.763 123.207 licpf132.218 123.207 mo133.484 123.207 li133.484 122.566 li133.484 120.6 134.512 120.271 135.615 120.271 cv136.151 120.271 136.539 120.302 136.807 120.376 cv136.807 121.702 li136.583 121.643 136.36 121.612 136.017 121.612 cv135.555 121.612 135.183 121.776 135.183 122.417 cv135.183 123.207 li136.628 123.207 li136.628 124.474 li135.183 124.474 li135.183 130.91 li133.484 130.91 li133.484 124.474 li132.218 124.474 li132.218 123.207 licpf137.686 120.271 mo139.384 120.271 li139.384 130.91 li137.686 130.91 li137.686 120.271 licpf141.247 123.207 mo142.945 123.207 li142.945 130.91 li141.247 130.91 li141.247 123.207 licp141.247 120.271 mo142.945 120.271 li142.945 121.881 li141.247 121.881 li141.247 120.271 licpf150.053 126.381 mo149.993 125.308 149.263 124.339 148.116 124.339 cv146.938 124.339 146.134 125.233 146.089 126.381 cv150.053 126.381 licp146.089 127.498 mo146.089 128.705 146.745 129.777 148.16 129.777 cv149.144 129.777 149.74 129.346 150.038 128.496 cv151.647 128.496 li151.274 130.18 149.844 131.119 148.16 131.119 cv145.747 131.119 144.391 129.436 144.391 127.066 cv144.391 124.876 145.821 122.998 148.116 122.998 cv150.544 122.998 152.034 125.188 151.751 127.498 cv146.089 127.498 licpf154.298 128.437 mo154.388 129.42 155.133 129.777 156.042 129.777 cv156.683 129.777 157.8 129.644 157.755 128.765 cv157.71 127.87 156.474 127.767 155.237 127.483 cv153.985 127.215 152.764 126.768 152.764 125.203 cv152.764 123.52 154.582 122.998 155.982 122.998 cv157.562 122.998 158.992 123.654 159.201 125.367 cv157.427 125.367 li157.278 124.563 156.608 124.339 155.863 124.339 cv155.371 124.339 154.462 124.458 154.462 125.129 cv154.462 125.963 155.714 126.083 156.965 126.365 cv158.202 126.648 159.454 127.096 159.454 128.615 cv159.454 130.448 157.606 131.119 156.012 131.119 cv154.075 131.119 152.63 130.255 152.6 128.437 cv154.298 128.437 licpf160.854 128.898 mo162.925 128.898 li162.925 130.91 li162.911 132.132 162.091 133.026 160.914 133.265 cv160.914 132.355 li161.569 132.191 161.897 131.551 161.882 130.91 cv160.854 130.91 li160.854 128.898 licpf168.945 123.207 mo170.554 123.207 li170.554 124.279 li170.599 124.279 li171.105 123.52 171.746 122.998 172.968 122.998 cv173.906 122.998 174.786 123.4 175.128 124.279 cv175.694 123.49 176.425 122.998 177.542 122.998 cv179.166 122.998 180.12 123.714 180.12 125.591 cv180.12 130.91 li178.421 130.91 li178.421 126.41 li178.421 125.188 178.347 124.339 177.021 124.339 cv175.873 124.339 175.381 125.1 175.381 126.396 cv175.381 130.91 li173.683 130.91 li173.683 125.963 li173.683 124.905 173.355 124.339 172.327 124.339 cv171.448 124.339 170.644 125.055 170.644 126.336 cv170.644 130.91 li168.945 130.91 li168.945 123.207 licpf187.6 127.051 mo187.6 125.725 186.929 124.339 185.409 124.339 cv183.889 124.339 183.219 125.725 183.219 127.051 cv183.219 128.392 183.889 129.777 185.409 129.777 cv186.929 129.777 187.6 128.392 187.6 127.051 cvcp181.521 127.051 mo181.521 124.697 182.936 122.998 185.409 122.998 cv187.883 122.998 189.298 124.697 189.298 127.051 cv189.298 129.42 187.883 131.119 185.409 131.119 cv182.936 131.119 181.521 129.42 181.521 127.051 cvcpf189.909 123.207 mo191.19 123.207 li191.19 120.897 li192.889 120.897 li192.889 123.207 li194.423 123.207 li194.423 124.474 li192.889 124.474 li192.889 128.586 li192.889 129.286 192.948 129.644 193.708 129.644 cv193.947 129.644 194.185 129.644 194.423 129.584 cv194.423 130.896 li194.051 130.925 193.693 130.984 193.321 130.984 cv191.548 130.984 191.22 130.299 191.19 129.018 cv191.19 124.474 li189.909 124.474 li189.909 123.207 licpf195.615 120.271 mo197.314 120.271 li197.314 124.22 li197.344 124.22 li197.761 123.52 198.64 122.998 199.653 122.998 cv201.322 122.998 202.38 123.893 202.38 125.621 cv202.38 130.91 li200.681 130.91 li200.681 126.067 li200.651 124.86 200.175 124.339 199.176 124.339 cv198.044 124.339 197.314 125.233 197.314 126.365 cv197.314 130.91 li195.615 130.91 li195.615 120.271 licpf205.419 128.437 mo205.508 129.42 206.253 129.777 207.162 129.777 cv207.803 129.777 208.92 129.644 208.876 128.765 cv208.831 127.87 207.594 127.767 206.358 127.483 cv205.106 127.215 203.884 126.768 203.884 125.203 cv203.884 123.52 205.702 122.998 207.103 122.998 cv208.682 122.998 210.112 123.654 210.321 125.367 cv208.548 125.367 li208.399 124.563 207.729 124.339 206.983 124.339 cv206.492 124.339 205.583 124.458 205.583 125.129 cv205.583 125.963 206.834 126.083 208.086 126.365 cv209.323 126.648 210.574 127.096 210.574 128.615 cv210.574 130.448 208.727 131.119 207.132 131.119 cv205.195 131.119 203.75 130.255 203.72 128.437 cv205.419 128.437 licpf220.706 127.051 mo220.185 127.394 219.365 127.379 218.62 127.513 cv217.89 127.632 217.234 127.9 217.234 128.794 cv217.234 129.555 218.203 129.777 218.799 129.777 cv219.544 129.777 220.706 129.391 220.706 128.317 cv220.706 127.051 licp222.404 129.196 mo222.404 129.614 222.494 129.777 222.807 129.777 cv222.911 129.777 223.046 129.777 223.225 129.748 cv223.225 130.925 li222.971 131.015 222.435 131.119 222.151 131.119 cv221.466 131.119 220.975 130.88 220.84 130.18 cv220.17 130.836 219.082 131.119 218.173 131.119 cv216.788 131.119 215.536 130.374 215.536 128.869 cv215.536 126.946 217.071 126.634 218.501 126.47 cv219.723 126.246 220.811 126.381 220.811 125.382 cv220.811 124.503 219.901 124.339 219.216 124.339 cv218.263 124.339 217.592 124.727 217.518 125.562 cv215.819 125.562 li215.938 123.579 217.622 122.998 219.32 122.998 cv220.825 122.998 222.404 123.609 222.404 125.233 cv222.404 129.196 licpf224.207 123.207 mo225.816 123.207 li225.816 124.339 li225.847 124.369 li226.354 123.52 227.232 122.998 228.245 122.998 cv229.914 122.998 230.972 123.893 230.972 125.621 cv230.972 130.91 li229.273 130.91 li229.273 126.067 li229.243 124.86 228.767 124.339 227.769 124.339 cv226.636 124.339 225.906 125.233 225.906 126.365 cv225.906 130.91 li224.207 130.91 li224.207 123.207 licpf236.188 129.777 mo237.707 129.777 238.349 128.392 238.349 127.051 cv238.349 125.353 237.528 124.339 236.218 124.339 cv234.623 124.339 234.057 125.755 234.057 127.141 cv234.057 128.467 234.713 129.777 236.188 129.777 cvcp239.987 130.91 mo238.378 130.91 li238.378 129.867 li238.349 129.867 li237.901 130.746 236.933 131.119 235.964 131.119 cv233.535 131.119 232.358 129.315 232.358 127.007 cv232.358 124.22 234.013 122.998 235.696 122.998 cv236.664 122.998 237.737 123.355 238.259 124.205 cv238.289 124.205 li238.289 120.271 li239.987 120.271 li239.987 130.91 licpf251.639 127.051 mo251.639 125.725 250.969 124.339 249.448 124.339 cv247.929 124.339 247.259 125.725 247.259 127.051 cv247.259 128.392 247.929 129.777 249.448 129.777 cv250.969 129.777 251.639 128.392 251.639 127.051 cvcp245.56 127.051 mo245.56 124.697 246.976 122.998 249.448 122.998 cv251.922 122.998 253.338 124.697 253.338 127.051 cv253.338 129.42 251.922 131.119 249.448 131.119 cv246.976 131.119 245.56 129.42 245.56 127.051 cvcpf261.487 130.91 mo259.819 130.91 li259.819 129.837 li259.789 129.837 li259.372 130.612 258.448 131.119 257.599 131.119 cv255.587 131.119 254.723 130.105 254.723 128.094 cv254.723 123.207 li256.422 123.207 li256.422 127.93 li256.422 129.286 256.973 129.777 257.896 129.777 cv259.313 129.777 259.789 128.869 259.789 127.677 cv259.789 123.207 li261.487 123.207 li261.487 130.91 licpf263.246 123.207 mo264.841 123.207 li264.841 124.697 li264.871 124.697 li265.064 123.877 266.077 122.998 267.12 122.998 cv267.508 122.998 267.612 123.028 267.761 123.043 cv267.761 124.682 li267.522 124.652 267.27 124.607 267.031 124.607 cv265.869 124.607 264.945 125.546 264.945 127.245 cv264.945 130.91 li263.246 130.91 li263.246 123.207 licpf277.863 126.381 mo277.804 125.308 277.073 124.339 275.926 124.339 cv274.749 124.339 273.944 125.233 273.899 126.381 cv277.863 126.381 licp273.899 127.498 mo273.899 128.705 274.556 129.777 275.971 129.777 cv276.954 129.777 277.55 129.346 277.849 128.496 cv279.457 128.496 li279.085 130.18 277.654 131.119 275.971 131.119 cv273.557 131.119 272.201 129.436 272.201 127.066 cv272.201 124.876 273.632 122.998 275.926 122.998 cv278.354 122.998 279.845 125.188 279.562 127.498 cv273.899 127.498 licpf280.828 123.207 mo282.438 123.207 li282.438 124.339 li282.468 124.369 li282.975 123.52 283.854 122.998 284.866 122.998 cv286.535 122.998 287.593 123.893 287.593 125.621 cv287.593 130.91 li285.895 130.91 li285.895 126.067 li285.864 124.86 285.388 124.339 284.39 124.339 cv283.257 124.339 282.527 125.233 282.527 126.365 cv282.527 130.91 li280.828 130.91 li280.828 123.207 licpf288.591 123.207 mo290.438 123.207 li292.391 129.122 li292.421 129.122 li294.298 123.207 li296.056 123.207 li293.3 130.91 li291.393 130.91 li288.591 123.207 licpf297.1 123.207 mo298.799 123.207 li298.799 130.91 li297.1 130.91 li297.1 123.207 licp297.1 120.271 mo298.799 120.271 li298.799 121.881 li297.1 121.881 li297.1 120.271 licpf300.615 123.207 mo302.21 123.207 li302.21 124.697 li302.24 124.697 li302.434 123.877 303.446 122.998 304.489 122.998 cv304.877 122.998 304.981 123.028 305.13 123.043 cv305.13 124.682 li304.892 124.652 304.639 124.607 304.4 124.607 cv303.238 124.607 302.314 125.546 302.314 127.245 cv302.314 130.91 li300.615 130.91 li300.615 123.207 licpf311.287 127.051 mo311.287 125.725 310.617 124.339 309.097 124.339 cv307.577 124.339 306.907 125.725 306.907 127.051 cv306.907 128.392 307.577 129.777 309.097 129.777 cv310.617 129.777 311.287 128.392 311.287 127.051 cvcp305.208 127.051 mo305.208 124.697 306.624 122.998 309.097 122.998 cv311.57 122.998 312.986 124.697 312.986 127.051 cv312.986 129.42 311.57 131.119 309.097 131.119 cv306.624 131.119 305.208 129.42 305.208 127.051 cvcpf314.371 123.207 mo315.98 123.207 li315.98 124.339 li316.011 124.369 li316.518 123.52 317.396 122.998 318.409 122.998 cv320.078 122.998 321.136 123.893 321.136 125.621 cv321.136 130.91 li319.438 130.91 li319.438 126.067 li319.407 124.86 318.931 124.339 317.933 124.339 cv316.8 124.339 316.07 125.233 316.07 126.365 cv316.07 130.91 li314.371 130.91 li314.371 123.207 licpf322.895 123.207 mo324.504 123.207 li324.504 124.279 li324.549 124.279 li325.056 123.52 325.696 122.998 326.918 122.998 cv327.856 122.998 328.735 123.4 329.078 124.279 cv329.645 123.49 330.375 122.998 331.492 122.998 cv333.116 122.998 334.07 123.714 334.07 125.591 cv334.07 130.91 li332.371 130.91 li332.371 126.41 li332.371 125.188 332.297 124.339 330.971 124.339 cv329.823 124.339 329.332 125.1 329.332 126.396 cv329.332 130.91 li327.633 130.91 li327.633 125.963 li327.633 124.905 327.306 124.339 326.277 124.339 cv325.398 124.339 324.594 125.055 324.594 126.336 cv324.594 130.91 li322.895 130.91 li322.895 123.207 licpf341.117 126.381 mo341.058 125.308 340.327 124.339 339.18 124.339 cv338.003 124.339 337.198 125.233 337.153 126.381 cv341.117 126.381 licp337.153 127.498 mo337.153 128.705 337.81 129.777 339.225 129.777 cv340.208 129.777 340.804 129.346 341.103 128.496 cv342.711 128.496 li342.339 130.18 340.908 131.119 339.225 131.119 cv336.811 131.119 335.455 129.436 335.455 127.066 cv335.455 124.876 336.886 122.998 339.18 122.998 cv341.608 122.998 343.099 125.188 342.815 127.498 cv337.153 127.498 licpf344.082 123.207 mo345.691 123.207 li345.691 124.339 li345.722 124.369 li346.229 123.52 347.107 122.998 348.12 122.998 cv349.789 122.998 350.847 123.893 350.847 125.621 cv350.847 130.91 li349.148 130.91 li349.148 126.067 li349.118 124.86 348.642 124.339 347.644 124.339 cv346.511 124.339 345.781 125.233 345.781 126.365 cv345.781 130.91 li344.082 130.91 li344.082 123.207 licpf351.83 123.207 mo353.111 123.207 li353.111 120.897 li354.811 120.897 li354.811 123.207 li356.345 123.207 li356.345 124.474 li354.811 124.474 li354.811 128.586 li354.811 129.286 354.87 129.644 355.63 129.644 cv355.868 129.644 356.106 129.644 356.345 129.584 cv356.345 130.896 li355.973 130.925 355.614 130.984 355.242 130.984 cv353.469 130.984 353.142 130.299 353.111 129.018 cv353.111 124.474 li351.83 124.474 li351.83 123.207 licpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.0%%For: (Matt Owen) (Nectar Creative)%%Title: (BC master_new strapline outlined.eps)%%CreationDate: 9/2/10 10:19%AI9_DataStream%Gb"-6D3%rBOXBo4l9FnW/]N.(NK`h!`aFAclL*?96]V]"UD[LE0^'9hF3Q$8MPA_sfACi4M9'a5<KXR4)jh.F8_mZL=a;bI,NCp3%5Psg@mC.#JHM-D2[r;<8c`d1cPtJ^3,@0Ef%\J1C^L$m8jYnP]Y&d;>mB1NP5oRf0(djL*eE\+NOK[KRIJig'jdZ"ZHM@.'jYu':%hnFR:m[KhUh7e@.pnu#B2ud-3qs`nDbD3RqSmK(ElIQDO+o_3/gK1SnqU]YXIeWEhc`]qX"7YqerVF9WoAU96It"5D'E$0p*aaEo%e]V;kV_>g]k9p*#)gp"]X+,Wuo)3nQZTL*]#'Be:S+ginHp%FJHbB3m]9b2.r(NP!J+;X8Cd.joeT0K'r!<)FYEjV&s5tlalQ?,t%f.[0nlC7P:?G(d\p<EX:)$fo*QVUu'Ie!E6i[g+=?*83QY#FfVjK5g+Ht_7GY=!%6^LO>?Wq:Bbf^2a'NpE9OB)<=\00d*qq<+AW%rSkfVX#KM)Ie-((lW:82M<LFQmlu<prs@i1.+2V)=&F:f2-58+lYg.FI.qPt?G._`DZ4pcK3u:ilK)e!qX!>&oa>/Kd8sG"ZGCHc%]_fUipHgEL?[iGGJ5GSW=jZ=brpoX9qLDq%rUS3OhL;0YITFm>8uZ(GP(ep*]F'7\+?6lG6h&k'.7kpD/nI4Hs(D)i$siZb5dnE?%!r1lh=+>Jfk3(%lOSp_jH<nFO8Kn-+maYAhJ[B[Pq*QN_`Ld)?s.:MP,eSX,nr:m^8G;h:[@_$@rl+&J^i03#<;bmtX4LJ#I[0M)%QXS\WTtIp_nc$MRYA+X$s*FKjYAXC2*d#$8^Qe5o<r<p>5EA<i$AoIFimX.]BhJ<qi;qiu[q\@4>4Jar[&OkCC41?r50#pX1!jM@%lnSE-X"hs.J)MbY*KOlV4Q;jN,<e+/dH9BgT0>BeMJk^Ai:D^/IYT01GW?g/Oe:X&rcq+kcgVUM0IQcd/'Q+Jb0Madr'VLJ#X:%^%`rs/83T2@B@7L$KSqncfN#CS%k)J8K@SV.pZ,u1(($:4BB_1]nR'.#i:)jq*`"IOiS")K/c`qP-HoaabCZI)B&$7NMr'X=c6-bpk%EQ.DdXY;tH@:FrJ`Vf3=mk?i+5CRY6JD_eY@=J!n<@!h@YC&O*kVRgP48nrCEI>\c=qP\5(XAPGa2g7n5*nG0HEi2(6Q=7p.20&*%[lJ5QMYZ3Y>*6NR5N7@R`D<kWljfXJAc(=-k4f'W\'qS1MGkH`:.cZ]pqH5T-/LXC@\(gkhCrtW&YC#_N`Q.$p<N-uF8k4@\MHh%%>]\nZ4ZqpmddOd%q45E9^0B3[j`jsCT@E7M^X=4<^!`#2oQ?E>bNh2s7#jidHc:`#e]7"%A\\.T#`J]"DfWg)s'k%:lYldGRIAbb%r-.q;'LLC.r7;kEYJ9n:GJ<P%TAAnlbmcm?J+MRb/`3bHq=!h+h&R[)DuRA`kPOp2s"3gaq)R"95ImqEn*g$UjqmVDQ\U>/95Je_%G>"7ZpG`'00$*37*IfO)Y/Js6mdg=o6Ym+3=;f!1SUP),)spBW"SPjc?GCW<-g8#D^JdB4GG,=j=R35//T$ZdDXeP>QaUW,Hb&f^%qhPBpDt,8;G0J(edd@-GOSAL:p\n)1_*)"IbHUJmnqgbQ-fP3b[LqceJ7?G6]713<9+1C@;i:Df?tao^bkpdqcf.&R^f/un:\[]L%m7;%QquNq\g"Y*A4(\4P9pko[ZK%FLO\I@.8r((Eae@Fopg8QF-iZCWT:t8A&8PD*S),qM"#PVUn9:s=#CM:_nGg$C=>@dk;T/b#%B)hbn.t/Q/gK,UX[#fJPcfR$"L$u8j5(!8][dq#4p(XmJku]ZgRQ^sQ-%A8Ln^iE#&rOT5oI4%s7FtNs%./QC]md\D>+7#_)u%k"%K2\eQS'hRlUP30kA&n+Xr3')LD%GmDSX,eWKDl>F_>`@OeogTaMgQ'4gNSeK85L@ReGY?6_$iC%QPnQ\cHh&!md9CFEUDhTBl+/[%`ogU?#HZF,H/C#6QYq.6EdbF(_>elSrT`d(cL4gUZDA=G(-aeqmF*c8Q#69dD#MO+5]QY)BlWmoaf4oZ>kPYRKQlQAB>])4k?Ze=%>j:Tqa7D(LXd%?q_NNR:5q-?&D2d:8kKL/>MF#/N9kUN7"[;+>8Kg.g88?&"D+<>$f3@P-P?p7aUI`3^8%qkU7S7Dm:,X`aqTd-Z%44Lgr)6QPBPTe=$aRMj(1@cIQ)FmUq[+n2RRFFani#1=Pb+Hcr*Zf^qqO:I%c^"(t3\KESXkOkp`UHtVbmlQlVpn_$Br`2BpS:U5%\6qTOcdte`9/O6I-<69[SQ[Z+N8IU[=6;;o99k_hes%MtfpCYR8<s-5`f2<!Y=(to>2.DYITtqZ,JQm*l`HqdDbmI1:T^!mn#5lB%Hrn8Qr6;&hq0?p#W)(-AVq<?O7XjZJ;ll)pgni!cXNQUMVi8,_qT;`+p3"?=rbcSN:0^TK<fLP8d8BV>^F9=Fcp9g/h5*0)2ROq$%jbV6Up#pJc_+tECFZX`GgU[$%j?Y_QXs3'-^`=9T\CXNebGIt`'l<WYa!lkdICtj5Co:QtI&s\HRNsh;30>Nd(HIc@g1]P<3-@WL%%jUP2IrTsaYC&O+l+<ASO6nZBb&;;DHjX1FcGY-+.7CiDHLb#&+&Im;A0'L%\#oXLA+2RtOffX8D`Dqifq$^`gILY'Q_F%i1V)`s%rU75DL,tQ?+.$O5N:#8aE]Boe)j;"#p6>_W9)*4slQaNNR$n7+otsOZpal44)oK0qM%kU8VM*oqDPlj]R,^9f_)3]_kaP>Kn_6uo%7+]m4g'uC6q6k???sQ5XW9$(LGaSC@c_HN-ElV0(7FRoo;Q8i$TD=JKc,saKVG<h^s4hU\XK/X!6sl3ZI_1=?I2Ha[B:Cd+@rRu7%H;FGXD5]a!;^I,rbGFj//E-TH;]W2&kLj&35O(+se2=)\m$H.;Y;t;1+1uf_anOTJ[\',Amt05HcAbN\mjftL\%Hu/[CCt#r[,T_%'!?P7\+E[t`oVT<J)M'[T3H=Hr]KJ/rjV>mo(31^"mfkMP?4l,I?fK^7)QR[O"3Vuj$$a/"t_J,<]P4sISQ@'nT&HA7Ft=@noN;u%99WQSSWthj/s@>oN&1#Db)M2Ni6Nb+hq6C_#.Q;Q:ZL@3(S@Adh/2LGB6NHA+gjKUZb-obRO^b=Ks]+\kjA-Jj2Z5mp_/'.fOK<K%WY`6H6Hs=VUYNI.c>Sl<o:8*g[6f7_[e"U#Lm>MpeUkN'El5:<`u&N@)!6]*'b4o!`fV?jS[F1*^FSH3%N`\)IJu0;s#F/fdG^R_%IrTW+ll0/'N,$)=Mo34DX5;oZ?5@SYcgK\<Kua8o3kg#/E9A1$)>rdUgXgBD^sD0#qT7nRhgbM\"!RO?\,Z;*>/,B9OMp*boooC0%?bQG>55M1$Dnl8ITATSGmGT.)^3][gQWLqJnc"SN\$'/Qq<FHA>oAT>YP8QX5(E7a-"5CY?@DdY:\OOPGDJQ`iTccEq`c_Uhoh>q%Yl==k\$+Z'r9fS/ImfO_h::o)Dnl,.eSj<YI6GW[s(Dnk^^<O-ru05YQ%%]:0Ad>ik>/AfVbamLp\qq_;l'*,T-,6T=76%^iq;V=%IsC_IlT`+0]_$^^T?enTZg[FgLY"39]j/=UDuKE;6'd"GqVBoXYJ,9cWGr%9eVeY??Tl,Pq>"C3H2mI"]6h/:q>7YiSi17\kl$t]%042KmH8EVKH1C$tX+,Whmd!YkNFhtbX#FD-%ak6fU@IX"f16XdqYZC-^4*'!IK.=mD>F!76,p*8]Qs&89&[*LYTKQGiFdM'7+gk5%r)OZpQM!Cfp'I=XYAW6655qI(0>;`Yg_T\c85T('=9&7i9^Ap4HaR+tX4sffs*=C[K<X]hjl!VB4q3XVm@c_.L]!5Ti^7r%($,An%rpKc1IsZZd5OSDs]<Ctj52W:8GTZ?Bn[uKK]=U/]h;6uCNOsWN#u^67?+rsU;.R6$/][bKh=5a&4l.1!Yoh`**m68[dkMo];=(dH%qqJa;j6c7$c0`%.\*^W\QJ6eVDW>TD>n/f&V;C"`*,f_5DJhiDhR&bu;f;/#\qrB)7Z<FK5OQO2gl@jY7NZKs;+;U@`"C!5MWoQ(%lc4H)6>Z:CkcNHCHL=A#C$9#7_9(;hmC(iXd<]T1[aK1h,+1e3?*2u8]6^Qfoqmc'CTFk/RVSq.L:SAI6b+joj]HEDNT`(0Zr0OG%)>Zr37?kB2TC;>*hr^CjZC$lek)sd\3TcEioT8Li>rnk;FH]2ZLX]3r-"Zj2;FjH.M"gEl*oh+MM$$4kX<QVE9JONuQgbRS_d,6V%gMdfqkb3\K9#r00(d_=7M_*p5CU)YIK!7]+][T@S[Rf9`i`#mKYZuVMgY6p='1beFbEY<nq>Ba8D`<d4D[q?ek,7gaI!0iqC"R.i%13jr@q!RM_#h/d7Y?-nJ,".9X%Rj5l2"=qY=4C<Uf><lIn3PICf:BX9p:<BmAoAEr2i;%X]"OQHWkF;'pb`!eobHi$*7BG*XNQ7!%%:=>Q3pQ%^?8qQrqWdcP"%ZITYB$:fbIL&gSAteEM=FdEP/ZSL?=.pM3pQ%^?8i+_KH$bBTbP=EZWG[YZ'Q]!Za6Q4XE*98GlS::%-lq+o/b*tjf<)c)lo".[p!rD/oi:@D&&*-RV9dF/W'pFpJ,5!d)1VM'_^,'FlgEhV4F,bS]l*bUh]hBeT=rt#X.Ht?,9>p,>5-Nq%Dlp3fp,`."o0.h=IG+VS^@"d'G:0TSl0D^rFa`)9]Z/X*T=inOFdW&Pq^NtsI.BmB0Ald!E5Di<r.+g#'EU^gO:BV<%mamhA$l8'%8cS97gAh/J^E)f.*gdRL0:t+Ai7N%N&XSMm,2X3UQg9qfl3lqd:NA-ER7O^O'75iOSN`T^lTluR.G]1JGD:#VDC"+K^@euZ9fgN&%%0q<Os)ZRW6"bY;.0h::>t._$])6YqH9A-NF^aUQ=%2X).,SZbRfB-VG7!^N^E$8SE-8tH""F\fp7`mRB.qjm<9oonmDt4kSXh8^%rf??'W]&#GPRsQAI*mZ9]!/ZTNq^,&6.ZFD;fsgL,6+U_#)\%B1b/db5u@hS*>L4<MMJ/%`b_,>mRARV.6QgUUQ,oGC-qne[_](^%LHF0)%gSfFTPh4iH`"sBl*?(^A1ns7:Yh?BU!Fk)Q=NHRp0Em\2e4#eMCc=PRIhVD)e;6uaJpF>WuXTQ%2!'Y,0]ICW'(DX#?g::%_QJ^ACV>W/]Fd_['T%(l+,&-rcp/4X=[[!_Oe+q9kcID)4-?NR#MB2FLa.bd/L#As66"!X&oi:H@ei;J7hDCd,-QpGm3_CNL`F/E%H%%,]rBW>9&8Ff]mu,9cFq=gbLa$dg$Gi8]#&p[L+gWF$6P7;2h0%*hDFBsR+pI9"62"Fmnk5]s'[]%3BHTZ!O^$4(mR/jV3+)i?%1.>adKK[,Y4[bQt7uLQ',bY1JjU-?PYk!?.#LK#+2u^DMk@QqpG.R-_gY]HMf583=l#ef.NQ`u59tYB$FlVo!m(->BS'F1.hjq2+%&%4(A/ZDrom_o&6>^,(SfBI25Ain5-k.@_ZX".0\V/4L:W;EM-%N6-5a%I"=%+3BP,_+2>>*SSDqb?;s4(.8)^coP/39kCsI_b88%GK"$[6.F_QB[.UEO/9lTh(7226amI^c0Zu0Jt$77.DS.s^f(9b+Wbcn[lRL&8DRQYc!DJNTJu$)_<pD]=O4Gm9]o''ZgO7!M;9.q%G4WaKk">ob$NJ"4Hb!B8Q9Sq1D_-U[M5>T@_+`_OpfhliYIs29_hi\gaZR:J*.QHp5+H<.Qcrp4(ZuM4l2I%^:E2+k\GZWg*%8og%%rr\br/sjufQ_QlI<tItm%5hq^:3o[oa^)'17C>6T8(fjK7/':lsS%oLM7;!5+\WY^NfG6GAmNZZbu]Voel]d?%:k:`a-K*;o,4+%nbW#e*C'IHI=/5Y++Cjd^/r>c5@,GhX5esWYE//&n\^F>a7nloiM&Mb8dU!l^JfX$-XMR(IN6-&lYmG`mUZ-o?\dIl;t%sAGTCsf%N?A$11-]%53doo;R3V$]YFiJT5Db:m[*0E+:Mu\pgc/5KKU"0UT=Dj9gg[<hL,H[d<a0/PANtaH7C7X=NBsoVS*dT$2HG(YfhZ7Q%R5Ga"P]m0,/XY,I$AuI6J1Xl-L)%(b>PMY#gQsR#^OH(CX8dA9bBGVrr8HbfYN:raYJm%/a9V9p\7Q@I\#Qdt4bGq0d?g9nL.raB%W:tcnUV=gL&"cbi0='m3@+L*//,>fHeun$%hu2tc[s8uQYM7=fB(Hr?3[j/q?Z#D7Roe:UnpI:Yb?ROBrACo(G4ErHOOnu+S(DYo%DZ+]Srp-bmH1fF_bu\1X>>=$?\%<nlKlLOf.+l0_V6D)_"\*Iq_b]ZfmuoN(2-60&b@F3jMnOK1pa9U/l#1,H/]rPuQu=pRBt=)$%^ZaGP=8r+^!rVXi^A>h!J,\oul77Sga00?k:\n;lGV4JZ=8pgGIk:<jNW/lLr.Kjg\ek6`or%93e*ltu?Ru$M-gU6I$EO+d0;E5W%nhkpo>2BnH2-e15bg6+Qq>@b`CE/u@ci*7b+P1C;qUHP[gU0<cf6-?2)u//^K.(5m:V;7l>oU^+K:5`CGO*;CbF$GBK"p+u&?IKq%G2R9t,EO)!FbG/**s6)k6[+ofYeZDnN_W$hke"8:Ao54g7E!9Z[M*i4(39ttQ3K?`LT-!(lrm0:8R%fS8_6=Sk&+M2ME"=X2Qpt%%LO%Y'H#;:sm'J?WZ#*(RBfhs)[\^l:g\MoNRA+TfkG>OCcKDTP4(6_6FC*_1'6_fiZe2]Ca@SIc_m\Z[S[A&MTVm%??D.+9@D0*d%*Th37kI#0mYg^%N`O7'9VsSjAgQi=2D*-pbE#j/g7C8R[CYNq`(Rq#AC>3j5f"S+X@FNR=CYrrgJ(&A>e\8#![4kd)nC%TKbXS70%YpZu>*4.U:,"SJpD'K:fNC(5uZ7WME*44se+)X1"T?BX+O3q$B4)W8!Dl2_ch6rlYPI<[7D;,@YC$PlY[[jYOIQ;sb[g'.(V_dp-%[@N`7kh3O`g,eT-mDSq"Xi!ogq>tK%)TZ-SNn-5FG-oOD:.Mp54(iN\eoAE@3sk8LXj:J2G0]fg?bY?=CQfe9%ICE?=gX_;2KHt'%1Y]?\fP+Q^`O;nd:>>Ur[V[%.eh;fnl]rZ3Gri8IY(u6cF0`[,g'%Q41nA\NC$Kcl1n@Q.C$JXL1n?Ecm?LW&G&$WUL9FAo^S=qa%SW``^*U]n4j(KBSl\jKjna2h'UXC3hhu1m%%(01/0'TQ>r7q_:*.E\J^?Ot*hm,?/cLiA(c1cM`G#cu.eK=eah63:EZI@T_K@R"P%NK%("I'#kdn&mMi_c<<RdHB"bK@[5Kot<rGLY&tQUgGZqI8mpU![uZ/6OHOuk>_h(=*8r+kt/UVZ[PajaZQbI3?;&38nEDh3_Jta%rK)\^VR9,ba0G&&KZSqXD'\]YBf@<*]R2Nr'h`]Jf&gs-KOp]Y>2RYdU11+J\Q,n2M_("gb$hnlctpq?&str'b([PfbH_6q@""@[%84V^OAPrAZ&T%*L-J\i&c)t7k5-tnj&&3"%XCIHB/gaZ4Xsn@,9iph1/7ZkrA7VsiOi\_#!L[TW9L(H$Z=K'7;V5+Y2Y/L]$AO3H%T<3*@!pDCo/:b<,ZO!`GY'QXjc*CVFR3hXV3m#kS$deQE/&[kBSg7#/3iDY%6B9tl6G\f8BPH'ELu-ado2s$T76;I@@*s,-LtiL9%p/jBiH@U,`K?_F9$d;f-9]0aQp1gSL'F2Z2=pANCE4rZ9XDZVrQBn%&MX`,9Q*u\ZV-pL\U*OVPX4Wa8]pr&$3Ap,GlT9\/8m?P9%pS/ZbT!V\^@=ja>Yc+$Hll$0K<DnL88pbPQ0cTB6fsHo;FPPWQMKRU\.Jfl%G)n.GO0u'kM?:X)"]_HF42?VX'e(N*C15!d2m)ce%N7c"!Ec7cB:DdG<(;"U]i1o)Q09Tn$3N/lD5?Sm*p9O'9%\(XbkQ+d=.sh]MGu%HY*,FZC!Y?h4qjp&M@@U4^g^bF,DX:4CluCcJ%kWniX>Nl.djuinuStB)a'>>Wbc6jV9EciIG<-abo^/<^jnL$LAJ@m6ko's@=:7:H?=)Bn*"=agm1lfj_)N]DK^gp<X5cLeHO'JGc%)m[qX#'/Q#2E_5:`?1H>EI#<<=XBJ00s&\_P;QJt&3!2c0G)Fl^d0>Z4)t>p)?<;lVCP*o'DL.,5Nr<\Pa.kV2`RVI?f+%i!aE6b%VBc:l1N.FWOI>gTJ4.-qPqY+Hc/&lSfrQQoAF'M#PZl[ibHg6$<<6f^gF=RJfVQVn]j6DW8QaMtQO@(8H8pP6d5#O+GJ$WGl"[[[%L#P]mAkZ@+&X%DtPAg,Kp$&5t1C+0*T!ino"qbu2p\E=/\WCeUrt6,^EmTMuPkOn9F$#df;*d-&77L@!X;sTb%/\R%92.LMWLiP?%g8Lgl2V<X:meNTY85b)hOX7rCCK,K0MM5g[-FU]Ti#5jDfHMtPq%]8Sh1]FhMA3I,O/UF.(u:;k'r$tuOgE*<k=4jMDP[eRi-pt'%Pd4923hH+Q2]4I.4\AB&U9psgF,TgT9t3n0!@8P(\5O+lAiu>pCkBA"XHIFqX9X[eKY(eNdR.'CUp%qo(o!NH;5iJli1f5PXtHTO%M?JYHQ`4J3OAPTcJZ7u^TCRi7`+)*her6mjN'5m[i)[4cTLsQc>PH-3]O9LT'@S:7Z>B6Eb3*qBh-2H+ggI+.;^>VP7.T3S#j6$]%P^P:$::0uN/ue`rDQiM%Z`V)_._>7lU8*XWZW5FJr>(Ui7/rSP2@?rCf$\B<=\GftC/(NB"5dk<o#RreX?,X4FdO)OZN9a1"??.M%8!egFZac3)[ahT09Qh/h"D"5'M@/HtBdK%'2,A'Z#%GZIGI@C@aD1?qh/6]1$2Z&pe)IS(JinPYikrrXY+Ao^]QjDOl=YlNJ9j:b%*]C8A`R72'p;;rM8$Ws(3h5iTK7,jOM0g2EUH\ZQ(HQj<BID^9E4A3NeX\n$-OUglM$r$0di0:H@NHr&=Asrc(5D/lH/#(-9j'Bt%(]7/^A]W"F74^Pu\(]9K-qd-^?mW(7"C//oNhgkuXHEe$/@sA1DXC&p15Mkqq`<*Wk^ij46G^VV_FPFJ9%fh0K)`O'U4ei5CddJ-%e\3.1@4[3s"PF!r9:&NFJ>LhU[j-VNDiqN(mEl!o`Ts*3NDA`ZAHDmnK68Vi:bW!'5*FG3oVafAdiM#5K"MAdYo@_c0Q4iA3?S>3%0H4/H75h\+P6G\eDl0jQp%]!]YP^_Q)9?2Sak"GSn:-1GpH:,8dJuj1i-MX75Hop!,`1H</I4_+@3l%_jaF+2IEi:'USqVecOgN%%FWnUeC=])F7'3HP<2BC@r'9-%;?FUrXr"0/J=cl;"=(o_KR[!hq=6O6QuF`fF>eWBQI[p@d;i55[0uEmPpfuO'Si!c^5$$,CT-P4%CtW@L2:='DM,hV)NeesqA`u,2`pZ16\#dIPZUn9ZRWPK9;"u#j#FM)"\e/#d]`P('_,_(4UG=8SJ:N8B.P[9+o]7d#`0N5$)/@,e%7AX",5AFRq#TYO)qar:W^.ncB='?=0g+D1%'"M+.1ng@mK.g>'=Uk#X\`eX`Tj(CFI_.QG$=)./fRq&EduZ]s.sK(sMMN.W_"TaT%#l02a*G"PmRK4G$#rrb(p>u8:neg$a6e9>M,#S_OJqPFbegO/+Tj]r]kLP\U[lcW<&g[al0"B#Y4'4t'%=5m5Nm=;*QgnQ'47`V`%:e01L&3M-$lA(&;%i1tb#UUJ.(<@_h"cc`B'Npk:Io3hbjM\IBSO#P"XMC(u1h/fc@hG+`FpjaIfV0k68lCir#>l*X,36o5(ATF`%/0jd;UH?P!BELcTH^<%3VtqS\*@$:bGQDUG+NWrKTX&]lq?"ua!*`D[>B--:f,1-=R&^:J&0<YG$Wa+091X0oCZ227P':8P&3P:I%r,^"q"G%h5=^rH#P.cMtnI&+0'imc^.Ot%G@&TnS9!'<UHYLhooF#&MYooDBDO3mF<BVp+6V#U(HIV'X*m8FUA_CAa/]6q,9VKo^%mqp2J*#)X5KE!,oAT0QY^S$#9k1qPO'/gjkc6,1j%?Y(3^7)!L%8aB0L/&kS6?V0n8@!"UpmJoff1?-Bf9%>9qn4[rCh3GJ;[@.%%G5Q7I!:/Z^)T"I5KF'17AOS(Tn2(]3XSIIM-R5*)$T:K>g]0&%oR1?GMs>9a497SueL&bHWG%(;:nR@+2UF=HCDM?rW1>F[CraCH%dOd)OS39UMX>4mH\&#4B5.&%'-,d00ph^=PFR-e0UWcHA@"pMfmgSb;;:/h'5Yd,qJ>TG8ed->O/=,+U@4fag#]CBiGY(I5[3NDu%E5Q0G>>R&=JeJucmWDb1gI=)Lb&<d\M=<hU-CC_%<jPF,gu2Y>$VY"I..ADKdFB$IiLrXKGV9*3H7VWhQ7VY4b7-=LnMJckNX(J7%aAfqd_.]K$bDr6>#^SksNf=aFq@uks<+ur?7Vs=H6cI/6hb;6bm#\J?PPBih'pph",T.@]Jf'/(Prn`KLro])f<<8IapOjPP*+9f%:nfFc>o9Dak#*.15]V!Tdrc.r-_rMK\S(:3=AVLT=3nE4%Ju$?K*2CeW%"42OL2YB"$m+T*mk8W/G9P.JMu-^WbojW8lI+@&_"(<%5N!uKZ./p#$Bb9ZNE#af),YS9@S:6:>X(/)7_aR]0N;_`VU:i`ZorL3el[UIJ8<'@l,NN%-6Hrk*&L'K)c28c&q(7JBNfYQTo:&;%gaR=JV(C@A&Ym/nWW[_ZI:+]U;df8QQtc#reV-m48ErS"k9rs1)W,,&+I`i2jT/;&6ADMg&%3`ooFNJ..&=[Tod^N)U/lAL2.Q+>%bRp+=Pp'>Wo.*+J3-mJ.2/WZLI1)c/Jq)I4.Qnct.c#eG%J:0BCd^7\DulUb[u<XbkTg1G_YGC_51Bt<WlXPD1d_(3NJguY6hi+o%8f<,3l@n=g$jrD0&Gr4`D8tGsE,29,*.]qT8D$YB79#5>cfj@']6WTC>?-GTTaIY9TdUXG1L=m11.*Be[R1pn6*VoL:KOHAaSD%D%?%nJ=IDb5D1t:&he"%(iGp0:J;7s^]^>RUV[0931$-IkY4G:HN8mTrU6IMaK-5pdks+0UC*FQFo3%:D*;:@+[HeWboG(Z%[6'=oU%OJdtZh0"2I!?&IYDm%*\q51<3&8rqSKVKT?"d?e-!/KsP]"%eS%X&L&Ato[1T$XQnJD+sf_[)Ds=YSN`h:u_`+ZUfl2&k))6U3g3%OtO-%UeQQp=G$T?bfZlRN_iG10NFfW2p9^8!uDD6D(IR+1:65;YsL>0KZ$hCZ0/&7#;Rg:ERg:(B%"KuelsbnNDeW`PUfkUU2^2k%jb14?:++DQK7a^TfZZ*.j^^k4;!]1\"UTI4P(rPC!o#+tgK.*0iAA)(%1#<:J^Il;6Z0](6Pj-P[[sM._#(.?:Z:aTFj7](@EHX4%b@5dQ`]LC@Ab7:K(I9onN3j%:#cb9ZO3s(/WMq0KcB;\2qd'i94L*:=K"OTu'UG:m15*K_OOZi,XV$.1W16jT%Sofrpnrg<Y`,Yo%EaCWa+MH92$oI$eWS791)KJs*WkER.\<ujBRj7;9-?a:s!f^".Qu%&Uj5<m3?uMHVSA$rD6.gkEE>dR;rJiXETf^s'<>c>63+r`"%pg_g66c;^@C7udUf<bmp84*lZ7pCJINC89gdZL;;hAH#aYglLZdDhV*!?Ou,E`fDCH!q_@Su^?2^5B)^p)FO=7QD*c(,@4-:okKB%AiMk06,Y`F]Hki<<%\nCi%eDRQ0k!,YGfkL0bc%\2!>Qo)+;G0hD1!3T?,bL#)oM]USS%\V4)g5`KJ_77u):;+rd^P&WE/QJShY4%'fJ`/#TF$G7T`VYE=;SoLs'%&;%V,VbdpB7Kl(O5Q!GRk"GT<&BsmbgK3\/DZNUqZW$R&^V5mQ9QkI0,[\</a6Ict'hh9]5ff__S%<(o)?8(@JlOO=/!$u%+O%$Cs4WH+'IN;X9E:h_T62dC+1S6+8M.PW1[1/G,ONV=ZZS]`;VXua7XZqcGUDj`TU[U;Nq$hYcRjcqJ)%*:-4qKc=`PDpUs$Oc\UtL7ij[1rlgM7:k,.c4eF#"+aq<l73IbV4l%@JU.P;N$e;:J(CY>Fmr3mCQ2IkQj?UpE<6[W9H;S["0E'>%SB0heB^5J.>$TYQn80;b'(Rk">DjDBOel,P1r:tu2UIk"G/C+Gi3P;MJeh0I#RUK0N(gjFpGJu,-IXRiUR$KB/0iLa:"8PB"t?B$%>WJ`T0X@qAJkoulKVQD:))VpgF\C!-Q"ea<.]fe]:'NIGg>n45.!j9V6]=JNZgk`p(RRl+F(>&N0Vtl-T,lB@2<h?Y];\JAdV7Q3%8COB`$l.GS>FS@l/a?qiRgs.C#muUDFB'bHmqfQBQ(Z-2dg;(6XLh2.N>HMm3b_Ml<A:JV"f_`DehrPYBnC6S2>G"/E4ZVMW'N48%mCJU_(2WA!Bd6)LR!,$B&Qc"CnOGm`cDj5>6&ch+87ASW:91N4GS&<KWbYH'7\!LbCNQD_<JNt2G8IibO#ECaRG)e>%b3J^3]olt%C1l*T;u#1MC[a&2@@D=(ToeijX:n_%0i#=j31<=-4J[o^m>SWRBcV1sFUc'U(8k/fgrO".F/uHPhkrT=3[)UG6_%0t!l*),[T6ZS%eGS.&X1ZT&>'3S->H85Wg6&[FFWe;d_R/Ut?3Jg(WY=qTZ<D.q$,PdK,BKogK%W0,bc1aR"CO])KbL&Z?]DW(6TM<hZORD8WF`L&%.ZD$+VcAMJLZ+;f<JLu9SZc1=d]KGOH0lfm&BHr6%T1*K)Kh.MXb:E<6!T_@1tAP*$g2Fd*E"eK,c=@l*`Ld]FI6A^]u-WJ_NpG1%UdM"F2=&ad3b1'hn-_&:._'L*=/UGeq9r[ifDPRF]2r@Sr8qXIq3OWGk^:8#iA65aTY!\M*B]pm@DD7Ge_KlojR93TN@4-8["79I%i8d$GSNK7G[\3g"(F[JY<E$27%mXL["(eh&)gq6uq[f_OF$s^"J8HNagQuL#MZ^DITP^b^o\K4NOQ#Un%bNZPag:5!hsCV0:ASqF%[Lr<2g-X]aL=o?Lm!rptiB@&E42;e`KXSVh_;<I5oSO1Jk9']rje(_L.H+opjm#>7s,TAd^-..MS$*>aZF`eP8oi6sZK2uZii9T&%AgsiI@0-Qq#B5%l35>Ij;P28GDe*Ad8+t+.:)lg*C9<f,H#eP,$==O6,P(.m5X!MrQ'MJ&K&Y$_7U\"HG^.$UbG@Cb[Ym`adVBKS%S[@#"WPM1C8-fmn^[5#\%.kM)Fj>@n;?pe82_tdk.%^phHL-uE7#it23=:q,2B`J?1BP0XOJXYO'lPIj(4)o#FsG^`MGP+>'g/'n%6@=Xl0(Z.YB%oKQ77eL,>D2GAb`5L3SeIgeh]tAm;+OQH2M?1(d!f\s\kg*#/>>jGqPl4j'W@%B%FL`j+(L!nY)ceS('u\#!>ZWV%L0AGnp2.RK-0VIBCR^-KG.B3qQZB6FX)W'IfnHlJe+onY1X_A$)Ah+&0]o9KYF>ldJ.erNW:9`sBBhKSTEY]^##QcR4(q!HIZ.@^%#2MeT09`et)I'b_X=`th*5#uiGPr`Yi=!QlP+/k=k^mSi1'VS'2^cFT)i083-QKR>aBS;8c:6qokd=ANdo7(_U"'?O[r0!&H8lsp%It05kTqifI0aLttZ4]1-DP%T:jRuGOB%mPP#sg=\$$.]M*D+QDoD.9pa*mr2iGkLic$A+-Ih*Upq;6bDD&6pDBAk%#gA)qDa?";W%(inGQ\;Q:;\)WsMs'>E^kD+OKN2qI'g!tTM]DSMZL8ZI]?/r+d6'e&OnibJ5?$577'1qII$6/L+*Ot;fL([el\-1K4Q(#`H&'3!(%Q@EPj]-tQnK/n-[ou[skq#f%/U+6A?!8!C@9oMGeBr'NR-j8]e#+ps/LBB*11t_Us\"2/<[`=XmP)0@qQ3_QR67:iMle8g6mt7^j%_IS9P-KRa-oatVJN1i%'?j2^A_t>:p[":YN$oP7GC[)im0bL.'+ce.jei>h%>d?sr$nZbR';U%*%/&Am@R[5O=_(RR\lfg+UB+S'%^d>5_0p@<"49=GT=#REbA1T-4i$o:2mY^t;BJY3YY[2\m3'<:fR%2'S2$')kNa)aJ!VsFi`kidfN*>?8iST1/JPSWINo)KQ()n'a%WL"Z[+fr9_KmtRG09M>kHV![A8l*MS?_$-^`@ZrUj?UWG9gPjUAH=^cbJ#h/*/\2=@/+f7ql#XIWEj1>!'ju"3V_XQ8iPI.OO)=q%c#d)[]HV#NfqsoOBb0'jhT.b.I72e1e\Qc2Hh'^;ZRU'g)j=8lkmB?!+ZYlY<:ii<S&/GU8#D<\Mb#)[dGDE'%1;0="4OQ"ra]K0%FSRRJJ/X\RHIP<K,g0T4gnBCTU?'o.o/$-VL!o8VYQMA>b/i7M"%t"VfB55W*@)oWKp/rJ.(kV)?70\VJebp9mHesOX]#?b*e%aX%8]hciVg#6k`(;M.W>dO8k)u"mNPklEH_=1J6B$t\4a:BBnuc&V:`?OpNPL+*RYk4l^+K&5C>IWN=5[s!.sNl(g$<ffB/jkk5jumM%Wep:]k@W+`F9?Rd0/3n;2%+C7b`)6Z*qiuE.bfB@?6cf.p*28a,=d/lqmP2?[d/&>DF^o3YG9qG]$BU]#DS`M+8_5CKlX+jL8"h,%$7.7S(+;2s_U37OE2lq`kRCYT9f>b]G%tpCrUUKnB`(k9_>CYH+XepYHX237&Zjp8B\-SBBq6H`&L0%5JI,KAc61r]9IG$QKW/&i%+V/GD(aV"mGY(i99RUBiQ.eq-]+`<hY1[Qo,pn7Y,`U\W%"@L9233ifWgUMp0]'^53Ms_lBmRI:0\R."!HehR=A48oA)Q-G]"3[u%T]TGl-8l7j6^l<tADiL+`X8Tk;fnLZ\S5_k&#;_knZ[YS_-#NrdtY2[2.#YSi';Ii0S<le(87E6d_=<J\/i?h\f'i#F??NZ$lIgY%/5RalF>YfIV\phk%3%"o%cLO$(6JWN4YSQhpitGD(M9<,HA.J*,]U42JHHoO)W0AYXiTR#NGR)0#.P\i#.ti@lubCn1E<L;dF9LS%6^l9`8t@Fh/!u2j<Nut(2\7f*"_sq'j'`HfdPt7_9s:"Y26QWt0]44HO\XU;2/*!-Y1F,%4+\JtNcsf41TrSS3-&tc6VYaY1u#R?%oKZm=J=ih$.Yh]]=ED1M^r$$.a28sgYMH=bG+(9-G5ls,q!GpDgg*Q`pZI_]=4ls".sNks[Em*^cDL&TC"'ra9QbBg1blcP/uBN5%2!`HZkX90Fq5_LV>rP'a<2RH'1URKjH**JM0map1?E.1:"HVtQ1>3NfKmG0Np*JD0oGe$cYuK2oLPTU_JYm]3LXd4]7j.M>,VP0)%\^#0pjD5;*eQ>ZbrPk:YToi;b8M?OPrj2d.h773qPm=U="JUZdGh($t-Zb(p?&8dR(,K<[&;.UrD6(4-?b-FQ*NY+^;tsd9.!F('%)/>Wn&C%'J>DhH1J69nGmEkM`.)iB];^#tN6PAW"#ZM29dJc7sc5*qPLuali->X,g4"W9tWD9n#-5X%jU7(XiX#XAc%Wfal-0Y\S%Tt3kXN141*aKRgrcDIJFJr<d.!2aFHVgfXUhp`#7@ld*N!@'+*kmjlPot-[V83msEd3[^%_WaZ%>IVIXmo3TKdT-PAb`"ctD3T[\%/ZF%$EMt5f*?b%R9,j8<McVU?;,^1skkF/ec(c0eQ;L`5N%hmr=XZs@WbfX:U!M5*1Xsr9JM*U]Wl2/Z$c]9$TSM(01\$u%j8_"C%o4Ug&Lo[b^VA55#UB8#$.ke'?<#NOWGVgj&WuhdV\R+t^\1^C$Rd?`gW>>/;9rE1:B3X#odnt(Sb*K2tqG+AT/G#qnbp7?m!K7cs%,@fGX[9;5c*#XjXSWfsIbfE.-!*faJWS&%WqE&-5FtF>iL4A#]KC5sG9/S.0C\GHoNR\eG!At7`[2Jbd>SMe%W>Qi9BPh7&04!eA%hAV>[8,<_)]dUR6EH,]!>BmN;SaA-Tc0`qnl(QXU#K"bY0rIVS4T;2tYn,9;."l.<c4R\c#nmdP%q8!AFJ#Q(cl"$"Fd.9Im4]cY%A(Rtilei/?Ra?H;N/WA-)7X6ZIUVeZ/8B`%QV3(P'k;mNp']JA.,9o5A&]sV0lkg!A<H;eS@i3BIZ*T_`$h#TlSA2D/diduebZ$i%)23<3U8gC225UKn=j3+/cobO$Hau+a9[=oQBuh["e6P[#a,U4LdF9/14V/%6&c%'Ap-=DeaE8nQIpb^&VU'53oLPoM.l8CS5Ri&S%RLXIsm\6bZKGMXOA;C=9,Z\T"FrnZm[[F!q#?RoH*]03-9G4-`Z>FSIfF(XV3Sk\,(.iuGYV.Qg+Gri==O.3b3?gP$]P8QNEf>cs%p^sG=#uFERlGJcL/0KpMD5HABX8+HSL:VquH2ZN<<p2B?P77Ub4V/qH'%22G-D]11?+amFNGV1@IAbTMb]$jn+Y:QDep%_S:Z%O^%X;[=Y/J/lc8tuL$`"rKkb"c0aS>jgc9Hi<D@fY@:fYcINI6*8HFDIqeo#L'FU"PEq0`q6>UTZi,OMX7S'*\9a_pW\r@+<Wfg?-`j%XCQ2G,;&$gR$<shDMs4ro6s1&@@5e%,4O[,L<sdGP&3?9]@JRVV1m9/gCh`_F,tu0`aF,&@iOcIXRfV3o-83(Wl:7WQ-m5\f_hM4%>:(Icmn;\5UM<=%;/^-F'KW\^?nWb7CYKgTYahJ*?)S$g/7IQnK-4hC'BtedE3;()"-:6mK49G>Jp2E&8u;6?i6^h(4*N^`KA^ih%E/Uklh`NrZ4?*44Q!Mj:&3.PK!HuiMA<doudGjqZp"Ga=Vm9LJP6@u?F9JVPYJ;ijm@n]+/<,To:E^e(Me;tG[]D[@<AP^Zp[b4C%QF(T5KM-*>]-5eUA78oV`\i2]E+pf<ANDW?3lB`bgP*b2$?iN]l,+j[EQmNR>IW82XdLg[@FBO4DH/bQ_<>I,h8UJj8.N0bD,]2(%gt*VbR6[Ld)OC`MQ')?CL1NGn3)5lpqd-SY"L-[9@%e6a:$>R1Q^gF?LJTn4T'Q@'/Mcq^!*h'O;q>5+6u"Hna?4BPm!9k6CSodj%oO8Q5)]XeDW`\pV"+?Od/S!m<@S?KtggsMg!hUmjK,Z:Fe4*kN*'N@6Q74eiD7%qrh\_Gg4-G0fi38o:.KP2<oLMJT*mK@r#hEGE%9gp:\OCU?.s/!uBZt<Sp-l6:4iR/iN1UoV.K,(Zm'6Eh<dW(*ZcC9qjA>L(%(1EY",s+76.Tal!><HX*:Pm^lT4.i?Ec;$(bNp@*%2L1BqlTgq7VAQ]^9H9hm(%n#XBGg/,3sJ%u?^S)gKaZQ;fn20$;\L/GKf]BP9pUWt:!,DZ&(KgM6-8fEJfCZS)N8dm%$gZ+$jb+D%^fBL.,W;=.V:HOVSk:@=]4R1E4`%RW)=%q!=`U!d`G9(cJVai'(G"t_1JJ`q<cH8u1nMR5Jk7n<d4XoJYkUe7>+Iu;J4f3(:C_W&%DCj$k],ot)TH,?&?!0fl#56DpoNGONkL(_^&r'kC_9I-Wa$S[Nck:)aq7&6`MMb9-84</0M0t6k4X6^E'jD"]5%(-qnj%jm^NAl^%P4`%AK+D@u,UjpG36t6hLBm79kWi;"7A/@"3V0\rdS(<r4J&nM06\T;^Ia;Vr7bf(TX&-I>;CQ>!uJ)O^.j\L"^K32@8\`U$,[Ea%<9ALEK%:4\G?%?l=;s>1WtS^R>0auALRQIc%-HJN]63$MIoAtm[d>+Pf^sJR>Y>(5Oc@#`QPc%,e&2Flm9qgjlnGREQ6'cJ'-)#=%8Yo->UCto:fka!!]53!g1bEK"BEdF&4)[d,%K$GS47HdZ5)7?\<N8=Kl0TiSg4T2<!ZakYNN('(BV[,anAo\Be>D7%D=-u&e2fJ?%^`u8a+6V[G:#8%D1(VF%<Yk)qPRQ(qW%Ka1L:d;mXf5ltoY+==#<ajCg>H#+E1j*BW85.$M0u1d*#QooH8\rr##7*TrJ(G/49K-M%2R'*QJ3S6188fE`!`8U:_(&6PHf*4>GYV6*<R8n?F+>)%'Y'=L#!<`B1#Sk:aYD,=iQK^u,n!3OSuSIEU+/6,*fa5`2r\k;XAM_T%2nPi[oUoqdHI.F('E_39kXN)W3#b@j>i_p*-X-Wh%_XfIg;E'(cuLUgYm\6\ccmR<U`rWKU;:!^CRL-ICNieGjDdADbX6KZ=co2a%Ne8ebbd#a^_Q%%Ge(KgK?o7tUqU4SZ_;KqAOl1@:O5Tio<dZUm#sF4=nUS\iW>8=&9<fTEEb:Ip<]ktuLLUh,B^s"_LtOL61p,s&%$oimlfbE]dG!^4"=?&g>j>i`lbqGN`CE#Y`I7N9rr$Z.fGDh%2XO`P/l!2)qed1(f11h"(FHo^n2qe11j:3t#UBc;"8Dq@(gS8Jm%Z;N#6A1)_-M1t)"@cl`kSiRmWl7AL*,)`=AWZ7ZF8@d/&i0*,l.2csm,c^iZ91Zfob.c&67Ggi]Y:3Vrg1E.Ll3u6R;MJ4+k8K=?%X)%+M4:8UWdZ?=;_[.jFc1JK(OP8Lkh!?`+7m63D67\6geM4`ZLpX:iD[j<:cNq@s3Eo$2B+;bB-R&A-Y@kYAS9-Fp3#K42SP5i(%`s]i"gP't+H=dp0^Q4<Y&ZC6q"aV_qG3AMU=O:Y%9gYibP2+=K/E)6Hj!Gl?@:cp=TG]\LEl0[uo;fdjOo;M;$)Z3VF2:76KsN']%CLhE+O#&!'i\V?B0c?iY[85nY!iN>g_eE=+\&lTt\P<E)cp?GGK.kcN\.5oGpF0fR24^\G@`I=W*Npo-nWY0BA^O*rac2BK2ah(7%[YoP&nO1Y$_9-os;+KP,X+#6qDOt20@7T6NqkTs7IL$G#B(=rG**m61C-1f]<9#9;RG%T@8)2i'6o0')78.+P=_p8kX><cV\/X?>%0'\$1R7uPdr9*KK2JN%^rR1-!=n>Kd:Q-:&aRBiMNZkMCZ%<8j@/0qo96n&5=+N'E3%,%lpENWmUopDh`a_!Gqusd^k:OK(TNdeI%ME%Fbi4=&gWs_F=Bd-i8kKEDjW?XdBZS\!/f<(X2,#C-MNiOs5*U-Afk<<+$PI!5tVSrB),VZ>Wj8G:6b[o`^ZKIG@j!/3h@F(M4%&n7cn0qlRn$XcJW_9YkO3Q69lkBth(fJ6%$B>?&UA&RVB)(_WSm,VPHNScnU$S/t>Oo,f3nt,jhD7fb@n'C_*R%<gh8GqFN_E0rN%ajZ;^+J8\9]e1c6E465@2QCm]4L[=bTsM6qTC8FAlf4d)fcId##^GaSAHRrA/M5^?dE(Xm03QKIo*d,sdNJ4Tc#iQ)c:/3=ahStq%`:]n$('JC+aP9)k\Q0d^"D9kIHfEQqA`qVAi#WMR:P5fB>*>qSM-QhGnC%WkO@E&BoK_B&iJB[okB:onJ%.V#f9V<oOnh`E%BS+"%%'M8Um=@Yu*s\>3L's6(?$qhsA$%j>5[7\n*ctG`l^<J=K.0Z_@JCAQS#p$l!*G2mWE-(Jp;+0]0r_=16!\DW4P]l(3qMm\%2L3f%$p-qe\6=e%B<e>AqCtbTrEFj\/1-EiXVdE5Y;VjlT9q%NAqkQF((#TgALA-'7q5?rordeg&#P%!=:5QiY-FEM=gsbeW>>18"39.3%G;-r6$'&/2_<Id&MgGIrU$@r[$@8&8N3GeQieIZF^3Mhm:;mh5R*E`MJ7IDPYml6cJ/jh8%BjTSdhTW%0ALur\[jbsEpP(+2l"nI%.3ugPdCqMkg`19(oRq]u[H9"2@5$pN0qeZ&hc%tL2TLSKn!`I9\8edVD.0KHFO4W3gIg:gB]aAW/D1eYr:h^g#D^DRb1mO6K9lsO%f_4i/DqibY;6m"&$ZuCDiSlm]fo#VmYBt6MOhRstZ=AZ)EMhZn<6!)m>>.d@Wh/mp+eWlli+I9t(Z0J!++GuR7kZ[=j!3U$/PKZ!%l@8O>l]+g@p7eqn?r7hES^%@o+#(msH3\i3!@!<)MfrMAdl[=1GgjWXg_]3+3:r-!`SsB@AOXL1Sn]>&5WVH:^318E`j(%+/;_:X%8jQ%ncN*2A5>MLX>VRq$iYd>[0#J!)a3rp\UVd=.JSPL]8T&&p_c++$Wd[&4Qp$km^5r3^l<Y;QX"E.tQdlT>@Oug2=IDrr1:c8T%P>#02;HGN1\Y#",OHTnPC]pN^fDSCV(d3&#[V>%!H4D]T1/sf^$r)pd?qLq#@tf'sI<BG;=#MoH"DC4\VV_(,NjsdUE!M9:f@?!r%=k!^WVrA_A/soqI_?&lZ=u&K6#(6Pr[^T=M]TGk@&au=UZ?TuQF8Cf677Z.Ci^d6\(:YN<qG8jiZB?)lM"$P)W0)Q>RRO@`0(l0,%CnYWuDUPN%75^-"0`[0^-<KU*9H"%cHbN1`N+-.gnV`mqI)m:.2-90Q'fQ22J_QWLh9AVn-XUS-k!SghX]J6>p5kPP*oV&BK=&%5%n@/'*]k;ReF8["[6bqWFQJS384F>l4iSrdC'[*G@:g'N`DA$9IUEtF=6iI3S^cq;h8MHTfOCENsg4n-R?#%bDAt/;,&:uL.f<*c+%7rG\MW")MiGd)bDV5U6kSPOK[2I1#LWJOKP*`6;1,;cTHU%RG.$uC-T=Oo>9mX,V\4FD7e/hZOF@8_Bn+aY99a576l(:HVCXg:YX%_UN&Y7V9i8c+lm1P#s\leC1=o'596DWN.7='!V3rM`[kP1,Brof4W=%lBMAcip"\o?m2:uG-P/f4Md(drbftrQq9;`Yu<2g_KuD`%b?si`98jpCFQLS99+r_rP6!O`hLdO00!Me#c@JHN,Z2K:YO-C_XU@N3\,ir(^p%^mS2_0o.Nobd<InU^9fS,ITe$?GMTohe\V#jC%`8CpPTiu%SC:F^Ka4K(>]F^L&Z=A32jU!(f`'R^cL!;7\lr0FMbjcm6#A$4aV!%Co[X&9udU`%k,[.'[LH:UZh.URsUM!pL$gh`[%FSF0u2+X;uaj"Z1b?E;K%<oIW%.%Y,5EtL:DZA+*KASDIMk+2p`^bbGk-;#/PFhsrk<e]?M`B_#Pq?;5X2Xif^#Xbm(//n(nePS\%jXsp8,e>(&.4FW`r:8X7$Sq]C!X*__8Hpr%BNoGn`:"nt137C"4QMp"+2*75B_m;J`8n=4_T^"%?Oj6^cU<sP4F7WWL07(*'("]F%Y4pR/#PajVankq&G+:k/F2c8-FFUs_[!;DCR$&8tYVS@#9[HIXIQoQR]^cBE4aV!ECF56jL@dVGD4?Km:.F!tb%Qtpg03(rDtrd3%lJDpG/l"P?/q@$Jb`]^S$iBDmG$%<'OfYX:QcZI4(3%:$Sj'T03%:o-JPmQ5&(1=;@OIR#p]$YYk$!3>c5+ZT0kr6mR\a0Y4AD.#%5TYBmbDMs_,NO*Z-ionYfFf1_=0u36TUO!uE%5#-(5g(7.R7NlK`eBil&a'1+>,-mn`25FZ8Sk,Ho[6nLgVp$KN&NG-ta3=3dc%t%(X_gd<*huiL%Vu%'gBGlc^:fsKj,0$EeN5a[<Si4PQj2Rp^m\iA'2k][H1rZ*5C[V3E8VUqUC^D\Zn&"R?)S>E0R]Q5VGg0kN4n2%K+aUi45;S@4AuHWM1E$h\f7]Rq+3H=4SAT6-/hBn@!.b-,WVT;aQ(ib:8m!uS:Q@LlnuRPP?8JZH#i;";P[+ErfD3<:ppX;BpThA%#*dcZ\gSg"@9BXV9b/VGR9q"1_-Zi0cJ0\@7+C4!*@GM`?=&<8]/-djNU\IEc^iBAdb,nE]4%_5g8&T"B6]snoZl%GibEmXAV1.R%'KhPFq8ajc&]#5F?PuEqMe=V&a`k?W8#'ng'>Hp=J+LV>e:+W/DdfV;QBR4J=nLHb<q,]$(b*B2;T,0q3r'&+e&e&Ylidai6*Z,`%0J3"#9\Xpd@F_2X$F?5^E&VrY)d;l[UoCDU$lslp+&*A`3\/$8n!YTU:/(h,Yq5t1ibb_2.?-IE8RV:/B3\V56Q)e)+Lb^i4Q8@>%>VTXJi6(%S#peU+l3C-b)J-JtB;M3B;soqHYg44<p%Wh-B%d#/H-!+Fnc[#aGVi>`f_O_brF$$a<ktBZkkTDa4%*BR\<L^7A6+(D%ENLsj4I-8O5VjPjDeNSbaFs3H^<Aqce]si%2R"Qla0j&jiC,pkYVAFC_s:>R`5*Fo#r&m!"S1K*@`o+_i+tbQ<a8H96l0?F"f_!t%,+b&>65Q\,V#joX_g3LddM+e]-!SK="g<ceHEFEOVRZ@.r[-M\VNtbVYcf'@cQp<'L'<V?B"J/cJ2%rgk)s#9DKj"B2obO,c%'-D%+pUn&#8#KA4Sj6`!C_N5'A&/F]!^(8WD5C$QrS2-/ouqI]uRIXgZc81IW]Wl5@34.Y@g_<(qjO6qT[i=70X-=?&oLudVlBp_Of/N%b$N.TeG;#XH+C-ZBqc.')',Z?&\))D-9i<I7@eOiWH-pPS$`6KK&&l)"+%7#3iKbga':D[=UT"C,1u*ZJs>%MfUCX>QFQ)0AW,/K%W-StN2R'%SiM\4X.KFPZ$rXdU<.T?)[!,nN#)1N$Ifd\r60uWUX&c+]>BcZgD2TdH@U<nPE`cF86Fk;/UKCQf!WIdi,mW>?Q,g2%%2&<[L**A_JZb<7qdAZY3n&jj#26V6F<qp$:QmW*<<s6o1$;&-5:uUc>o4UacKbThgchq[PQs/lh>m$NYZL@qGUU/JsGkI60X>Sq1%q1=>I?(]TNQR&Y]CgGBBPrdaRHM!9\6jXM7_:+Es@ET-^is9TU?3JGh-<C_JNmN<oM^Wh(o<jB(+pD@]hLV7hB$t[5^,2Di^*`3U%j<[AoYpB4$Xu!G=Y\Rm2$NsJLijugs$c%#f#']U^pra0Dg7^umLeu?&UNmUWK`ls`LC4(j@1DPd/QfSlm`<6Xn9h^rZ`NS35?X>n%bKK#C/;knD,2!gILfnpX8+Tq<D3Cig35F0NntbhY=_5ZH5WbaH!";Dm%A0qk&C;m[Ms#3Zq3"!;o[1+HD=b2nIRJ_'4>LGY*416c%Vk;;*E]^8"5X4K8K:io3k[B^KojW[K=k7V,Q.I]=-0Qpbcd\_SJu?a=:JG#)&JqBKA'M"(=sR\l#&hY'XC=9eTsQ`PN*_>&hf"-;%bmJ6n&86?+H<lQUi+riE0/)_(k*C\&8NUc@@%K/SSMgihX-5DD\jL6HkUa5"6da_l*eR$j5oi]_dS*lo-0ho[U#oP(K+*+rCBLV.%:iOb.X$-8mTX6%ij7'/U]2\@IYV,Sm\GTg)<L[,7")XB-hUsAb+UJf"U+="O^nmsLQWa.d`"[W/cEAaT_C+LFPdO6tJ4sY0(\0>j%NlSRT/b/U8[CbK/38EoKip%WAYO1B3-$Mdhn3U$DZ.@Tr77&H6qD-5jlJ\I?#26,=:0"a-o&kj]CXCZ;[DVISU+reP]p:\k33e6d%OQIXTkp*+L[;jAM_51\>BP>gp1T<)>nDFS?Q`et3c>('$/KVW`:)>70\cECQ&HP1V?=`9,F96o.?n7_sm2gHRdO#!4F7VF-mT,B2%>W$5[1XgtY_c,0ggbaPlq/OrK'mmU+OLE#F=P<$J0C\O/6K88:Feh9^-ehq\8g]0>,^p2m3Wg0OX+nM,ZT=[!"XHp*O:rHYd#Q3M%fZIBk@<D5u0#:0M_3g)qDj_uH!c#2*E.lb]BT=)->0SjtFW[pZ4KJ.Rf1Qm#EU'")X49,)<^I751@'X2N2p-UTo?&4Or['Z=PTZ[%d#8Lb29Lj/Jlmq%#!9,c2n)g<3jg<YPZc!9C58@,66V+(mGO7rMq2@uh,Gf1(Q!afM@'L`\\QGNB<P?,Wan?f"!)1nOOW8:SckII%mWEmJ4SV&+d*,E["GS\`+QR.d%+OrhBr3s-oetV4hE;@#+B?bR)?`9(=H/5k1)JIh]%utuQHS9COjZAVTiRY84hYP%<9$M;kCGbJ%Ec%D3(g\:2cNkpk-M\As`TeOYgGH+T0ImOM:>BankZT%_ci(nPTOB^X0()*1dl^ns:bTDPYh#O%g$FsJ.EoTf=($__b"iI`XX=,G%DmaG_=(]6K)2u^LG;9r9d81fkRI2_Ep?C86mSq19Z6VloS\qdk>'47*QGTc&=0HpmdB^ssi4*--F#U,f&m;T=&:iuhHZ"60nSf*<%g;$`S852W*";<d9"_KEi*G9(H9.9@[r>]D02:MbDS<RlK_bQN[na_PtYH>IT;`VhdWhXlo3jU:dX+M7a=IOqF[5PDn9`r7lP`s,3%Mq6YJ&F#cCV5:9UcEiug5b^efoj)I\U1&h@.J0u2A7n'V`Cm&sKW#XuL=Z99c=0KPeIrgL(IGI/;`/pZ*BfL5<k?!84>p+?m1N4^%^eY8HMCHce4m%V%;3YHG;'rKck2I9W@9(7uetVcR[&mtaa<TGoe.)@i*LIuXVIIQn0`AcjG+5leTsg[<]":'[PAT9\oD?&;FNjDp%obWO+Q1!gM#d1Q7i,l5?SMj`f7pE%-X'(b=4Y_j2#OKFU7j<VrctUp`q\C>T9KN4j$dNCsqoM;M+/B*W:)A/a3N_/903Wu\lA7f9%E-/L#5]3P[8^%-s,E?0:GWgpq3WQ*=pk]D2/k#Ub,L()LUil8;!9j)-O?-LL*C<q1bIl0eRG.9BW(%AgQ*U*51#:>>OAOf4Nfe<R%Xak&C](&ZpU;3of"#k&1#pX3m(mpRuE)OX>&?VId)tjmT30H5ml"YlRK^[7Up(I&J1hB+<d0<%4?D18e@'\nRb'lX^aJ0?6\K#Rt%>,JZB?3Eep:YXSIgFYh:*ms6Sm%Ese.L!:F4'7'i4EAN>N6/Bjf,=W3g8/#t?\Rhf=T/0,V@1$0XeU2!bh,c$A>pB"$'<kSREI)f%c>i%_[Lm`pQ4L0BnLVjiM]MQc!!GrV6j)#b'm*b272%hSo6Hm$00@j!_'?o]]rcT`F0[pm]U$T-IV-%R#dYE`A7RC]^^oZe\1LqA%[.NMh?!+itU_g]a3f(gLai8%Tigu=o-,Pk$O[)jAq@u>GO2Y^;B./.tLGu<'>fSbsWpZlp0=)X&nK\f1g!fQdmLMBbmm))LRa6-6%2MHEigKeA.f;@<-KR(H>c6]\E*nXtpVan+/*h0_SA">no5s"JM;Tj%hgiTQa"&>n9G'Bt^>n>NNFK/Ir;P%XAVLo<hpN:+!8#L"K%*\V$s,4I8*5Sc$#j./=.ra-Y)IQdm&1e5qFmg*Y+ApS@ALp[2J]FM""^sG23VY00<]K[rn7bHcC_i%.ZeJm@X3>?ks_@uu*`/);W%EUNf`R'$&$Xf2V#^fm9TkkF]Cc(@/E3OEbq]\q/,gaL=5ArZgO_s)'r[7k.GIfEsA$q(Dc=9!u1>FVp,['S>G(UlQq=jhgRahA9Q%NgCn9O#Q%3/F%GsnkL9Dr7,[AZ#0ki4_P)Uc[Xc\[_Zq:Z]=]0VTH:Z#j)o/QnGNV>]\W#Ai2u)RQ564F,"Y]OYKZqOtf%#bK?kp%Va11j4%LpF@S8M\VHS=`?:?,6NAdpu3^E%Ua+@BeY-[cFM#@#l$6JAB19*jX2UnaLC##X6lKPd'hShmNQ=_WpRgC*/VRGn)n!?:$%"h"ZUb^,e&?HP@6JFcmDFo]T.C0TU1r$Y?"YK'eT4r!muDCB,ZUJA"Xj?1K!j&B#0*k:$&)A&uFVe1_"$V&_r#guJ<_-=ki)lS.q%eD\-Lo0%q!TVr^]h.=t"Xk"/GUXGRlC["G:O4Wtu[TP*4$I)Ck2:t71"RbG>8KJt(V6<5[[ClI_%#i8a!MS_kH'2qmVLgfgm;X)C%H$+kYe(ZL(E2lSAJ%HnRY'[?P1=SSj.rS?FitCFKGi,uC=YZdc/?4+ee1^Kbc8H]W0jGN9]YU&4K/tV9XRN=]/ejS_&WRjW$@ubU%,:P82*CnrQknlr;#36hh&_'ZYO_8:7JBc?<@Sg(4\5nLgOCbA#+]CJ6aCL#j/COn,+NYalks\XGG>P1V=uC;o!9TI%"^j4Y,.t.7%'T:m;=D5BBa\\^H'<tJV&_X]FBu]G\N!?-OK#VImKr/D'\dr<0M%KiqN`JOS^?i++8#djV*5)FY!b.a5;bMR3)7U/4/:KneO/thU%&^IEjP*V^q(6^o4MZRV9C/hM@F1)a:4@F'efVO?eldDJ5(bq=ONmX=`/m2S5rPAU=0Ti>`E.a+[#UpAM-5TdR2?al[rnr`uV8(G6%lOJLC1&iLNXBbG7k%=$jJB`4\L5$4>Xpq@-6ptG"ooiZ7hIeKb;6M'Xp:3H>Gdu<+X3&fUrK7i+3!nM4D[,8R:X8"tM\T:C(aGqk%V6QXM?:WEQQgR.=:GEY11C'/T)X<f,#&_FF[)TXKZNNWR:G%GMq!u;&BDl9D20BWGd4\JBIOGF=6uY6b]b`#Yp#]_uG0&\@)&gf_%M@@*=f+WA<h<Y,X[a;SrTf,q*[5=.]C;cMaL^\#PIC<GF2A:$r=^+Zs.@-f@=/Pcck,#&?Rk:d':Y,'GFUllqN#HQG*=!Hcd,)M/%YS.HjbrfonT:c?GEmu'3^NW4icP=34Y+8LT'c';C#(m191.cE@!QSa<(g'Fb5eBo=N:d[Zi("1X[#e"Y[`1B;6Ka&#cd]?Ir&1k`%^P*$XE-T\u>\LW2)U]6orl/Mn2mV"#`b60h@Yg[*[qq"mgDp9#FF2'<hPO5"M<"7,C3i<+==JC;U^.CpX%8Z908s+$+BVKj,a`@9%,65c',m7'_hL60`_/=A49=`I$Y53$7LPV@I&U,^XXs&(0C0q+UG#a=Z$=`M*_uL1:E=`)%I6[N2!'%pO(RrrQMLYYZ#`O%qk#nAi%2cb5b#>JT*)4jgTRMBn3rKAp=X/LTn9kn.Zc2j'K"*9V='"4g,RY^D09U6X?%\cP1)U%Jh)/9CBK)/Jt_2k`ae3\HP[T5X5/%-KO%1+idT!hCELQS#;h&J;f2Sm$8gK+B=9s3aI#dHk1n9G2S*E&.HOE'7*L^rGAJ0X`G[c\.1kNM-K:$?IoOn`p?+dnG;BPU]ihBe;W3%0YBJW'@Oc79@W16@oHkt/K8Jq^c%8FbbFM:&j3@o(Z@*o$D7jOWcK-+8k'R'Th"DkgO2/>'3$&j)d\jR[Dh=jFX0[.3Y!]&Z)t:[%Pd]*P@We?7MT,D`Gn"IkCTWuER_XV9f6N>r"#:Zb9==P#?W]!g"e^Q>)*u&io1D7*CJ_1(;h=<\jJTH*-D=`]`f#S,dFFY&JNKC#%GAmG3,EAl#'&9jI#J88d=$#ZZAL+VHiYM]knt]Q8Kfib$D$NN]fJ`SSjEbmm$u:1S_SX4?ZRpl_<fjO&Cgsi7`?Dms&e6VD^4rl#%o1`k"0I6udP<N-fGHf)a"Ng)=`?1LqlcHpkWY0uS%kXP'2V2cp]4/f&^`^j[F"^AV?9:SKL39Qf*s]1c7K]_?"]i!V]h(/:Te9r\%PL@.U_&`sBn(#!QCuuo4BL5$;(Um2p]M&^=R:d1'=ARg+I]qQ5<6_hQQ4Spcc0B]q"H'd.3*7g?6377q$5"(2gHAbQNh4V!IT]"/%VasW<_lhTcIGTlYq#)k)];4YW8pX_LXNVY7R1V]m"ZTYA/56X"G*(ie]k=CW'Sk:n5]r+N8,VCNHE5A6"d"aM_pIU>AD?/k9gMXB%Isk'dV?C<Aa`"//$M3?*i2KGBp(>p)gVGOj!^YAUC'a-fdRP6pi5L&4,fGMgrG3HV]e#[A+!(LJ1R&b/99=u5(<R>a=0Si$Q8Tk0%4Q869U60t0(1`ufRd'S0al8G1!,G5%f_#8YnT3OUI[tGZDH&MU9h,mWpE,lL101]-5n[OZ[((_AX>DJZSh\euMu3&&i9$B&=`u0C%G.!gi=u'J)h=9L&@^1`"H`bNI#R*["Wh8Ge&K'sH_bV-mhl?I^UX8oI"qE4`PD&YJd/jO>n:RF^e>p;aVM(War#i>3]CE=DR:-O4%i52;Prklu_0j8"h\/kcJ1OfTi/=eD>:L#gJ&a/7[C>i'u;;L*pqo%'ehgc)3MWFu@pqMW>%j*ePV?Lt3?1L=QH^N*l;!4FM1G@88%`k-D?7E5)&iiBI8=KK^64Qd.%#4gOmW6;5%(sdD5r<RZ>rAX.['.J^AiG@JFbkFaP%.Z?M=?c,G]B[2s`QIH*@-ckK`L`];8_Q1V%_u]MtQ0h1>mQ.d,@o;(/MGkbD8=O+9Hh"aNeUa;$DJ@%Y[[IRss)hb_M>/RFmqpNhH]Nr?i9,lD(LuSec%g#@eNVFp33W^Z_=PYd%Lp_)\;Z`!PWk:.;n/UO#-e7d?*Pn&Q^#jd)1GW&^;mnjoT&5$Hf&NotkggmcSXWtUa<Q!k;ho+.&2)c!9ep-8[ZCXt0IAd-E]e&q%\1ou4oDK?)<ojXpgR/40lt^eIl02==)MNC&c\MQ%Z?MmI7bQJe\46V0kh/O)Ht/^WfcVP6KZ"<d_E.;"77`o3)&n71XaAhIA3R8`%%74+^V%#aJV9q(b2[Cj=&e.uDITUbO7R#H/.Ap*lrfM!2J&G+WTc9[O26-4=g%?*()_f<uaNktj)S"/S^9Fckn%mZ[O@8\4="PYH%f<;GNG!Wc-=]cUe!VsEV"t]"-+!#Wd,p2K/dK@ts51k+]n1s;,nn-"@:2mt[W@jW)#p9bo!XKV5;86J?ckN-R40HD/)rB("B[3Nk%"91Asc%DrP&+X>Hk+fk#TY[u_JC@3Jdd.L8YT?XN`_Qgm[_^%dWnj%K6_-X=X4i4rLWq%7p.5DmhRX2if)tG7diiV29[`,e2YLft%n20+D&g%o;nKhrjA<o6U>)8qjk'SqpVi+4:;a*_A`PqVn\n*CGLig2-B5ni[pp!L1r[E5#_X5<B31n]G+YI;M6V#OUK!Jqr+)ls:%&baF:.`DWt;T$=s1/ALVLT=qJK/D-)_.H='8F7<[oZ\p,Lh/^_683XjbQN-#=$)eY)$AZ=l"5PQ84uQ'&BOjfgFb$\Xi]-qK^n7O%&g8hLG@>efYHZY^cE"9lp;G"=`U6SCfZISY,gGQs&:j-n>JiIsbT$C>n*TpK]BC$td,[j[%.K`D,nS>C238X/L]>Y)dfe8gY\!6@%gZDe62HJR98"0Qu>Lg.A2(/eO/./"P1l=PiNWX6l#]FS4PSS1[Js$YU_ibeGM99&\+E\*%qUlQAN>Xhr\.iP3#!]iP[.%sJ<pRWk%FTl6B*2A,iPB7.?KL&h?1o]hPM7rE_Ek"LrB-]qleCc['),gsF[qpq6A^]Ii$1E)1.^HYO[,O[uhmN22:\,ej3Q%MBl,=qX[!%jD%^9F2sKW_0N=URR$U@ANi.oYpk?l#6['QfCI!8NN>m9#m1HF@@,^%?[/DOu;#E#<$;3Ga+?FDB>C^dn,SN;4te258#k*P&#jFEpM`%:upnMmUjXWAVqDS"_Y]bAM&=>Z91^t[MgDhQBo'@\CPjQ#&KJ``+E@0IPIdQ6T5LDl"<i36/C^fh^5gVP*ZdY"<45j<&$Z'5"C6B%?EF9r<'81M2OjGo-i)o<^qD@>\MK90PHOMG%`QEBU92HLXK>-&4g47JCN5J-09Yos=QN'*l6dJ=AC`+PQMRb3@qlo_SHPh=Yfg5h%:A<khlk;P@s86p'O+MjG+!k0-de[;L5(/;^dS.FpX7b+aoS+_2`o)8p">=*VCi""_r9/Ai1:ut.\MQrS4_Fauooh8*%R:O`R#Z[o%R"hl^6SpnJd=kgQ1J%.KS'(qDd+bM]R!;5CD`aVVRT3O[T'W=sG=&]tZ`>84c[1,Xq,q3N;8s^#<'n8JLL0A+RYW5KCo*P"1#cX5%L5ZL\L*_.CTpGT\<:.I.0*'.a8pOq98Cj#KU&l/23_uL:gaE;L#Fg1EO5e^u]F<)9Zu[4c*U$V#8OC%LLU2$abVWWEr1EE50on*[%;HN'u>+B),;ORZPG'$b.N4"<'*E]m-47E:'H0#E,n9B4i?E:!7kn-@E!gQ*AgC;+W9pNC1Zb^WL4&`P3)%lq[]bH9M3Carc=9*5$%Sd4nfHrH]gLOk`+$^LfE?5lJP-#UO'e<F;DRZp`YYS#)Hc[0Wn_%HD+-c"q3k5]7&@JotZ1"<t5r78C1@UHTC!=_=HNHFFZA+i>e%9["hmGQTORL/hk$"30$#7oFF<OO<gdCLFg2lDs]+/bL)c-I=O<'O$-5CD<?l%A1F:qpe+ZGe?]h:,HBskf?.2H8^Kupk@"*q+6Ia%,oSGAb:]:HAIsogk4NE%LSZoXgKQV;)u&T9'XQ/d!_n6ebefkjBUr'*Y@$a9+RmU^!]?r_JZ-ZMCX-rFWeia2(mZ5F[mMlm5qubV%1ThGm'V(At[l#r,fIF5p1-<k\3<f7ZNr]&W<0?aeg5bO`k%UY"C[cRoBme/T1,-q)VWU@<2u?(bXm+P\[*0SA#4mg>q6:AZ9,O2*%!a6qX)+T2bb&:4a)TX;A'`-O7-D@Af@2PV>9\:hVkH6gq3#pS!P=/'(dMpgUB%BPM`@#6^%kEm4!*$)dET1PU()_*l?u9Ko=t[;d%RnHR08MrSChLSZbB*V\u:@8&?&j0K,R<?VR,mGGnKNQ2'652I>$d\q_4H?.'$c<9p/9*b.8)'lR/`)e+Etub'PlUBN\cRf!eC*Qe%KAtp.-?liKA7N$jeeDeNCHu5_/MfYr9/A53X&rd+]OJ\OIAbca(h;NQJlD?N-:dpf]R"mP[[\8P%NOZ#k=/)/<)"tr_;hA7=[ae2%RIu_-UkR%slcJS#Zh.W2LL<lNiJ1@$(:%_!_4PV"\Y[J/`JgFme\[`jUs%ap4ogr:M@UerP0E5`#kKUKq*"\(LVfECa9>ArY\q'I%lWMrpe9hJ,^]Za$EAIXQqi'ER6Pb\30:'EB:kSG(SN;[)QA:>Ed!M<hqFm%;C/Q-0%De>QQap?`7Y\nA/XAFs6q8;8%GeSJ[gM%A%D@'OL2[)t%1%R00?lZ8V29af`R0j@qW=;,d;Pl?\??M4X2%KgsJl.XNh?O*Mg%DW4PZM[^#u8mm!qi,\,bgPN=5FP$Y9U>tT2/)E%:5X#FGUL&!iKLEQ/u:A40jRcu_2%6O_qY[?pKa6R-Lk:_PB!VhQbOpm6?WORpJ(&poqc49%GCIb;GirLXmcLF_0@H$35<3pD(fS#%Mgp5@k.pr@J%Wu:<lWF0YtA+<nU@e>g=^L7=]h=dO[q+-^3WkU24mr=@C*lgBJ8XW2IS.[kA(<D)?>!9kAY*.TW*JB7[La06"dr=%l]t%BfQ)FhM//_<\h&%;TDX)*?JC>+PnQYDqe\%+Ri(W-&bD#!NE2F1`pQcJ0'nHA^t"i4&!8B($.K)IUEe<4Ad?0F*(>uQ9QMa"%kejED+5I(F4kZ!@0\K@.o:AR]a_f:=Pm#*]X(Y,*?^!LFW!_*"QAi?W&'T/;lsM3Ce9-sP@mktt3?$LgSQ5]*ZZL_X[cUTe;!X!H%eiQ`:pVkeeNSt?gqt1Ha;J^XFW6>Q%0678CZ@BO")gn,#4*1eR>L1#HRJPk,E4TqiSIUkHTV1T(#ERp1f98!WJ@"/'CZe&"W/$cT%35;&rI6I@:&.1>;Sc$9X!f[f<.jb7,>`caXYJooJ<-uL4lT!_0aY13Oq6,i_PnttCDZ_f4:[[o'[MD+!P%Zm,Ci/Wkk>2n`kLO.b%/d7]3FhRp<QP[YC/5Q/QOG!@d7IrYWL73r(Y=N!@oL\-3duZ^/k"`0RJ-<pRCsX%bocebJl`gFUh&'bG*H_]I_ee@MWd_R1!_j1_%i&"D&1$<6mVU34M)`@j]Wi%h4MbS@tii5=ignsk?+9`Yg.<))nKNl.)HI?nYY_)1?+]s._&\^pNH*Rd<QPX:?2-2dVlSA@;jl'rl%g)(/S2mu`RJfMsNP/\C\dtJE4fmjD$"e*Js:Ok1&%+85%N^8#q`IcF9l1bP>CTkP(<,'p7*Vn00p#+!-;gP%49"WBtMj:1Y"K8N-%>o!iNlk<LcAS<XKZ;LK=bVO/'T\<MuV13Io*\T1+YM%pe1oh'sa6u=-[CG(*WV&Ld$_+)n*M/.][44kZWiH@o#4EJ,0n(+<lP#Z6%3Gb)h0@R-D?C@(L:/Og0fB7M>s-VCA?\/Y1f75QQgs)k(6Jad'`Dt3/HqD/rD0.q+Bu&G7gZag(b_X6@5a`Ybflja1D7)?a.M*Ct%i:6BTfSZL[IER>7cWA>*(Eom/S*u,Kb?jC@H)>j#Jm/aB-D*'/ATm#&$mqtjeM>EP2goT)fad@tn2fC$bY.ZM\*gI]=3N>0T,1gR%:(q<DD4Q1Hpsl\<:`"Lj](*i'lPg/D!S4K4isg5o5#QIDU=$r<k^U7X._]/I-\&_iahdb!13C(jMpi;4Fio7p@s^Q$JdCrOlM4K<%+aPEU^l.Y806W%Uqh3M*)1[4oX.>q4O,634IrGb64e/D-)pB*[RZNSROH22lmjS$`0@##)o[<gJ2Am315Eg'NAHL,/#%1!to_FKs%N]AKYQ(c[ccdIYV7/u</<S>Ht[R@%=2=a_*/Jk;0\UZ;%*q#oNI_&0>Y0aMQVA$V$SDAq!<m#BMZ&@$EfNmiF^U7(Xk%QHK&Xdn*%%"UEa#LsH>%HnG?I33#pLWak;)6&(>(<fi\(_rSS`4U63$UQ:=9*Upg7s5>QofSJ\BoAP]B%,tr[SZPJ&j0K*R+2CQh/gg]oON,F%6^("n?/c'taUli>MedeX*C4:'W#c!'*_ULW!D>;C'tPU9>H7^9G-HSCBq`4dP.T7M!jGW'FPmQCNZ"+)ZZ8.0eD)$!h$jSuC0Sq+%bM,n`[&::83e;-A_q7"UGWDpNYQ7sgMK[pt\XhZkYQg/TQf^/(%sc'e?870!nK.@WU0T@q:R-gJOusY>Zq(te>2pP?mnV.'[G<$Y%N:tiSQ*<p7(#1o<47&IQi\EB]"(q`hFfu'8B!'aPCda_JljjV<"'bp_h=:QIn.hk^D5Y8]di[6bhH.$cCm)@1Dc_Lb?e2XX>kD0?%RGc'"e'V1Y^$&rE]&sIjG^3T)N(L3\Ng_,IF9l6ni["jb\Ksoo?pr&Q1g:a1*Ylc$r6JNq$Wh%h3>I(HSBC&Ea.WQMp1q-SM^WPQ%>h,<%lYuR^dEu9U=!qa"NkjpGp%A#J%b@Ue.G\K=lc%a^1R&_i2?gJmS,mr]Xo]&CBcHiY3s!%c(&Y5`E86$#"=WDZ-<B0W-2]u6%>SXCb0B*@>Eti-<CrLNABQZn-k1^=UTS1bK8mHV>IuGgDU=WTg@r"(o5Q<rK[9Us)f#cVLU1c=qfqkek(sKZj#Vq,L"9*06U(eI8%C5(?S]m+poGm@Al>.I#mrT+d<//<L@d5_NWn[EA=dEIKfW.ct.j@Xjl]3_rkW#P`Ca^[M;J]GqAZeBDBbRR%q>mq'AZ3s`'pY(Ym%8`_OqfHJGf4o=_8>oVp/^$Iks[CHIWJ=ZgFg.[&uNN2S\rTo%l\OZDBTmTtNd7t1/^hS#MN/M/P/>n>m=fR,"b;YGe=/e1#^@UM^%2@=>N:h&`JinXX(EOC#rG2Q^L("WqcLT``5k[6.kod4$NKu_Apo4\]gVOKR7U,(VS,J&?9YU5Bb0c&)cbT7!$<I&3KW3b'!:S5`j%Y*&dpGYXF&,WfC?"aZ^7>_.X#pZab-mOHQqGZ'\+I0W6bjp=0?c?]*N_\,Q0#u&aj)b]\k%2@&($;:SAHjrkZia%TPV#$li9qDij%M,fK.CN>(CG%V_-b?#K]iUQKuCbhZ\4'@cd?%&^7=\E'MLV^$"%b7kL8^l-_S%U5TJjX;`%NZ]t`WV`2YQLm_4$0Yl)4[1:pR<WW%K^kun#N.sTI5s>j`c@90cCn%egNJn!:_Yai[62c(&i8qTBCF+"RqQiVdIRP>*LoC9me"3r#`t;t5Y+EgCr&[OjNcam48000+6TsP%rDZEk\%CD^jaQB\F1p2L0HaHKU68K=8h-6:7Eps`X<4G59SG14Ae:=9et*gfhkdpD)F&EZcLU_LE.>tp+8HbaG,E>7##!J''_4ik%0l?TX)eUU&.OHm,2"^E?KIn]J1!I*aksd_A77[=2Z+_\\JHO^be00Au=Fl7Z_1+Mmcjd?t&g`?]'fDoWWUO#Ph!nL=^$.UbI84RH%[:GM8(?hg:O'S!]K0Zn?64F'ZEU?l^qj$#gZi#6^P'JL<R#sr&V%"099"A4M6;(jd-mD<\^K*K9NqXRsl)s-KBTZ"\HDe@<&(TtJ%G`YdXVF:!gCHU.MUJTJ#I<\UNMU[nKnr:-]",qbL4%VZDj]t]Uhi#Jo,_H?uXg6HF2FKHQ/F*:(ie@8#5#l9TjU:Bn2Zrcl.BgmJ%MC/rpT>4C%Jao7d^.!$PV3V#\O8.Kcp-=?JB-q&f>(V"q1fV0hQ)aq!-j;N^(*^.>i^YggM)+a1W^9'`LIhq["'b>%`&(e3&bYc;%pibQ?aGK=sf-KT1jGJSUFI=C-hk5F]+3Bum<?)(dX]qJ;$s(DG/Ie$,U$<jQChoRrZ>Eaq79oEhThb='j:(7j(10'Q&T,+K5NTW0%fu]8RWCcrrc@?@=io.8O9qoJA8=p?'7=+`&\>150!T@@72h/nSQ#.:U*&qS=_SSj,<&,'^3cI;Jm6b1N5_/Yc#,NGDY:)'HPE1?;%cBkJ=(E3)aSpFXC!0sH7M6Z1G%@u3_X4/,4IL<!E]HJgsg;m!snPsiDk^G#&W#lK(5uFdYDNoWWLd'm<?U2@-o7M?U<D.rD/bs-I%/DN_sQq;DPaPTf[T<LPt\o"7r(rQlMc#l5_L6gXc<gol^=Ai^mVn(DTo'Ffb*>^gL;OFcJ.*%hm$:hmS5M11E`Z.V>2=<8;Fdo>(%$m\Z)$&%T,;;&Fg/<Q5`W++KmI;\rQ3\`I3MM4L:)7EpE'cNeZ#t"/mL);BK/D8UaRO3YU?&/]jZBeTZ&1MRkXFB\mR(,6f_g3qE%2WVi5:-r#\]1urhVoI8QG0:Z\am<UK<^=,9Ql/ZD,EfH`5S/=hX=S!]OGhG`aOV-()b]2<):l71$jhUi@mg'14bYmhVAK@_@WG9f%7)eO@Bd'/Um+*2uki5JS9*N\&'meL8QG>0_<D+k4=K,R9<:r(SQb:]R6irLhJ\5>JC1creM<5rV#Vp:N<.\JUdm]q"-46(elfdn7%G\VTT,7Mpo/VO864+RkH#ZQ5cS=M[`E96;E0j#*9T/oC!LG8?/n88SlE]Eua;=[V-+!gGUon%LH+i]Y%Op(R/L7a@@>,C5:)SND%%gPjqglL"L?<'Z<=jFI@por74<`5jVKmsdg<)J,T!@7'cIq0%L4`=&n$<0DRA,`p>^E>Mq$Wd;6bo)+6DqhR1RK?uJ&`r5I,]>CNn%Qa*$p3nOFUI?VF.5rIXMn3ckbG:;@X(-r\H,_TY*=?N4BmJpC=lK-LuN#hH+jEVJCfZ-`nZ]&^C<<o0JoGW#?,$4lV?bD08<FsC_%-s.ar*2D-<*;iJDLmk/<iqX1Oe;@(;8Oa+2G!nJ*08rZ/*#C\.iE<^&.8%NgY^rg+R".d(:s[)':.2eg86/l'SsL2W3Bb^sdPGAD%:D@D\SUaYKp-STC\;:qRQHhc0Im,JRK.r4!eB\i.3bDT"EY*T^?;]"adKQ7"_@pkqlZd\4Z85Sn8G//A\-WqtJIM@>e@C];[%QW:%6c&4bf8_I!Nu*6&%(jf8nOU699.kKn%3-YZ?/am/n_1GRnridQ=n1XPd5I<\-sV8O'$i-kYp;pG\uIAL!fl@7`ieZ0?E4&WT)!Lg%(W&tc6=#mG^dP*1gp/\BHP6/P0W;(`M._cM%2&87<4skRKlHndE0UuK$*I*r8_2ZR&/^=_DB&E82Im6:n>P>4**R`\#30]>=f0%9%,5sqFhEjM-;(1&J=e$hgj%pIVogplRc[9Mlh3"H2W2q%nO=+1#h@g]&gb%BJolUR>JP4Tmp]4&P5EBIR7GWg9:%!oaI](lh%C!X/%Ho@7**XU_W/T:-sZLj@,[\q1YcW?#dfna-s73*mOKQX2DAC>4-8AHY),`@9FlTq8"@&V5hgN`?U4A$G:!Pi54d:C4[JD(PX`D+%!%)=%E'4FkLZJdAPkEQG'A^]_9`10\U&B7>3%Os5FZ0Phsd_BLi6LdchL#s#1g/Bi%r5Xk4#,CI>9ZLqem#AO3-:-c*>#rqUb+MUj<%!qQQ5^Qf=_h$Zj?Kdr&up:9Lif*YM^gJL^!UI,t=S7=$-$Is^QU=3sZ=]ksO[k.oaim(@Gr$bTtnSDQDDG"AX4C'uoda,[\>]"KW%\4-W>4Bs@aPS,NtZGrdKe<2?<5lqP7?/0<)X9(?b9Eh?5+tcb#g.5d;)Jl4cI&+]PQBQmF[8=A!R0Hlf8X=apfeZV;!!R_)b$T%n%7?1.0A2'UN19)4*Z(j)pH+pm_Re\FJ?EHpp1BRr?KT"qP\</EiZY*GYaTr:MV$a6N?p6S^)Rof9Y^s=FifZ1%3H_b_'!POfB/2_D%8^n)uPRq^shfD]Z$h;/WjCD,Ia,C'IZRu)k7\H"Rfdko:&MF3a)=YQWYaY$GFC.!O,Y3J40N&M'nj2gLW%k_X97cU5YC8s`&g;?8%b(E"7(H:Oj.U5X;XaTu_4CS-'=qL/D5s=aTjbAp/IO*jP$s9A?VG3UXk`';LB7tiPM"!ft:es34+^AH]ekMh'.q'AJnMIKPo#)`^%2nZp+?V+^gGQ(&J-lF<^Me'&J@k6s5`(Y-K_RUO4hj`6@21YtO,'Jh9@16ODhU1F_S![8.hhs3I#KMY)`$B.Dbrb(Mp2e`d@(M13%a$Ij+[YK69(=%>8*7s?=\`0``e5MT/#uH,cS(FQ_?'a[HQ6uA_ojMZqM],folC7n`+?r[ToE;-.7BWZ-b\on(WgFQD$<<nFQ3Dn;%i`O\3jiUl7Qr^$>ToLEBS4QY=D/DIb<:s<THS/[uo@0NH=JR77ZcCPR^?[<8:R1='6ZI<a+=,Ockm8arc=quViLQ=[**6G$b%sPk%8&\GS8W5AT8tk8Nhjpu";%6e].12hb(^\p;gCWm!%3?>ATfm`ojRX1Zk,nZaQL9=oE@m;+hWG]Yb4uCjlH5;@HKWV(UNVaaeePYI%W`r>%a*?VoMA"G_'$lBsDMdYfDmMmYJTr(Wif\7I#ELuI-5YC2HkflE-MGE$K'Ke*#Se)dne#>ZF3::!.)f4mU?R+Yn`n#Bl%\3:%,"]ff^UY'92_j!,5DH?@0r"=F&T)jC-RT5CYrE5K.kLBGja'W"3uI8`aM';ke>(9fB5/ZfR-5?m;!D8uW_iakT*Le9CN$#ia%J8e%AtZee0m\iL@\0UnUS4UjMn^R!jRtt%Qb0g,mE2_$#orroTPpJ?9]`(]c%GM`fo\+9X>dTjpV2%On7o%`3&SN-%nnu5\Yqq/3:g7b%^9Ql,#Hfdl\ofH(>r)-"]8o]`o0tm!`C3\D"7$<,Rf[6"(lLK/4>>B*LlflZ8BVjU!3CqqO1r9skpm)soE>mmLVEW$qYT*_*\5VS%f\Y#UJ0b<f1jCq_:(J,?o"ga]8?*#`$]s.hjN/-c'2%'A+=f4Q%Ie6BS=W:`M(@%!Y`LOo?6UnEEkue;n`[q6bFmeaaR!WYh$W/%%Q&6_*E!j7I!bY?&3[k%JSJ2jB#h82%5Rc8O91W/N$lL-)@`%oI!3Es8+l:Ace?"2?+Yj5Z.>Mh?a&gs2AI@mW03&NXnn0gK(mfXK%'SXthBreTt/nHN5#))817,/XdAVB*?V,oj><Pc]m("@V2A@<#M`0gl6jXL6SjI0kMl<<5>aMN\;j[`\%[9Q^K4]!p7P6e30R]k'd%\c/V[Z8,P8O;0tk6duC$c-oC@a&82_dKgNfJ7/e9,&9)r5^m??qn*@@`k&+DJ\Y)E.[S,=,@3[]"fDsRmj<o^+VP"LohfN/"p.5t%;!_d*.%^G-;[<L23&5HU+"MamU\Bm[(o_.^;j[t,]1c]iP`@m?PG'A`XtuI+Js!d>`[!0=jNHuu-;c).%tcD[)&rc^9S1/Lom3=K%,\!i;'n<>>M)qkIk[ngkEh]kRJ];9"'6Oahp>`!2(j4:a2es*GgoO@dE3i#BR[Xa#-JWF10]D..$57;PTePG;NC&hu2%!&qegO5`%ZUUY)cPhKa5PO2L@o<m\625qF-N2hj8cKM_PCe$YrS!pDPcEg<Bh<a&OeU8DE1)=-:Eu"#qq+[hT"Mp7d7EI\rA;C,IMu(#N=?@s%$COHoOa&?)9-Y)):EqWN0himAi:PKSY?ihTdthb.U(JCqe;'JIBd=VM"LE4lIk7b:`FYR;h@NWDh%U]raR;+VVE-.+)kGdFe_#Js%9O?pO,2>t>dc:Lm`iV"H[L1[KLFS>F=T#$.+5o]*/'c_4R5;"DA*e"DlRT=M>J@>fje*kY'!7KhOnZq^^.W?jUo>Z%254&PM'$>\%r:"uj\.i"E!L;WK37DGQ)B!01WZ*.85*F<>nekC0DMWLeQtLBLEhOahC&!6Q9id,2;5?g$,4f%RH!]Xc)WAXEe\e'D<Fi]q(@WHL%kS;Vce0EeCE*Hg#OjB&/J[nggeM$X44"EqZLR_JLdZle8=gSW[QCH@m!du*OfrDsrB2Ju>Vo,GQ;69:[G2Z#MEcq5+m#0M;\b2(0%LN@!+9!2hO^#U/.)QBXX1t"N[As"dmjMppm-.6(2:0*s/HCG^`]o2SYZh(*/8t\0dcTolUkNaW'^!=UAchcGnqQmN7]BfE=YDK.J%od+AJOT&mW<5X.).iCbS0?l80!\MY'>]hog#*^,7U@<_=7o_!*qD#1mMWGd-*%*3+dXY+XFCj2\eef%gVXq>J,dCnM=:>r9hAo:%%d7+R*-Pk%,o#Qj:e)I[b^,uRpKA2GUBiqW4]Y&D=4W].f.S1oYfRE0-:M00L03)n[be%:L#sf.Of;!Ym/`m[*qVcNK0KMKF$E@7k%+;"7V$5-E9"62`%Pts,],3q`QV0W3u(FaG>RaX[SnS!"d[>kZ\C2a19WFa$QGW-(DH/P\9_T@KWTAJY!="562;2K-%$tiqeEesI$%,-G4H.b6%?*k2Jq%#kieN2l\]\NK-_.`3EPgHQf@a&:#=7U$#FVqZgB""m$E!jgr-kTJ9`+_n;0G(Lu*a)(%?_F-kk^miDM9u^8E%4A4"c?_E;*b>M(7Uf!eS)V@q^=i;VReIsW\5gM:#;<99n&)bR!p<=WjI#hriH!,ZcEm5\@Df-#QhRg@o5Mr(3eN3$Hk+8-Q:Kqu0%]DfBee,7naeDGGp>FkT\hs04ANTSdA`Qq<Np=I9OD#(g$^07K@p"Nf$ql8>MYN.O2Y:ifjAp`:L#B0W[?KJRj2g*K3]0Q8K!E("!%"atG.H0p$ehf%E.S.FnT]3)'0Q<LG+IrNChQ0NS"rNlL;dlb8/R]X)XCt!5>Y.iY*r[@)N[s@u9o^:n"^dW7T4oBHkihie1mXet^%o3\Dt:?PDUe+`mR\@K8Hhg3P-`X`AeYp21qU;'Un?T1'5XcCd_Vp5,$D6),H(N_slBOA3j5BtcD[/ZECKY&qhhBX.%`J4OBnE3i5%aB_>3bA"Q@^,r1Qmp=eVoL<FsB4eF']^)r-MAdl0p=m'YqT=3!Tt*A+XV9jn,+>[Z-/=<+TX\lE-X@YjFY3Tb,EBCAWK&mBUIMEX%cs`K`4W+L'p0%FYL3:oPVLOL'g6Pb5XEl/3[f;2H%:LKCbp-\*r9p7_F<\,;?lCm6"-Sq#WfR2,YfY98L93sJ1]98ps&N7h,afcN%*8p19I)5N<KM0o!?`C++E)M!%M0s6"!'GJ;Y*Hg8;-,Ft+\-V9'I?\@o<:YHm!iUgM+GmZMh)q]SpclSAnIkn`+!c(e!!:Y4@Shf%jeh/gVt<bp%0oQJ^8s0.O>+c[04T2%Emc5]"@Ut>^_b[a4PS#c2G&?H3kT-Ck/!FkeA03(gWfZN;eWuCH)X@H`,H)*D>rOZcC;A:%&H^XNKIb%Y4EKHdQNWWLRK$&6K9_7_<S.Ad-7HJ./CT7`&ZXK5MTYeg:8T\@5E"'g[_tosZ__qM6*:!(/H/.9Z+<epT0#-:ZM./?%o`T>Wjtj8#rb'oS&fh:PNL16pf[rO2TZK'E1g3r[7k+fED[`)VS[L@!qBp,a3@C=dBELMhrm>\0H@fKikCV@d\Hsd%-3qeH6o2Ss%_.QO,B;Y'!Fq=lU:S';cg^<P8%K?ALSTeOJjifj2;K%.p?BXi>ALSRH5$i4jj4?ZR2TM#RF3<"uT=2'MkA/8Oi;Xg)9iK;5n_`9R%IV9<+MdP\l4m;jTC3=;BYAW(o]&A.g=)2lL2d8M8G?;J]o/-($FfW5U><04'^:e9\-Aeo7O`lSZ)iigU?9PCaj*>Kq25C#c>()*Z%V>o]bdYa4P%:%q"o;Y7#j[ng0enh=Mb^J?G?b8]mE+[O5B\[JW$a&fe)/GYpG\ko;e,PHmJ$0nt`m8i.cX^jj"q=eNA0[SrBEMb_%kbR188+HJ2O^"Gq@J40rK2FJBDq*"WBbh)*2VZ3F]4Aj7/LaN)np0AG;f=&rX;ZE!lHO.!7NNZ)ZC-b>4Z%5dm36$PgapUNJ`!Lq%U12P)`39F4N7ioqZ\q4a\lE:_cB:Z_V_tA9[sgcdj\l&pYDZ_&?4.TSX5R*-r?lI5qKaaL2!JH/=/UI0kZc^gq.cN]iKObLo$:8c%q4/_coj?qB\92rEr`B%arGAHXo<VHSDk:<tH!]?;_+,>MDS:+2Fuc2k>5[QidFHkFX_Ps"D7"51&49c'qG'!3:IuAt]@F#:$YNeB%%PjYq2n75E-&&qQpSt>]9/]]s[?t1UW;l4k=uY[0hmMO;BY:gW7?`m"_oUY>&jiJ"m?;qQ?k`W[>N2Q55M)h#.s1C_82,1N!>]c0%kIT>1]=Vt:oJW2P-E`K\^\J(J-$,igo'uD@S+_+XpW&'^\URsnh9aKkF:`UJ:@EM]T-\J;eS5#Tl!a_m)m.D7?!NqE>4S8DcM890%)>u)bkeVf2?frKcFAMmRG.J3Dq_keFhp&2`eJ@Xl6+`WK[;71&dS9]+^D&agm@.,[`*B^r0&c=AN#C/dks)e_du0]:R]'M#D+#?K%Xkk"'`8L<VXXCLS@q*;-`C-Qq?SkQ^>#biXi3*'7)?&p)gM:0r;louU,fNgaY.Q_NX\R%=*$)2*RkT#)jq3MO--(M*05*!<Ml-(F%#;5ECpt,Q*e+c/O#2Q><Zi>2O/:sHpp05eBP3oBY[Jss_9A@#6DO2p7[,%K%B=IQ/pU5-/WdC"2omcS*?)/-gU7BV]/c/IXEI[uJ%X0K/GM`5<,^KMF<IoVWu]&eF/'E^HI3+,V`\iB0WWj3u)n:/9jcP#]>IFgJpXWt425CW1Pq=L;N_KDp24=<R2gj-hJcK!cloK6(r%.ALlTF?Y%[g\&6TX4uq;h5\5.rOZ.g3ksl9:G8k'H;\!MEh_>i]/rRB\\#!42K+'$21N("HgTS">=k2"cEl#.f?N`[mS\S(<u7$i%I6#GQql1k`DP/uS[X!=nR<\J7/_:Ubei^^\B]oUaHVo99f5'"4S)%DOF7DI%CS+tCc7eUglhdf%qs$q&_);5_QA?*9?L+K=&U<Tk%'+<8]Ti%MnIX+;HG5JFDs4M*:U_GZ!TNO*uXZC0XC_b,nqNb=]ZPRW[FfYC408+cG`q1R[XOJ&)ms;H"IebqBPiDNk_B%ptMsIu*%,LG,k>9DIDS`WZ@[Rp+<p4l[lEDEY9Vj6BnZtji2VsS*Z]M:QAQ<WT8SeDjIWB7J97FqX29'9]\[N4Ju^a%riED,&R^qche"9u<b%'/91<WrLF&7:^F]ERUq33R";Rc^nb/>K*Q.^K[75GUM#HQGKBZ(EKB'jhG#44ds]2o;[(WQ:&<11[:)V.%ef<e\s,B'UI^mBr+%N%CqBEd+FR92['#uZHc0MQj&Y?^As\"l44SGrh=b"C$B/W+2&j2`&Va05:W*]TmEU"C]RN9@PrJ):lK>E?>]Fs<adKh_G26!LfC&TP%8]I,BiH'6bECTM&aWU2Mc?Z>BB\qMm=Z:QW3,$f+Zqfp+D%[fNoe1@k+5ZF6RBQYXPkW,6[sqXf[F1S9BgX/r\ko<CJ7Y6Vs1(h0%^Y/,6[gg\SEDP)WI='Ndd%K,3d,=i)<3hj`KKd.*7<r8?N.!`WM6bD3[/+cdF/Eq#jD]SfaZ/*op5&0Q.\((haJE1PVH'U\)n4:-%,ga9:C,+Bg-Wj^<h;2/l>kH)mVBW/%1YFrXCR&gUc`re:S'$r+4g3YO5c"B'DuX]n4"5On[?76-P:-(qp)36+m2_6$'XTX_(;$g$%`AIsn`YDXOW[0,hPrA'<--ma,hMTGpGEPO:DVBX'_Dmk&J**#k+.oD)X2!i(%).T<RHQ-bWr:sJ[l(DCY=u9Op-L:\GDb/QeNP:B%k[+2"Br4k0gkO#hVp^/8f[(2YV<s`-du3(*ZUDg-WG'c&.";>D#9T6>a0Vh,+bPYUS@*9+<TueR03L;=C6doq!<a]c46MTHkCV"B%!I.,P+*7S_C3TY)D.7$[h6sp3WP3E:L.D3q-m_jGk&3U7bAYoWAYu=#)VFKHnhkU:DQh@bPaiKDk3SsL7e"p)7jai`5`4/`]6)T9%*K16VY%6t05Hc^FT<?tLMnB!]FN_p_1f'L;au;`X]o/Io4+s6fM*a%qK)c7!>&NFtSCTT;EG(hc#mYO8>8"Xd2a9oV-#V9gU::C:%$N&nkg$+ghA$Q0!Qc:1JTlJC\d\+%>!KoV%g,st=_WKIpc=JptlO&XEX=LY8AmM+<3U8dKrGg;%S6qP>;pja9o:p_4-;2afHZuL"%4\sD=m1Nb)DI&OS8=,>G=?!'NDH]8]f)@:i1Gsc48;C!MS0lXD%_eG'^92;Ef'N)*4>Q<8^RF>f:9+LjB[l<5,>[t%>g<4Jkj:sB%0^f]!;^,dW]2md]e>e]qLY:4AfCER_AO/D'_PXF-P'4^g@(=>2s+bjJB<$5?0r%Idhl/he;;ZoG^EH>NIFI7Q>X5%FgPh&bMW\hl%n"@n\QM+LVnQY7Y3(S<j9^eBc\C5/`6YE>VDpG1D/\;VJV<7KBo!?HPOf3kR*U]D&W$Ql4op^-a^8YJpYQG%987`;Xc`X!D1:<;>%\K2crLuOC'rQNOoYN!]en0tK/FIu#c[iUM(1f!kA_'h0R-!!ht/ZXtPhY49LdNh2q"+3<.ei`9`aEU2lBeb+3=nhLHQ?;#R'&=AK%3[D6th,^!YkY#-shJ`+.H2V=OoEFImBhm8db_uYj[X"XnMMM/r:;YK/Oc^JT6qd[&lF5ISi$JT:I!2aai^MpH[\0@gf>TUso?r!V%pA:;$rnu]`s)Tc@IfHV4#Br=OUYo'irTV`#p[*/!_6qRJc^pc92EID:k0;3%d9ig;hd=-Fp2'!5rqc,@I2$PT429OMc"q8[s74]H%GS]02;]G>s]WQV]h;XWndhQY0n[7C?HFNatIIb+]^A0#1\U8jEs)E,OLNU8,IruMKmg$V)AoHT,Sm)!`fCPu\Zc:5=d`M=JW?l3S%?u#+TQdu5REPpUlV\[l*hp0;?IeDL(gUZqMMsKcu)pt)KeQ^bJCt<<,?_6@2S<qftqDu7QbcXZYndi-rUetWu)soU\mQLS>s4k./%"<MK]<UFrkSVQ$rcBkTqQ*oTlbje)[DPNbjO7(J@F*$uAc"MBlXL'n7q7<j#Ph$K'/["J74n-$XpN86ifA8a%.2qh_kNg6nK7ZB2%J+nFGgfcgRD'h&Tk?IFiY@u;GpT@7m533=OB^0[5hU1k"hOq9EDY3Aem+UaEkEgI0?$pnZ4Xq;us0ZhGM>'&\;"+1S[;@M.k!=ie%1M`Q<4qI(:qt"as#.:nsJ(Q:h1q5KNGOXs%hOq5/2!fF%kME,S>Qdjk/3f\RESC2T2e_Bt?d1hG\i2^?fi.WRn*6DJXj%DKSo1BK%osjVDH2.YscM-dBj0SLTou80blF!sNIf8tR4)`L"$kMZ2]q+T]YW7=o45V+'*#/mnI2:V^#&`k%h.L)#*Y]6aDlq@!p?1IZrh,=L%kIS"YK219rS\+@abl$7[cX/J\dO7d]Num`PY*F5(hXA'P@K)qVnRlY7eYBh5Ptl7)a"uSAc$-R`]X:qtm>I<bK0FPY[^B$jBZo+T%GOJIB:`;bFprs%Zk&TSIJ-HI$1P9j`G>;C'kje4KAl/O%jh\YJFR.-3G&#B"CY%p3fVMGYfS.&I5/7"9HL"A>]Kr[UlQ<7G6)3%9%hbGt[@MCih2s]k]gOoDi?d4%GeS)<O\Uts97e,\o6$IOc=!!uCH#*BF=mo];bSL\6f/qX@q&JN,H=Z\$15!`UP)"JCHF*1CB[@RH%dC7f:r'>PefqZ*W2c"H!rNL\AJ@MmuXWO.Z4hOiQk_8\Dl1)7\6/T=grAA`+0UE2ORk]ZrH92#9E6ueYX4`gCK78)TIJ``^b9-BD%icK&"G(ISYmTRB;+6Nt9SNd%]Y`_67UT(4fB7'([K.c_fZkc"Y]lfo!:.LAjB[G;e=fHLUh]0a(0B7c1TYF:>lOFFtVu>EBe4Sou%B_PT_]e'Z)e0bU\]O.(PHguES#(>4MY&s!SXX+5>4^#u7_AV\=M-q7bCN&kl:,,[4]X,&T%_"0+UL+_\9[1$._IFL+q_!5m5$hCk%+9m7'^KSnk>+:q/s73i7&FPb"h-G(uVfsrYD"Q",W7AB*,PTAg+#b8nd%E%iZKU[t[MID]\p)u.>td9KM]^(0fjERA(X%NIP02@i%b5511rjBEES\hS4X[hPIlIUYP?"!Eko?Z^RUH\4^]DqjuF(O4skMOUCIsjJ&os<^\msZMW[1?cugUkYDMSD>7_HW1W^])qjchg^O%b^.%]ITuSiVmk`c6Z)"r?T]Ba^X]MpZ>=+nrS4nU0\6:$L\lGm97@>aba&,&r7>QOCHog&q4AI]^]&O>pU9kKDfadU]O)Dn^A[u\%.f>`qpU.Eg?bN5rB(<'c)a=g*0P7N/SlbjURl.Z\r9N+pWt.iW[eepjI8]k5e:Y^L?i><!ao6Vdp"H8=osEJ/Ypm`I]MAKUb9BAY%JRj<tbj9+Dn:<FJjr`EBFF&?[78IuS?2j6gb9u"%+?B/jrT9riZ+ff"_reY`bCe%eM[/^Gjf&K/oXCC)V^oI6NU;d6[a,WaNOlVY%X2dkld!I8ZO&+qQ';r<1Sj1oSk[U/tBD1lPZI$9mknodi]B@I;h_209\AHNO:'C"-lf_s3>'^&9%`\jrlc5d56-6FBqn?gC"Kja5%><2q?#5;NgHn?3-pe*@jlXQp%:2f%$`Il%Q.3'%Fc;-=]c;cVJXJA?boB'5iKDR!IpO(!uo_cOXHNneirTcc*e=cdoB`D.j5%Y94%"Fi!EFF(RP-leJZs1CYN8g91To`+B*CB];c8d=+^*u#4mmGH:2g^GVtVe?hT\mL'G2m884#$#[P3^n?rn)O-grO6@;/hK1lWRT5L%YYr,@eC+3-YkkFfO0!(BdXp%tm"mAPj!L5ClWM5&ig*`*G<Tn(ZVRY=5`@3IRrJ;ZdajTOa2[\eL,RVZB8U*oVTqtNp#cea&cHP[%IY03n3?su+pqo8kk6&eb]*1'B:k:F*YBS>tDJ9g<835ZAZ"LcBB4d;kKHj-'bf[J]1o=tNr@OJ6Httk'p"IX4YLY'#EDL(W_%ap^%I*`3aDq`J5Zd1K1*HTA=>;Pi2V:Y+YPgY!t0raPXiM:]Vp<oYJKKhYi4r65_[g(!Ib\b%V*g./3o,l5<Ru(FA[m'Qc_cOJ3l`8-=%%bebPkmI:mrqp0X1hqH](6_.oG?p*-b55hZrb<H"oSHL_&@0G>lX#%=5jYnpaEl4A\%[$0L8V-FM(C(@@:L;$Vso/`al)"-QQ\*`%A#&S)WaoM0;@6Q1p^#9Rojqt`/UFk2U;q6.(Pj-+p%@dnnPU`g5X"59k\9EA*XJUD+*UqnV-g%.1-;+l]31<aYEq*6jpH)%D9Ma$%\,IjaC_q&enAjWAD0^GtV9p^(\0n?G?4TBqp\>'<6U`uKeJsl\Q!0+@A*;AE\beCmII#)=nq[Z/.!^`q3KqlK)lDis!WL_)ga;?B%4aihdM``MF6;6&]]fmg#k4.aP[ID`(`KYc9XFH+7%b4]*f@=L"k4Hr.Rd[\?kI^Z&SiV'%n)s0$b/M'E-2p8(6,'/9+cGLTa`R?%%)X%+6l%ncfjR#,[BQj+!C@r'<qW;qcc53#Jc0<hT+i1>ZC+hd=f>:.gK_7aLQ-#?Y%+<!BMk9M\HXZk+G."l<?\ZuHNQ.;^YP_L3%"P.07ln;*4gYFjCPJR,XM52ajeq/2:(/Lne?$o[:eaoc5dd8;0?2p/GmVAC/q^:e_MKa$$8lom0+NH+p!@i@prhRXX/a%7&FdSja%)kc\2]#%WC3a8#r,&9!ubaKNklq([1R3]f-E>C!aAaP7Ul8Mst5.AgMRp4oda'u4;+4'Cj1K@/+Ho]c)10$WRY"8dYT.>CT:S71;%E+SL[r?2V]^5pOX:+mDBid@__SHkF>O#1_e9o6<jeN>jnBIr3oL:!81>Wt(AV/RpH7&lZ"R>GTM>YZT3FbcGW7^p<(EcfJj3#TN2%=j+$0h:n&Q9_sQkcE?JAD">Q(MqdIaakUJ5>2S]0%:chR]0CY[$rH$7q!1@X>3G*'H/bTT6,%MlB@$@c.7*M8SCH0m5Y0(BckV<.%PSL@)2tp]>HbXfRmZXF?YH(93*=n?loNq\qj=JgsB_!hO'K^&*L8_0qZbJ`e8I!,MjVg;d2E=WaDb.>]TrL"LKIh$saC5@WITH.c%/&UB?bAN'Nh>?a0S_F#tX*_'pl2"uFHWK>R.J"jqpK-PGQPti`>dE@jI$rOCo0"?6>dDs7e,$\Gir+aP&mC__2nXJ>1mXS&p/iBm%mmD29Q^F#M+QLaVL]tc4h*NnYcgR'EMS8)oh(ejlKU*^\F.Z'QI9BF/ZKTci.Il#WPai!]j_Mpce+dOO?^8?RPua`&#N5#c"7B1E%-\mWS`l-^#/*!]^Qqp0N_NWMoZ\9)jRi1K6Unt2RcS)c2dUuqgW_;USal/2L=d>sj<qJkrl9"_E/kC=';[^_hH6W]GeTXs6Br>in%7m]mG5lgC?V]m:Xbna\7Xih28LN7N?V((B/.NQ:o:;A@M>rgLK-'JmH*;=nkK=8lPQ@-P2>4i48SZPpX@+O)$/!JB6j5-/Djl8XI%78YOubC/p5[>II\D.ZU/BgZpJg!D-WF!/dUkGBHfV)D8c+*I,`J*s/ZII8Y76TER=RWaVLRWjebc'5R\BVV)=Wk-R(Q/UG\&nXPD%$_8jX3X5KMp^35k`,\mFV5\nrVGFJ(nrCV_?_S-K%#L;,QgWt6[s3bbkR4@Dm/:@F.aZl:>uc`YcBeT2$D$QYN@WBd_(T;*]40Aa%-!F=*7mEbA1i:"#T*\%FoJ2!0=7.Ffd8F%!mugnF6l.OPZ0[dA3lt9$LFJ:RmdE%Sh=5oBZ!X4)GVlB-fUZNXOt%<sjdI'qdjf"m%>'2PmSJ>LuQ4)B[]2s)4SC*_IbZeGg(hSi=I2ecKO8=Hsb'GM6Z(p8Xqgr.Yqig5VO?m0QfM>l<;0A-dFdp1;:!?[uod+6Z,0'sM%&cEbkCh8!PDhA27a79<`HPUYW7DW[t31cjR1rT[>OIV?s2u*0Ar%+pqMUASdiR1?crWMk?l6YUE*<$X>5@s\>?8($)SEX\=e$+)7%b5KH"SVEO0Em@h_OjCn/2Ep\GGg\$$$^]H-pjV*/`$epk7l]e*(X1&jA\sPJ[r33Bk\7Rs=]s4MY(#3-,5J9Y2g':HlpK*Y[4]9t%'m7"C*mCD?P>3Df0=s@N.l=QZ:d]udAYrGDUllom=r+GGp0]rKp)@_Dh$V2#XkLUudE&mCLPf?[f__T&oVGV4.P!4)nH>V(WO'Eb%2mnV?>]b=FcKnWEPOXa)Ft<BP$Z60s41ULWhj4+H\[)>P"7ZN5RXU,<N8'#k8QDRBi`K3uGCbb+%J)00<5)W4j7A=No@*E\_:+\+%qX.DIgZ+Lg%(b0:A9-nV1[%6Hd.fVCjV`/.aV2di/'jmSb8)'PLTWal%WA@@,)<=>cr:4?YkZ5aTe"H^'5sn0T0q3pW0or<QRt0h%%UF>aSWWe-<XrD\#$i^6GDmM&rO:Pj]$gJu+`cc^9/Ge[roEX#jPmPUa1(/"Dgr1CE@0'&o$3%i19FWHe4-uOIkN,+Mt<dVR4+Cc%)nC!l5h=DRmi8:el.sRTp7lIF^N=Qo*beXi:[N7i9fc?TTCLHp_%(@_i[O+Af7)Bm*/@O>I;G^U]Pr9""BF(JV)V1Ka7WH%eA1"V%Ossrt*s[%n9(5fK18cn<#5F3/b*oFc061!%ZB<$,&u\8."j+%ENgHY5F;ss-m<H37PhLYa<=K*D\Y=f"DI[&ODojq<-BRRPnCja?%-/#CgkHB'fJ3/ZBS!=GFE\di(j]]2MDS/;Kkn'qMIO1`!?"fE4-^2$GWCmtchRqL4k&uG(dn2'dVp93*054\GSrcrmQi6WKoT8.E%c3bPHhX<Wea^ruDW"UE5=OF-4(16m&B7Zm9=HT%18F<FKa-VXn)E$OX,W?kG"b\sMkfLf-9#iuQOBSSGn<`[Y_FZ%X=)Iuc*mC,k%po;'YSZE(&FT2R,nI<WtWC@:9SW:unmi[QV=a;GOkrXf33\-)f*slF;3A[F?XQ1jAkXG20KeNqT1618Kg@&kGbkf@u\O+Baa/UT@%]sYHZbauo]9D^:Gk0)k/OmX@d-'<<3j5*:qrtrQ-lQ:Uh\\$XQdBCjhEVK(i`a6A/p:NUZEVM-j5)k`lo6s!N85ZDB&3I8M/^4r)%X#0WgJJ>RZ]Pepf0Iq"%&XT/c6B5=9-1DmrP\DaP;#-;&C-h[0n['@*F5-NBMa:LN.4qimP$\X^hC2*Y)iue=Q9'^;;-V#;q69_J%fA92T,c9A?c)a,&@S$5gELP_CCc[/]<'5$k$Jdc]&fBQ;H82Kk-@\YG8u/d&GfqLPh3:S^T:$'_YnB/.kE.3P:4G""7j^*iZq&-L%+()0]hsP_L)39`'Is$&u9k,EE2@\c1i<Z0PoGmbYK?8@KC,<4VHZi'f`q@MqO%c[5lN(^5"(E:O]VkCB&i"c)6S%ZIUbbmRkN@ie%OYK#g5`B&-4X\9Z:T*EE$s--EePaXnpNkLTe0g#-fiX\,Mm&#D9\S:8Tnjjn_Rpf7WRFWT\$+G\;ri]O`i2<uRi<'j>9s_qg]2L0%"$^?3]c8q(qH._cE%5(2:gVu!mtN,(+7e]ONRu@sX321-3LR_dSY3bn3#)+-<+g3LhH\?#lG;rp?,$7ml$U!M5Q<##i@;T,2HE#3%&I!S:M<pB&I(8,[<(G&cbDY[Rdb&+%iPs(WXI'N")k=i(JUBF5+$%H!1HB(\q/FIePKnt'8&NNnLF[Zs@']TI[G6_N8`dj$D6\\.%SW1?"Mau#.S!58inZX\o18A&SM2=?r'GEKgpQ+$<Vq49A/QRg`*8"'L=c6-pGXXi,B4.DLSB,2HXE$PeDikqmn:MsWO^(uS&1^="%d.`f.2E\_@B1%8NAA\fhB"^>HKi&:HAjiJ_0R;Jr"?&BBqQ*Am!ZN0ic\DDP3:K'p)q#V<<2e8IIgqeBWQKrAeuS"I&rD]C)($?b%XW-]+6?[VM26F_LCNNU)m5iTdaM-4bS+@mZo#5dq&$TfX:L'<!!ZPQD(M>?/SWRY_=%X[=QB>oXHXiNtK^I@hZ$h%jTf%[ce.357%8Gt69N78@Ob"2J-r>Ff#Q^6T/g?="j3YekQClm&G#^$=bR\LGdYl"L%aG,,BE+q<jA@>7p<&bKEP8DV&a],bY`dUq/9cYAlDJ6fH%8?$PCm)fX1_Vl5u<&.]mN7Y#-E/@Y)E2Mm`WGlSO=J`76%=UdVOsi$A:G,4d)Xg,iZp&ZeS^<"(gf7*C@#da^6<#)5f5_of*)24A%BFO'q//0.9^T;oI);kT7pc:)!%nhqqVg,O`i:2mQYEOhX@3,odRI'I*n1Uf]jcZt*""nTHrAh95oBp.(l0-mQeFGEigXPf;G\`0F%Qjru\(cB=jURq7a^Rh1LprfY5c2A+LJYJV'ID)<b1/jKg9-o+2](V(c3%phr6u/36<oa+jZU`ITb*(R!b9jou#$lW;r-XjBI7n3_%h)i9_qHT9Op8KUrmB?'h],tr$$J$-NHXOTN3@c$?]IXk7r?13Ub9X^Uqpe;l@Q"C+mJ$Qp^!^`&gMof>*?k2tEJC$l*F!Fh"qC"V%hnO?K'if,jOC?c6M?hs?qL2C'.&t,_.^$hD-nC:d4'O[XVgGp3<B03le$$s`9b0>qgPXMapht0tju5Jp?`/(^T\[)hl^Pb74Gk-U%pU@8cD[6""s,qIOO&"b%I<h,U7$X*N:-<3Wf(uiDMQ8"&#e<ZFYf7,LEpeG6*%Jb',dh9'G!"`-b.G!Y<:jt)fG;b,.%4+=#p)+M%DgTh]bp-2NbF;E#VTM:Va]7uMD%;T"Y)'!2$OO@EM<h3I6nZ5&5hZT)H4d]=lSIh?jjmBK@=85n%9,iDjiC>k;P@0#E;d<3;mHX.%QHTe^/^:09bGEDToT#222j>CrjD;E?>e1?`-BLrg[l!,?HpZM.Gp]WPQcWgf9d'%I`,"`3M*-W2]"D9/dl0IYCqAmbKT)*h2r'6P%C,TAtFuHhOY+0Gh?.$p<A@(Oko$b`kHUc,Sb>SfWEYHI6VG$B\aJBjFY/1ItFEu#'D;s5jGuMku2Eub/]"D:Z5##bXCq;ajeF`B.%-CZW+rt6>a;V?/;\TBhhKu_E7bNl0+IcXDZF9=6UO_hVA>e2XE2Gc+Za4TV/FEuIdrKW9Mc5J.$0%GNsV)*8;Tt;.<QTN<cdjO_)%ZK^pt98'0!a_\O4lZKMdFSRj?PKp$U4C9G(9p^VD^.ju.2I.@ZC(npjbL7ZAp%\Hi%7')lpU$&@!(D=@!JP_J-IU^D(#lnbdslFC%S4GT#fhLPR(MXa"W)omp1c*2`1JYWp4Sl,g9Q-<QRN2u9R6:#S?49jc.[%TN$M@^1:26o<<*eIIMQ=o0/G31h8u)Iro?(2BSd$li%<l1(qC=i><[)fmS9:51/HWc748QCD[XK-U.Y$XpH)QH,l46'&#Eg;$R13\/sjXT's%pS0K[smG37(T)L"RhCIc7*iob(<N&m`MQR%P^06_.s"eU;)A[:%?;DG;!&7Vd_J1nA!a_Vc$cX7H1WSU)aDJ,=/;5oE1g7XZZ)NVL)#kY.tf=aapS1j2OB2b2F"hj21*O<C8fe&%!rA]U:E.V?*r(Trl@onVq.D!okc/1/%a6Sj6&1_@U_YE+82;0P"B-i0hmE@j)*-H<:XhKE5Rc>TTo+jkU^%Cj]*csMHe/phL8(gt%(Cdcr4k+1ISG>,eYdms"j8<0%X"\9Q$Pd8PX3f2fq4'bu022R2`O3h39]6>@?0JA9YaOq%30?"R[Ia>EhoGI)Hkh`(RoCP@b_q/-%Ya$OB;0i/Vak"SUh\Xb'/;p4IH&NW/GcSfWm!4nA@1;g+HUQCI>:Hb#eO*@klsADrFNZ-OS))7;Fh.eIIc%cX,A03#Y>0'4[ZX%5%WjgO6cNIP\i-r\K<mA>MQ.@^lUai>PW==2f(#%Oih!iVO6rkEDDke;'<B]iY&X0252^flEH9P2/KtAMo<f^AA/hchdbLe,PZ5)fI%WK^IIT;]D#hT0N#l31=)PNZXUKtCO=r/e05gu[(5rR-1r?_P>B`E1<HrNoq*>kGgbXF<$>`-4^K:2U=p7o46"U@Vg[`*,`B'1f44%Vj@c)CTG3k`VkbUbu.k`mUm1.SBH2/:-#c8^j\nY2%#M6[%?'fAL$?Hk?UK^%Wg(_B1%91_1nre[*QEp3L6/S<0EEN3`g-S6B2M;%`l*cThJ=k#([>g'_,tNg%$eh3MQpPeFsZP;;3_4:R2b1F#G.tDQD?5EQc)9jZ:hh;,NQA;Ilq&_.#(<,7`h]*ea0WkDL&c_*CE`4%,2GfO*qT%Z>39D,=]E)iUQ4"Ei)-S?j1>5p2aA%VXMZ$==RImk%Ml%8j-P*\4hC9J=.JqG36.;]1q;>9N.icF*YQ(&iO-;RSFNE?%LGYj,Ki\e%:=2F4hndgjanbh5L%impjRJe2n&aq1=!t_io'nK"qVU?,V)^^#>tW^WRk)d>MtU2Q[-o2Ek\g*Cqps7U;g$aT:@IXY%(6uGRXZ4?S)frmI\)Q1-CO83h>;0`0n,A=Dn>%H=mi)dPm!^GYDeI3G*cu%mF0#Vk-K3eX*Sc(bUo$G5OU1qiP5G"AWED_FSXR"^%nER5+$.&XZnFXW8D'Je^Bm@V-ItZ[N<oK_&p=JK\F@.i7D<>m#kd5$MAm(N`CUJ-.:A<qpH\Soo9>gXI0/tM_,Ig^]dMEELHReI%%Q[&Z12jK&AGFiN:hsTmF<eY_)RI9_%a&<^VG4&*XB8g=5C[P+^($!`O9685&.3e1<b5B1rpN*(ObJGV#*aE>qK:"1<hU@UfI,,RL%R#4!O`VD_oX+mu!;p'B8D"#3U./.K0<f*\8DIo-I#6Vh9c'MT=,jHpCgFEb"X0?a#(>G<!.Klk);6E-fC=K>l`<pi^Y_5kG3a8&s%qXCN):iTYb;eca#Qg1Q#K;tO(:9!]YUN/ThOAf%S>'X+(hB(h"`b*0>n^:-$>S[+&LT[%c]MtC<?.fIp26gtnDd/(o>Pc3F"U"OE%H+Ll@#2Jcc:#I>Oj/#s)]69]T[fLYnQ$9@>`qCs)lmT.>a*e.1LoHmt2UH2)B>m_O<W$?pXP*T^ijM@YGL/!ORaW>d+6=B_7c$n1%_<%j$=1Iom_Hh0*S2C->i[p)$.bfB#rZPNi2,dd[gUPlX5]FFnnC<4*I3`YS?Ui^0]nQc*a@*>[^%>UYaR:,8%"<M2L`EIh$B*t>%8XqFqaNSp4j?"E]NMi\=Ed'QYI;Hu(_#$KqEf(9]U)gn7bW?P$3VWF2&48`hA+SItU9d-cFS`:Yb;q^;YM_P``WkPq%'dnOS')Bu%2Q34m:`+!@ME:&r(G=8KHY^ANb32uY<HA-F]gG]E`K1i-Eidk9Z2grf!#h#MKIjp=3Iiu0\M@%u@+?74b#QXme)%+c!6Xo0Le\.b%!ERGGXI*QtN/gLjJ0hCf=3(HERKEg7H1WZ'oTY6^L31F3s!COG.,Ws?Cm-9iLR0F#^Schu>b`"pdp@`XZm]9I7CEL=jXZX,P:XjX%1[fJdZ(cV<lhb=Qns*;"RT*.ude]5=']ht`.Jn-Y3[-u9B0^2cfC_d@\_4!3,JO\QWTuK`-J*pV,#Hg.;K"pf=7rU4D*+]!?_o`Y%Z0V7c4eKOE:aL8_L3OYPN4OK#%eWor91>b>;:i!6Yt7@=NF1;@>[]:A+<%ho?d<\OWd[B#V.&]dQ1&7cP!aG4?,,s,#tc8RY$ZHS%^ZlP!b3Snh0??,l`iA?kCfC/1k2Y"b.uuY?c:K#=iTtA\5H2JZ?.Z8.[r$+?=_Z`C;C%N7TW1oAYM@VbUS,Z,lXsTeL\4-;a#AIm%qe1-NEdQ2(hRN7RWa2RE];1U=-B\'UrK^sFodd62LYK:0eFf#A=A[PoI"u7&\piaBOj*\9W9^@BQ<Y.kETO]Qr>&$.Y1\8l5[D.q%Md_aa4ap\Onr'[+>gX/KqW4PF-MmUap%YQD%M,Y]2sr1;WZL%clM?brn^Xp*>((PlWoQ;W7b`r.f.Z%WY,_>07N&b>?\T"GY:GZr%Pr;$XL)=M"\pic8boB/+J\$;gV,dJKXN*8/O@F^_^9Q?FVlJXqp%X9IV$gUJkca;2>UdB\=4nC47]l!saVKS1r<?dr<j(ai/e'=D%V%%\KU0Pr7e(El,rGq%3<:q4'eY[.g^JXT/LTB`Bf#pp;1A1DHRFYC(nVrkD0;N0/?,+m[nSlV>3E?$4Hoo$GY$WqV?<+a\%t+&]%IRS"e;NVc5Uq2$:JPIs]II+Oo.?*q"ouhb"DM5TM6i/H*Wp<a&Y+.a_^[eCR6UqY&eFb=n%+B65oX]M5MIGpIiWs]*b,bB(gl)Z2%&6i&_:S3n^f(CPS#;46'*O;hTGu_UOG=`NBkS8G0qQjrFpiA]+^[f8c08jn9\phVR".gVNdaC6!^34uA\eUhE`[uMT<4d=UN+5qZ%Q(Q6)])r-'dqO`p)4/nYqll6.rgBf$gI#](0uQC49-h_#Lfs?Dg'Kr!Q7-e2Sk$t&&+40g>9DE\9G-pT<]3!QD0.h"Sb9D.YK(]_%1H2!d27mU?:G&pahG$#2#Hnpc?EL@`Y!)28>s*N-CY%3cF6d#an^^WSqs2ksf$;_"^9no_J$sMbIlaoB06Co8XFl;7^3+DcADK<E%lh&snR_AN.*UVRqXeXX;pT4s%:,f;YD_GI#?[Icnf#`j3)sdC<rf$OKdC8pHkKWR6Vu,grd-7t\]]e.Qp-*]hh6-ck\@^.Zbj>8\%hP5K*AuArWY0T)d>][?]GOObEqmH;[SX&RINd(&+pA;[@2#[F8g%+/"mCh2\GE5qDU.tl^IGXh+[2eTupkuRkE>rV1b>XsiY:DDI%04++R\tA<Q2=jK(0<X<6`@LC_WWXU48UC!KMiSo2YN@$eO[70=@"!MfpPr<YRjhV.ikmR5^:'W7=kiC0Cg0!qg3]B.o\l;r8Tf(;%qo-T+b?TsG>3$rHD>gljl$d>2"RKIPbJo-,')#ITHu!92$["f4>BaTK:*p2V$X^C3:`8jLQd8'CmHY9)Vrj;7dn$`lM*E&UW92sd%o#cT'5hd3WD14bobo"o&/C=\hRq_Pe7_DgKY1pSEB<OLHppR]C1ip,hp\_u<Z9PP-e7Q-bk!-U)Sj)kAF52P(+bT[h]k(V4Xnc>8%pudMK_Z'.0rO4ddn@O9*#Xrm-08Q]:3j4n>cR&D5NCJQfQfehViQC02dDtF;cPQ>tdI$eM7<?GV<n=oD4jgIaq:sc*qI+Liq8(qa%[e`Pnn8p,TJRdY^f@3UNNT;HJXM-ht5O;Rq&*E@CX7KHX]K,Q.e&;H64E>:.rNs8.r59L2_0/nu\ZiC2f"u3AMsgQ=\juc_FO9a`%ad$0`44r:i7$Aqn,J9_"^0"FAjA&]0,Ns#t)fZ`7qWGQrR;LCpkP441dB3<,rCoZGhu*Gm4<'"*b4,kr8K)0XIOGFaIbWdXh"AaJ%C,6B)hr]E)r!KmiY$XWl,(h.`3i;*lD7sP_:?m"P-0[>:Be%P[aDMNjUtahsn`n-#_Zp^eDu9rLh*-2cm,eEAQ*^I8iL?S&q6Q+u%:ET""FbnE$]:.*\Rlc&0Rug@.R'^j-Yl+cf[=j4)H1AB+o[,GoNKAXo^jfi)M>J9/InW9'kXG1R9HSTQ%ILG6!39*'!-fS#FBJUf%^\K]V*'['ti,4gdm@R0+bs-KG,65%BF!WD%5+Z9<TVXf@@sZND&j!g=UZQKJ+s)pSYij86/%mrP=9#)*^#cne,ho)s8aEPq&jDo5%Mk0c#qj[UWIiPp8JRi^`SbgKU!T"X]?0j-tZ;rSAp):fD^0"QEADp+[hq#t5k6PqWRob26oH3keO@BP5f@IfaPP6@>XZ]uI6q)1n%"j-JG%Go)bg:G0L8d`45Z2E'P38%Z$WY-@9htVZrloZL'5^]c?FWjURA.,TXI=(-r/u!dkq)5"EUb.K0.E1:>=*B=n,KJ-4r],0S%/A?Q(+EY1jNFVj:hqg8U)hq(*4I`4op3UJ#P^;=SF>.WVY]R.8dOk9JgpmAPBP+@03-4VpRiGuJS"<r5Z=BHOgh`.Vdp=^C514rE%nDBg/3j;f:regM8$q!7.gj>p1\<op_L^4dN`9.?PlGI3-_8FSWD;s]@^%8?L9Laca.<X,OYcljrQRV`'=4-;)0?&M:As:B^qOmkW%SFNBn]R=Y!]PUC;<A#U5=YJu?D._aJa$!EkU7]#TW/8b`c-JQK$u5BWkQe_^dY&ETjM$HHc_Ti^`suE=g+tTc:+%?p+Fen<Ht>%I%jKV=-'+<O\*Y^bQZ'``s2="7(mC-V,'%<?MQ:rr1jr/6!*O0D87Hu=X-EDTiCc2u@NKG`4pI.V_s1H+7)f^#qVJ%2T$5W85m!aYJ%QsVPYR!CO]?$5\i8NOZ9+^ae$&?c*NTsZ@)bV,7-Tf,h5$h9PP(sCk3K53:'0#K1&^b"is(g@nDLoSLlV$]A[>sl"Ec3X1-h]ska%Un/?qQ?I8/Pnppk,XW141Sr8"7:'i,>-9CnPIb`Um\qX@V^F\nQi?/qqO];&N7@=f)&/p:0.j""\X`Z^9)>/\@]jZ<`7(kCUijds%+Xkrc50O<VSCe.&^AYK_ZZUHe42soXbKe6$o-IEWK]`*<qhreR"q,C_4a8q<<!%2N8:Q7fa]e3t<jD-lldIcjF*1?[%Zg@6dm'HW%Mgp3C[TJ0QFmhP@oNg_rhk'gHqV<[?O!PHFZ>RDBT,,Wm2J,_W%nl$qL\A:XTjdrioC3@iK9[?dq>Q:ZlDHT4iiq.iSSi2pU=#?g%W&+CiZMDE*.X:0:[]A7m'^/Nio3`B!pI;fiA=n=?d=&c6'MV>@D+K5%b?@$bG@oIhi&Q;=&5CH%%J95:@bGUj4b(ZTjAuB0mFeD`%[^$RT(KXob>_;_-$`hO?%otPshD`A$f)5KfEioma[[,qKDbhHY8,#rN$QjJd\&aA]N#OHl%nGHY%,Yp!dop(eQI2hJEj,@RnaKs7%=?H034:AoqcS=*7o:HMi,UFO^G-o9a4WuXprpK]I;8CWNK0_E@k4?V)6QZH-4.DjKfRa8bce_8MHLpFKOak"?r/D^rcIRC76lQ5:%7TWY4`?K/I1:k'$`/D%ralr$donENbI58Ap^M[5LXlo$8ci2h0=r>4r4UQ#;&OfQ!?eN3+C3ABV/q.-^e<an\CFd_;f_4:KH$d0P%C;"Qa]=6HW]=Vt:o]iLMQ"L=@04%'GB'ZOHhP0.ErajB5B86B].CfBLB_hOK48e#?k9c=tpMd6[ZZC9]fBN/+fC,:o>Iq)S5($f]%7@X%smmp[?gj&fe+>1]mc;s!npW<<hqW<i`kOSG^rQ!1-+4fscf#F5nIK(6Ek&VB!r.*PbW?l3S?u#+TG=fI2FtD-.iQ<WoF@jgF%3XMGCc+JbRV*,,t=!+diDsP=;n"\U\e!8e,k$m\JY,lP%c^tjBouj6t%c>$Hp,r-LAhj!$5M;(cn"4NGI<k;Wg@+pj]?^9Cimprh%<,JMt8N"dR<L]t6;N5`mM9+[+-e13>'^\Q4PA6V/$N>Qj-e13>'^\Q8OYV,dGbbaj6mYl5jW6oOSSBtBkL3s:-e]BsI&b9]RO]nm%4Yo5mbLlP1dGH%ZI(Ib>IDWY3H.UhuS'1M/Y"5u;'_q6&*e]1Q+m#3B0:>`T'@57WDnK6)^m<1^DJ\]cQ3WUlcZ.VJqVs<$5CU*b%35.D$i,RYadf(hBK/fI[pqm23>^LGSW2#Bdn<(58qJj%A3VO#JjM;X(+SlWH?n]e(Jp$s*hIPr^LU6m.@Tp\*>m*C*=r+cUoIXln%hHr"M=Cc2SX^=f[ChKRELefGu,RPI8k47\(G&ds_I[t<Q+E-C-034YTMlbY>Ha3-h=GCr[+YQlf%guFfAA))j4tN[=9[J]_BCAKs%_Z[YTGs3e.)`/Ec<h9h[Bl'MMX?7R?mE:0r=F!)eg<?A+=F!(]ks:`1(FsD6=l76o?E?7g1<([+`QId\,oE,9(G!ge-2_D>oO?qX%YS%sgO;EgtJIu0X\C2;3Gr26fN_tOM*f[+]f4KbX*f[+]'9*I]4;q'C(O*3NSOXp)j>>"%0@'c#o(5RGs--+cN"'kHNNJAe.(4/_%dF\pRU?$<tG:PY3o&!Lil?]pk_h`6na1L1[Fr3@f)si8qT5<>RS*ls'bR?cI>.qOP2"4;l><acYG+3tbSXNh#s0:cPpbRlp[M.13%hktu!JF9#[k.#9aT!.UG&pCSOXOGq:39skWDjm4]oi6N+^>;##YutG9Mmb"_p0iB0An.B.C\h`d5,]-`iCV:o5GS7,r)`9GraXL9%euZIXcXkALPPP!/rpc0NneV?+<VPd^l^tpqolGMk?aK.(&VlKUpKXm6#$t-@-CE8d>sGE;N_P"s<?r.1D$3-EfDda4=[Bs1!ZI-r%$@LGOLsp<[gF#PIL`J.K]5cK-*QtUXeSL#TMZ^b2qN:aYM!oXbh2T:+B?.fXg[J[@$m:iX#Q.lSY[WO)Ms)gVO&eQao6cm/Km&-@%ieABTZ6q/En=<3N%dfXuMnRcBe#XLN(PDq])klBAbh]d;KsAmafF<4Uk;`u!YXAE8VUi3=2uJ2,`PYh8^)&`FaE"hFB3RKe:TO(l%d8LT:6/D5t_Q\YQGmuEGj8,C:*Oq*UojYe&72%#4>nIJefE#F:Bm?cq1(8XY&u&r8\"O>"9Cq^gq&Tte7"h\CS6`e-rMV='&QN^@%U9Gq@=GeNrNU''`&#$n$W:+MV3K`babT]1;1<B%AR(N(O(n58!grOZ,4D7M2"/<kh&><N5eF9RW7-#![D(M,0!d**R.)uMuft`B`%hpJgJaCE`hT%J3S"&j8"VOm,s@'XfXf-<i5M!U5<EsS!%/&=?QD`1>9ZFH1ULg5]9*q?'G;pTn,87JqM:[BMN#D*fK-usQ2"2Z])%UZ99V6X8M[ic)P"7"caT#X@#QLe8;474W$A%/iFV>W6&l3(0+ITIE+p4iiE`/]VHo#^h2XSL>&2^m?lO9;,\rV$5cpU&n[qP.I;X%&s\6W_t/_@p\5sW.*M,u7_8Z;-S>f/!O4bBl(5V2).5tASdhQDl<V1,O'k?Y*ppXXZCZj)3ar.Sa90ZEqiN*#R'G]cidieFIN1?h%1IL*rJC&[h;ZI-[83fMb`tWp9iEG$Kg[HqH5i[Vpa@'Ic?82lD:Me,MinI/.`)eka!SA^(8_iYfl=-3Jk?AKH[Nt)ojmNhk=Mu\J%<L76Tk=(@YU5c`rq;G^fJ;#-YW?#(dDEu8a<W`>aDh(-(Vhk,:ej-Il#"s7fb?T!X!1Eq"6f*Njc&gRt"G?s""tqigj9!PF@j21^%PiYGE62Zc5S44Js#CuSH.)p<6f8bBl%Q9ZX80(61,K^\0#54E.*1O_7_6T4N,4Q\@&U]6"iWp`e(l"p'>[k;\;_h38'JLt+,aVXt%H6h.RpQ/uUfXF#tJ'SqjQl#tD6..fcka]`t>6Lo=g6*tB?<BP7JRCLPZa!*un7dNX>`6&SN-?dmpdCd-LY0+sc$!AcS/\^T1,BLs%6p++H16[@J"NVm2f)`*\-9#*8c%]BQM3sZ%e;(J?H,<\qMoGH,8D_2V705frUs5VX,a=/S!h]:F@"Fo4-Q5"ZKuFY%LY-%hC-Hb_%R62Hd68B.l60dDK@L5F!&u+t766?"q1,#kOgsPXaoHN@6/4eZXWV6CN+o+^(-5,sga<UstP/KZ2Lr4GNfKIP)M<9@Ml%"h(b@V&%%':g$Q;pK#a<sFU1k_Gf[RY,Ghl$C9B;Pg$hOWM=$MG%?MMI;Rca,``<(^;PRBLa%S4ush'H9[=*i2A`=*S06HgjK(\#M+TLocW"e%:BD_?lA4$T14'[Yq$p7&.2#%:QHqB$7jOS;OET*I*J:Xb$R*VopE8q@qfJ^FFM8CgFR7b):oZkr6jk!*B=/$C%Z[@"\=m,fBJ%j^%g/ZjE;@Oi8_kL.W&T*KiJ>VRL[+?S>_AHo"FURFGo=sPirH\S^p0=2Zn*r*M.m?OPdV&nBiffa)+9K&@i'^q%C,,]Wa.2=V^pf+<%@rN?0Lm["p;s3TfOc.#g#DCIp2#s^J;U>Ej*g5)E@j`BhkX]fWHVR+6E30<N(dMbJ'!\f+@MU+JLr+u(TKj(GP$"q?&cb3#eV?ml%LQM7c0cmT]L>KtnK&eN>#hq\e&*&a[JT#g]`.]@r9U#)MU3bR(cGu.nE<r*i+V61#6=<1>m%]M(!u33iWt9piOpE)l:Y>Nj'f=j1%1r0Y83s.a3-Q,s_rUj[e%K0a)X:l/dL*4DM`tgBoW50Z8#69N5bIq"9#a2&*qn2/cq$q,Q0h*@\iq`?t&8_[qH6rKA$CO^A:_(lE%kYV<SKP6b;,QQ*i+>#hY5\(fNLK#q6Tt_-C8R1:LN^;k3$?-h9LprEf4rnWc&m9T[P2mASCJ6Q'@+dqcQ4R#kbXL/E,.A,AN'Zqu%-]o>gTn*4ua\@A+6pV8+HF$l7MO;s"lKK!/0cLCMF,9TWD^=5B)"^99Hq]4&b:j03`A!I!&k5L(/RWDA5[[b:",ODg-:6ionJSYn%Llca&^_g2s_T7L++gte+$R-i;'h%9>IOp>;FaB`)&=*SsC&gp-W)jIN#(k3!)DGHC0o6d<fWhYaQr^>N)atfID&S*cKbPf:(j@E2%(q?=3aMGS&KJdi=3X1Xj:^k>6r)cQP12TQroT_iY$>BR*KldBqm"Z/7&hT4D&Fa'ALb]U2%c[l8R8:3Da$F?9&&Z/e%m_b,O)#12%/YVZ$aUIDF-`p4t+9Wf)/*K-Pm9%He!-A;aTbE%bT&d#uHkcEFT1%L!m5f;l?q6BbX9]&2"S9NDk)2S<$3AfC0EJ!%ZICctKY!9"%`/Xi%lG^%N!f$pZ8L#:5OD+6*&GZ$V"C2<#'`o@^_t\r:cNa_l)r^j%._RN8/]_![ZcA#Xj2R(4&a]*%#Sl>EJhfr7kOTi5KJ3RW%jpn*8ZJ]+]i/"/ZNZFf5iifLECj@MB!X;REjMqLdK\;G=J3bJ+M+\M9bjqF.^cm:""kcEb+N\3W!9+Y64N^/&9NgkJ(G[YkSjbV9%TN2W71;m'1B/aYZ$kW:]rCDPb'nmp"/R#EeBq]I8S:C`/q#o/.SnR5i#%bVeEeX;X8;nVA+B$&^Vm6]uk<k7&b\'oZ&eF?!5dY>_%?ppK[jDc^%@?)RrPWg<Dc%/.d.2Z.u9r,lc$*g.VFi++fci?IJ9SY6DQ.:3%A@P>l^^H/+#tLjZ#kM3*9-@!N/GiDuO;nXs@@2'?%d0b\J/N7YS-'6%cPe`MF#^rtJdI&.*Y$fA,VE;l(>bNQZGE>2:8b\5XG7_.rG*;)"U9hXXUa[m3;E@ZaV4\3?&8=.j-e34u%\dCq%BX/(k&?4W;&A*ZYL^eMl::Z"5.ES<)'6b#0%+5atG>Lj-mKQG/*>HA8A918OK0kA"[]U$_O=aa&L-#[8QsE*oG7Y/F`#08!<j?-q%KDP>HJhngj(--hQ3F=R@a.XTN%;\\9!N%#8/$e."eCHY]6B=9Bd\N56+>s[Y.'S88p]a&5ZB<"hn0!ggAkaQ@1QVU5'?W9-*GS7.%Ko*^!3'DioB,cj?RR.-K(FRLh#aUWh\4;?3!lpKg'L=9F@YY:T$TQ]HA&Arnj/:O&q.me1ESq^@SQH`)M;ot<<>IYFmnaFI<AY.b%hLSLC>VGV'JNN3H1n@KO+]:DW`+9+.lT0l($\6k=V<]W?pac,]S3X^,^mu8'X;kol`AEfhRr1."@L$_bc8_O.P4g_6l&=OVK!]o7%Bo$)=l`nIsf^QSbJT1TSbB7W^^4RK+*/"VD0eX3-E].Ah2hXRu%S8q</"sVA)`=3$>V(Vf#J<Co3_6f5qWM7tK!=p1kGDKMkeU`K%&$/Xc@2&mRe6:O7"XK%0pX=:;37;At?<P%=gVLsg'+6gOR#>$"[_T.m)eKh,G.,hqP`6pOg2+su9aUtQPSS`co%jQdr,0Y-JF+^a%cS^+UTFrEafYbKM5SAhd#3ght!eufJUjNoY1GMT.6/p7A^a<moM:2P<5I?ZYT$K,&2k@L^iBO$h`Ej)n4r/`8Iki$!7!W\27+,@.%ndWh)8QV/Gk`EJD7mWM_qp:c_R.]/l'Ka009&)q<TuoqV-PK5[4#UAAkS(6EEE@]-iU>,gXURHIr6TVpmgB3<(A=#4OHJZ.n`K^L%A2qt-#a3nPVd+(8Bd7dZ.u.Ac6S(-dG*&oSZV8sl"EWcsL'%uj70#Q&FqWeh_2c41/!5KO?of8ZYc)=u,pa(u>aJ91,MR<ZiZ8>@%QoIBG/]-^+>c#eW^mN9:)WMIL1L7/3gc0u=-c"+A]4nGZ@_nb>Bs/&0%*^I[]flukAC.lDf7uaK1^Z0]qiI4AHXaO?hoG70ZuL1\%`t''XKMX3rH%$b.8jRKPlNaX*RZR7AOK+1RS](>VSk48>%IXhpL>5\grkV[QekH!+%fA*uqg5+@a<C.WfVmL+6j<]!1Y,X($RgQS%+-6NNR]c`*?6I:^dftc5]g*(q=Ze4r#'*9,=mS\@DBQu3K/bdF5hH,^V*MYDE00Q<CUep<mHJG,%6"i#)V8qb)^pC1*CVD9&5bn2%HA3B;O&Q=qJNu2\bFTMaqd.mMOr"uOEWB)RCD0`jSZhqK]/<<"Je8N>arpGg'mh;@UYUSOe)#`a#=&9@Kc<_]#Qj3HE,$;O"O,!)%d@oA*JTA\CQUFC-^#_[3`s'Bt3tI$l_rVP6GU8%O`8tjqF3SZgn6W\WS[_V&j)conb2X[ZJ.=Otn]T9>JI=__-)1>s%dTpqp@81b%AqM@-Xrmr`Jh%2q/i"ORokKk949<;C?i-]?FQp-P6i4(&;Sp,?S6TGaG!.<6(]\@]CKDB*`cHea(*5=PmPDY79+8k1K],BrGisTf%@X_4&K#E5\S.9$hnaVI^fN6.C^lX6\*GU^Y(#j<^C?KY:q@c4FHq9CiUsfpU#&-KDfg4Va7%9#2[d:X@WWr,k45rjC-P7"f':4Ei%$&\8/F<]%RQ(LQS&,/)W(j6*LOg.(6nE".[MW?U,.K9sX/+bA?E=,sW&;WKq<NZFZK`E(]d_4SF&-u[D810'%!k:>dK#CS"i:+bg%Znhf#&c6S-o%;mHS<.$tTo^Y6%'tBH/n#QRKK2e83*POU';pD)`kXb&KRr*eiM4Eoc,0QIqB'.nKfN`Qf+1V]i0Eq;ch%b,3+1!1%4-;c?5pU=g!aJ-Me&YJ%.)#okb]DDiNAK?)AAc4ug8C3fOIG..mhC_oA)+ZuUalZg-4jDP:.'?\QqT*U9"EsVBFD'^jfJX'o$T-R%/5L)0#aW<.Y`hoAfe_j2$%T]2XMZ>,3(UoB];@qd]20K%YV'S`=W"mSE2f?^%dr:]*;7N^K4C/<*lmd7i&J)Q^.AoS+%R_>C?*5g%A3^P`Ug_]pKOZiXpmtZ8U)XCR.Vp3gY7f9GB['IN/KBlr/tR[5olX49N$MGo364?nZjgI'7-j$94s_`T)a)j@luoZ*[!ME_+ESb@%-7'ZD_Pp)W7[SEYriX'p(ph92MHM`I7mhg;g!C"<li/ZnKFYMT)R8nmMU*e,!*^us3]i.O>>tEZW-;.!fs.Ni0P%[OU4@XtNpr/0%0j?Yi]eCR'ddYHX/a`fp)8RJD%A_uEJW00XL_[Ti<kRC73TCiXY`7$HHV*ECJuuP,7LU;KA66*%`:N&lPR$)2b`hUNB:i9RjCf_V%pJZGo7b2?g_2/@sKh9h0(!p-_Q!Ym@!.RD4Wm%S`e:2XFXdaV4a1oT!W""?fC_7+rc$N%fW\DPO%t0K0LtH96VC5[)KGD"h,&@_*%GAtZp5TF$7`;t=4=fT@R#lT9*.>1>SHkkj:5F[G4.ou(c+i"LW+Il6e3sgguml]ikplQ7qO&<]%"HWne&&&E?GSV.=KCt2RGS&EZ%1PRfrbGm)[Vk*f:&rNPg$Nr,>OViSapn!0AN=K?O[Sb&U\3Ag"35VOc5ocEH#"7[EWQtY)+Og4g?$`.Ff7>03INlIo([!$1MLEU,%#T)c]r2FE,nX/)O)&2(=X,%r[:e38c]5g#Wm>#$(J4O_^&EXW:_(T1iH%Eq`BEuSa\;4U7pRmVfLo(Mi?l&r_m"kuOS:<0@8,A.]%[Nr_<E&F:,$)>`O@J_Gi+N3;X1>Lb<-!7^r4@q@@p&ZFR^'F6)^;45$&U??-_1S'"S;+q54nCoDp'M"H%$M-&KX,+JJ3dQYcq2dt%,<^.%moJ+8!/(C-[qbYF4aML6![kY-QU;U5^:4E(*;4ftk6LTS=^$=eJ(mXp5.kS(N`I-.`AkV;Fto3[iqe6d?1'*R^/'nSn<5l\%B1b90Hs^\*)%^WoBo(i0e9<ShESCe*ODQ=e;6QH[CJ9%fq'9VO)_TR7OlUpa3t>f"Q7[J`al3ksk=6.4JT-I.p>QsjAYVL%O7(fs%5o1S(KH3#i+en2]G)^4j#b,nc1^0W'H%Om=s1#9%`F];uqFBFNQs45!i_fgsm'1IsJ#8%=o#4#Bpiu<152tLEoq^>,L-T:1)H3KY%2fe2("H3qL6QI@2#iHeVOpSGF6MaK<i.cUY%T[=RTfPTnJIbMorphWNnI^,t,ijh*`&sX[.>U>iEhRoe]&Ai!Ps@n2.^sC!,G?3r%W7(X+^;BSL17!N.(c,'oX1h`RpBjRJ+ZW'U$66n7/D'%[bBj=#U[JN6m+g,F#F9rV$egNl-qb[k6Q?L@aFtB0>mPd*_H&d=:J8i`%PbpDiE,/0@0O\L"\8hqj#Et^G/LCXcqLV3d'Ge"YPqmo8Q7u/i#7\SI;oH3.3':We6QH7E3VGs/2@ReXfMrEiPRfjlY:%X#JOc"l%)?rfagV`Uq(m\nsln3hZSq^>kK(#e,^e"<Hd,<97_eL-]VlY1kj!fdU$OV'B1Y5p+HkK^H0hc[+VZo<Befoc7-!>?l6P-He8Pg7:%5_Q>&h$KB,]cD?>&J>@8_j[pL2AYU<&jiW6GPR9H.`?N^f8*jTs(t#o!Xat80Z'>3!br`\rqijb&!K;r.1fq8L.@9r8$]J^[35B,%%Q%#u;$q?`94S@#ZqBiGi?lW)+d"alcO=V-e'c=`K-ea/C_j!c#T$@_YA:<&Lg)F*$NikHOg<*5:oN(CYiK$Ck#4>P"?d5I)tV68%(jqWg\YNUGaac@Be6X@Af-XNL6<#i'X9KL\*D%c7]EC",=$kuTW,$ReS0]rpl=)Iuh!-:!49%%*a(dPn11Df?LbfT9^kE0P1L&fJ%#\O6Kh\!A\T\5IQ[ke-Z$"EP0ja\&2P<F*RW:dHcCubAX2-FEj1b@<V*:L=G(Vl2PH,@:Z%l:XnJ"$[![Q/o<D<AGhf.j_WE<IAQ%gW\WfP2g('K\!tjP!IO0N.'82A#&kdo,M8<q5QhL`#^tJS<^A.2D/BShe32d#>kND:2=)R40;oqDY2fI_/f5f1"@gS>mRtX_A=oY%075`_\04>)%D+of@K6`\<DKRH$:<3m!QFd^\eR?'E!u16.<7O5"A6421>5mV%$[JORT77d![5J2gq6IN#CK.]?0T3P`SPk7Qn3In%o]-\hUYluS3"W3^5S+;"D4mCH&19pu[`eQL@F,FfEf1Z9I8"$*p?!<L#o:fmL8:(>.nF8XEBi@l!K^/,)uQ,6m8^A@L2i"O-4k.5%$1<Hj-^"DM%$EE`jh'_90O#tg_]4G),6:2Y1\sq>SC>hF>iZ6r$oCA)mjTJ?@:]nC\_1Lh8/R,nA7..aFZ+NLM_8.U*3P`H'J:Uj%\A6bB!(Mn`R&t>;\`,\!*Gtj!U+`I\O-i6k#W'98c*$9PpVa-mC(0.-g.;9a'-0X4VhS#L1el_jXp*41dk<92oo!d:-4hI$5SH;]%-*TeB8W]AGbMh-)SafQl'B"Z^(J`(!,V\Ii9#9^En<(>eTOHMfV:,mM-VZsAhP=/0!3i8aYN"G+&SgFE`:=mn]uH406f=[LE(uA=%FQaig1:e7H#P_#4jLV$8Xq<Mo>raYW4DA@WLb"EY"6'UD'u&/$">QU_O33.oJl@/g#;\82,;g!DI&f1Y&!jQLUg(.,XH?6s*P!q8%:Vh2`Qnc>S2@l,+(O@VB5mi2X;8r#/7;4k-+A*3Q-Ob"rF6k^lp8`u$&E?tQ]fEgGm#Ud;k'%b>&(Ot$5&XY3>Ih"\Xi';a.'M89%[s8<G)]cmgdn2l]\e'<Y,V(p\Lq3j9$1T2_i"HsTZc`BQpek?g&r[W]c>A@(&YElN%UXnLM2.9+l3iVeFq!S8Yp0I)2q@%Qe^tU6%M]T/b?#a,fY42*nYC'Eu7GiP28pDH\Bn0_FopS0)ik#bQ`L[GSCN7:LAb6eW4uc(WF)X@@+Cl/\^i^V8XaKhW45;j:mqR[%&XOK]%B#*KXMXH=Ro&/EPj(ZRP]-Wu_$d;WWGipKf8GI*D7(-3RG):2FlhSu/O!>-JP-A5Hq,&E3@NnI6fqHHk8i!6kR"L'J\N;uFlDRa2%9.t@G,=qD/@]W_KJ7Bo6h%T[[CsU&)JdA7]m=rkE+FG'K4poS(5Vsk<<aHl$W7o[Zr`qDf!235o02aHKj[9-Z-F@%\k&:=5.l-#7%*L/l$K-N_W&eO%X"2CFL'Z1NCX'n/]K#!bl/Oj8-6==6C4/=o0+F5jRdSj'B,dYe!m7]O#P$`/_&FmFfh]g*,!csHL,19VB)<Re>%`]Q(+&ohg#,<5?IU^cPH1^)GT/]3?Wd]MI+oO\$-kUD)HiA=*O8Tg9A]5Mh)C"3UB+1*Bi'KM-aVDg5H^r_'=[[Y))c:B24A%<Hb%;$\"l*;j+37j<9jL2%QY"q$.pV"dPYi,U`e*?)&!0>q:bQ6elb1rSKP4eIG'L@N]eLb09$&98p6U?Dgp@O#=p#du:G$=X;QX/B#)%$\qYL'DdBEbu'D1%Hdl9$V&<k!g,`QJ[2Uc!]/u70V8U!QoC%'#8(8nKd(N#FNlKeQ4\L<!A:u33S%<\3HXuAA`h@(n%-S52;:ro%JK6-/dq-d,#1PG%iN&p93#n\&0*]p@(Vt!:PenBu$%%3++omH%^?0GJDe&\(onEHjIP*^Hn.u\3(R^@]-+R_l6;%g*Y60DSYW<iO%Ua;@;0F[f0\J#*B)l1i%q0EM/OjFHJ^mC[=\8fm"?%uL<.fl&+LbJho*)>,9,_0Fo'L\=\lnM.:+fcI*I$\+afV&E\MTk%cRK5dk%3UV$PYfm^I+C<";^bBgLcA5!s%+ZB#WsL$WNIA%&OHLCWl3RTuX:C"T(bf'BTeQ8KW*g"hk@A-U4Kt6$9:N;?mi_75junL53hD.L%d%n786bWb=HT73U0n"NJj'%m$Tk?%pmO7m*"cZIAr5Vj"_E=PD+@qYrYk222f+E%9!V'Y>heKg1S2k8<6/]p;%ZiNgrgI9#*QY%@%OR:!=p'`_+F#+,d`c,%(9F0)`aZScX"AL6TIV+0r;]sZJpbN%-KW_Qd\?+d5NNJpd=sBbL[=VmO'EJ?2,J5Z@$8'Bipr7oJj1A_$%]-='1Wmm0Q/M&;hO6\l^<&&!Ha;I)J@%"l&A!n'B?nfF/`9pb<`\[UG5Y$VULDF$50bSu[6VG8f.12H3q'V"X9:dm[A.2V-]^00m%&6m>4OKk(,</O@8KE*AfN::DL'+7>J\71b$bQ0dD``%\HP7bpL34"_f!TP0[M0'j#Hgp`^O?QF,5gJ#h'GsMI\KX8'XXUJX!jIB>%pT0[rN+46^nL4@?]V?lA[".>8n/mA4fkfRg=r>#k_Vob[cjlEOl8N+E1rPPqq2Wqse(o;dQnYEEK8J]q$-Q'sR6'[ZFrguPc9YjI%!V;$E"qr^Z5bfZ2>SO(ZB/M*t[a5Xe/#9#Onj*qL$o/q\\WOU!@'K@_A:u`\);3a3_0A^_M<p][ElE8YaTgMaG^Q2*aE&:3M]lge%>#"?jZBB%j`H1r*Og3LEN3A++I\\-M^-Y9SR#!?D'[73!,>TE"\D(VP08t'6HBCE9(bf@&\\Xo[PmbqRK078_,)I/&[UgptaEJ6A%YXIuu3Ym2+UfA[V>aMep_T7B5.e1K.8\raH3U8]0.j?mV8A':3*muOja,aNe^b\/q4Xp7greTg1e)iN@\V!6r%%)rl7#0#ER3*d;%1n/d)Bn'N^#V<=,7Y++I!JD[l&b<_0N=t\hFWs&qQBAIt?H_o!UBA6jd.?YS@(9[MHuho?]OD&_j*.9VQ>r_I5eoSNV?T>Q[U<>A%A:&l9GbM$34B>uXHp6O!k/+Mu@.KU1<l>7GQNdRoMmb-#99XJokhn.8@?"sJ"g9aX.9$(V:aDV[,7qWS_f6E:YiJ_\UI;%u%ZHZ;%O/8*?2A_,'*fGZ%%2_(CQ4Z,D%SCRYQOWlDOl6s^DmZY'BbINZ$gGYX7*Q+=n.(5J)DGAX'=#`/,r!V'_2,7IpimX6;sR]/J7(<F%OdDB@!b*DJRN\Dm6gl8!,6TJ':P0)"W-ujAjiMdmn<k_aI>/g)LL+_.'[/O$oXB+Me6!$A"?:f)jrb;DCQ=<d+ZiBlQNNGD)U%[H%d1esYU60h:K<E<?#Xf==62Ek[89,[q+R)`p3ms0i%qisbk`3^l9NpuPF-1D5PX+k[)PlPl4%eY+?(H#](r'bIN5q!(`J.QS3,ZdG%'.[/eP%eTc<;gnlaa'`&1/BboQJ`J5b)8\*6dem7dA(E;Srr:dR<7?7d[h=%0Nai0@Sh"\M2-'Z!gXtH0*;ajT,N.r`6jJ^7qG=<%[\%'7P,1V4YqZ=]UnZ5`AE^`KZ8s!f9`-Xa@eaLIR))/:q1H'>RD9HmN2PM6e%Q]qG=X;Od2nm?YsTm-TcDi-(bf>AY^IlZ%1J%N%SeIJG089?e=B=:G$&(qJU>sI/!r$-pHCR*b^d8XW%BCA7Cp$Q33TOiO3++iLLhFa2B-rUWT7Id]I.^lN!f>F]+pKS6H6ITle=8p+%Y9RCR!JK?k'(9CdHo45EIN/tRQuQplbX0$@_8Mnc(,q\2kj+#Ei9Z"8C^'`#)PZOP*c=KePDC,$%lA[3@F1A2re65nE5A0nT_X^<%pj=ndXH0"C0j;O?m1_^g&nF74i;lMu-XjXHBf@q8&Rug'Vqj=^5*/s,JHQ:AY;tU6gM$9[eTG^Z[cH*2$gJi1ja_2]8>W+Ujl?+i%#")hr_$7ZB6d;%(TrZpi2`CY^mteBY<bUrla,8;GlE57=JJWuh;iQ^MlZAa(Jd<qI8/gq.S6RR/@j[@K*[H9[eoSVFYh;E"`skDl%%MG-Q!rF*:[s%=TL_OFNT$.YP*N"b6C^W#B)?OrE^_"d`3nhVe+abEr\T\u#mdWQD?QJD/;JN(HpOa'B";(8CHfFA950429+:rRG%V65H#AN*Z/^gP5,Yo@4mR%E4_ijPlTA..IN^[%^YPqks'7@4c`jKp@2X@MhGl=,W/0Za$*6Z$H*Tg,,r@XS`TH0>VFM-.`"l>X(t%V0*IrNEQNU^D[Utij#V'G_A=rG`Z5TWrZQsD<o793NuA\3#,meb[rL66?2sJJR'TuU*bm)/O3]h-)omYM[W+/o+"faZOJo?.MHO?%e7Qq%M%o!!_!_E<3"$`f:7((&J/m>BNYjkH3;C$4<@sgL("(,rUmrKMd4K_c&P-J<M&FjAl/IJR-]kr]hp#9S\-ZR)hRAf,2k?HS%=_b*7eAR$+6kF4aNQ^m<?2ru[%VfO9FIhJqT/QSB.DZL&bWjg%FPFj*rV\\uG4&fDh:hXkfqh'g7SZ+*aRbGUAK6S0R(cL/)K]*P%'*fHO&@,#lLH)GZH\#@tBqab4B`S6dJCCcbDWR_05:uF:=[/AtTK<eNO_b/@!USQt]p!f/\JcGbS>VDCAK+IPCnKgec>g'rTF?MC%O"Ij2i\sV1W;;+Z1f"Ubp=N7`!l]-rlcpk6Or+fKfXkV;<oL[ip's/2MpJ"1PlZa\V+23J*mNU!@5g>9%eC!NOF.F-/u.dV[hA;7%C"UOH#@KN*hO08nO:J=.(=GYD"uZkFG)rM_s&6BIje/=%%QQW$%g\>=$F3fFZ=VW*-N3=f3LPZg1Nk`8Zt%j)gR(Sa>';#,+qGe#%@-NeakuN5eoJ"0RS4*9?&-O7?Q'Z]&g9*I8GM(/f+mfjjnL/mP_G&.kWb5KZM99;MFpk>o>80d>'/:]@3ah66;NN'C#n/-hb?MT;%;%A_%_tgIg8IDhb]j"d/rK)ImI*a'>]%a;W?&VV05V2m"TdZO:W`uPej8ZV#''[k7/sm_p`X@2(GZn-!,Qq^fP&mGaJ>8s]3Fo[J%OM,2.9sthd=fM-X<a>#sNe(FN$YK<mL>fij[I*$@ab:0QOnsSZJ*-DG6VB:Q>!'SZT'Xih$uKY>8<1U+hA+6$)b]6%RnG2JX;kNt%.6b.?^LK9JE&Zo;+H+(@DAGdLD(W0?>BdE):BWVrjYImD'0;g6L+71l)tTrhpEnlMWg?XW7;mq&gopZ\20<AKp$Q#)4Q[7'fR$h_%q8@G$\T2NYr>?i<1,.@35jWR?E?<R<L'FZtZ7+Y&_V312Uke>\c7gk5&IdK5l"u8#@r,cf*6n=/2P,[s=s@4'EiiS69/30qY=BRA%5aWODdHqKl/M2uXW<p6GP_WG$koI3;J"2)-2Hd+"Rt6J5i)iRu)CuYe;J5kJ_pM3V8^(<b=VKJ\6F)I:M>2]OSB^rrV;U+gH5gJN%'1BPn0jIYeT2?8C+/S)FrHh_!M!jN(jCit)`\(5D3J*).N:M.J%bq6ACUZs"Cr-?fiM)c7@A\C^Q5+u#o=h38!H[`!EFRFa+9NUB%[K%[%V[\LYqL4LA[m.sh,1u/@i#j\U3]Ca<H+4JJB+%3$F.'-M#ZlZ^)5d.XaDbk*k31]2F7eQlL+TN"GJOcu\`l\c8F01W&e!U=%/6>KVLZFfPjj[KC5-/(WT>!W+Pb&I+?iW`]:1G!*,l&.-R&iOlIels#;AO2OLs+7<..@/A'X;l9bt4IM*[UJtI^&SfgmB;og?:H<%<6I!de,U?tZ4ri+eoGeejqtuU\!?)?o5W)bM(-&f?DT9[+SK<9iCACOYtF)6a`O+Dol?,8DhgP"F,S.n`c#cLR:UqsR_biKGF^?3%V7PJ/VKl;CrDKZ)Vk7+mA<m=\=f01#e6*h^BIi\0oSrHIB=Su)Pa!A/e>^nZ#?n#c#%%Q]-LM@jR:n8fm[ue<er;3S;_bKk<i;VX%DS>.76]TFO.XE:i<0:76PX<mf0H$%akb)D?)1`2;PY&N4JGUXdG=%8,%g*I?3IBTRBU1!`!=i#Hb=obD!!fRgF]m0H-IsQ-='/jl%1R`;CDYk`S#X>f-;[!pnMA`Ell87(<<4"kj+"8qJ,KKQEc'V9UJ>71q7@M5n:W""Y!%e=&2<6B$@+`+bV/:4aP*Q_)L6R"_/<-[#%.rEt&q7WsjD-3nX@%&:3LE$c]4LMXhE[qM%@PIW^M01b@9anBfXh!0?N8or_p,T'_2]`GLH6hmGEZh4"Ns:7<CO:`G!3pY,KSi3;%]Go6H>h$^MWX#hn@1l7j,]>;[MSjp&N3N@7+,Eh@;G;u82P,_]8c[opB=0T8=GSgpW-?n=[Oo+H9Z\RLKrK-a"N<iCN07S5Ik/X&%/m_=P/DU]dfS9a4kjC0DPpgeOb;_cF_]mKk=TK!r\+&o7:c%OgG@DM9",MO&$C*h4F-#A93!VDE8cmRqX^#&,>C7q4L)Ve%EHDI3%j76m!<Q8C^iolWahI&*?0rB/^r\ip+%_J-AK_/NDKOLI?=X19G/sq*;rq6h#"iS00kSZuOnh"Bp>3K[L/$Z>Ea`$W%q3I\aEjNcU%NPM@_n_6.lB(S?"BQlpPDMcW]%Er80?"qn+OurD,2Za4._lU-TfKH]iaPBlU\,"5'##`gRNTG1*+lfMA\`!^KD9,_C9usq`B,4Y!%6Hr*SkM7IUghhnm]8c8@ktQo9n[/]e@);QFWI](;>L&>2%?L%E2O;PRA^'1T_sgJoQHP9@_Pc1+81i]SF(i$`[Opr+G^R!6C8o,'%Z1;djL</3EdY+O1NQbM:/Ip2IIM*TI=q?5o5(:"b/f2f\.6+f"/f5jZgF3`2L658e>Y1_rp:8'L>eg[P0BqC[GS"W!#^h`96$#C$%aP4`iXpj;W1G+o'3m)ZXInj2U7gD%I+IL!nN?'],[pPp(X`Y@nkg!,mNO=t!*%?$@)]n]:jKOblOND>.PZ\J=`arDO,kb!W^!al5%H%EIoGYW3@N*0#E5p`Y6(2CjP`T-XDXq_929h.,)hF)bE3DJU[q#I%*]1:Yg0cM-F(a&[2-Wg?.*\XEnU',JRMm4orf'uGVa][Lr%<siac@sh(;>-43RKCmMge[Z0_'HB<SjOf=NqXnG,bB_`*gbhb=AutbT3@sLc2+[(>YrlZMS]u!/,Qf3VCN!h-Y%33"ShUbo%CUjG%CTOeQ=u\b3_Vt[7\49`TiBed;%V`h9[U7b]gaDJBU1]4*`?+u3Y@3ltk?X;(DK4$`7@nm9p/XZL'kD?@%J(aoGsJ.k']f+_gJY%I%n^:.f5[8L*Y?C.)@Eo4=W$!Di@YnAn':c<*>/(<VcV(J_-Mb2La9Eam\DSq*1GB^&:;ZOIO(!+B@.S7Y;4%-<G%e%R/LEaTLpUem%Wr&iRE3N/"9k:SLQB/MnZsAL64`@%)eJ0Q/oa1q!)1'fJD0;,OST*m2]p9]FakYND3*ueS7Rd!B)5IX`0$69B7Yj'poKp4TM+p-J%5<K3O-G<=]d?S\[V\I3=QY5&a72))]ZNORSr!JC?ic(>nP7oL9P_Gh^Z_$?o75!m\k0YNhSf%AR(P_iqKWe'Lp,_@Hd84+["o+\/%IV:kXd7sp)/4D!;MAn]>S_&=t-jrI>U7UP^XgW30GE_;qO"J^.J6Z6<Xi/*'#%fa!_;&Mj>JtiYqd70;3Q^18?t"Fe+FE.$9S$qA%7J6'k%HAB]Mjr*lHm!2jXBAt['.Br#b]ZKCH!&u!_=".5=$r`F$72cl@)&IP6V8)CEFN,/Ehq1\-DN4='/Oif^$]b,J(RV^.MmI[%-e649\J!XKe&!fb!>K>e!F9#.n:Zp>.(27.A`_^6K)q[>UT;LjbeVcCaC#-:+rDIX3Qhs:h"iUeTa6=KM41+DBU?9hA"S?-]5?k"%%+=k:eC-J!AkN&ZV">Fi1b2&q%_GT"O]5mk2Q7]>NKEUucQeF&FF#A%#RoRNjci"sic464!F,J8id`.LYH]J\G[ffMQRE)0YMd=I%TcEPNehS$&@">oO)PS4%`4ucc;`P+OP_6p:H5`B:QODn3-g7k+i-s3Cf8O>PeH")J_rlNL#*5D0:))5dN#<ct<J*#<K\Tf59LsLk%o^TZK<(=Nb'31iGTSVh:M+l_*kt]\oC:XG?s%NsJeHKiUYp]iY0a0@uK1&Tt88Ka\(qOJrY9XAJ3lLN)o4cN`AZ9:epJ_X<^-,Y&%P_5;;/?+`Pm6$+nT37\a?ll4Lq7rpg*C7SUk.P$VeR-!q$Ls7Z"gMTqN)CBAU/]8*=6HR."E3Fq%M:542,O-)6C!Vo?)Nu<O.*_)%7]?Fqc]:Sq<hofHH(okF'V9m,F[@_CPHGR>3E<2Gl8T<UK8`_D,iVc,o/Kb"e>igHEej#*q.mEa4\ca:,[jZjWM23Bf%r6##SM-W%$c]Pl1=LFRF$k^Si2!skhQGBY6dO=lqj2<&BK.GK,u,1KRJWAA@2>aJXDK"#_`1ZI2,oDu)c#J-b+Z\L1Z)qV\N4AnWZVnOqRWi-%5mfIfF%4<>S:At9brA_1AWRqSi`(mSdbOjDVMYjc["1`H@Or!^B(m]R6"Z@]5T[YYQ*hHppg2X&Y+'3JRZH5sd1;:9'dTMQ?[KE=%^?X935WY`:E2Dns/m?(80G7IsA^:E&JaqF+\3%JH6M;pt5u3Q*Bh$+pGmXbu:qeUsU50p8MBnLS3B0bb9D8oh@>*9VVCY%<d]1G?%)+a)-.'I0@\^WCVEA1DMf:O1*>9p)jR\P@f]h4=GoB\m[?uV3&dN5A40pk=$@)`)OK%W/7QpVoC"e*XY7p9JmXp3orfIOo^.C;2*%A=kE>M-QnjI(Ua`KiaAeZr87Y,IZ:V6_Ksh1FArQ]o5Kd$FQnnal*hnp;-/7m6_)W#o8,9%dP.4JM92Oi">9Dm(P@a`?oVCcQ$h(%!!NZ40X7$j6mA=?Q_Tu+)et'\P#J[18?$3U0WMSn"VQC]G8amu@c1REU/mf4>[%-^^F./MjEWJp8.O"^VF@2q=C3^Y6,9.6't'N^%pB?s+?#11>1&FBZaGJ!J-"[4'<YS1^4t#YS)O7.n1LAI%n"t*!ni]"(^JD\C;1UR/9I#RcaaWFN+i3PL9:^/&cC+fsIO@$T<R_`S%QQ=E<,?bhYZ8]+eQi9.m4*Xl"%j*n`2!SP4'5U/#&`TZ\W*W<dm0o[m(\CDeKN5>"mn4i;fRk$H/Z$$O75J%AO9jE19J/2!im-*K%Jn;0X?uG-Mf2>U5%gf.oXf\@IR@cQ6jZp=4-qFL,,pr#:dD*S*KCqJ0I#>W7dqF!7[e;Va#gFJmq_Q_N@X,6a)0)-<AOsNPM`qF1%Z@J2g2!g3uLt)LbVMc=m+]-*lYc?[]*6)^n3G2kAUG1t\jA05B81.ZC(@"Jk6mH"<)6+jI/8?-L=6/M0L?Y=`-0]pqbT5'/C+GW'%+ljQ1errb*gC"KhB\84`iIL&70DjaZVUE7':Br_O^gTA3`J8JC)5>SN'6;.0KsP]DBHg+3&-m:YiI;?Yh9W1a>#'B[f<MoZ/,]^a%N[V,K*rkKQg#bK>oKU)#H/-t5!mZrIdO-aoA!da>DT@(G)(hu6;]>g8G.i$\]s4R%OY'-0oP5D;KQ(*=Q:*-IJ$q3s<j7h),N2(%%E/Yf[hN5Q^_`"JVL:,cg6ot*u?\)?nA4!KAi/+6<*ggc("+f@1cRpr7_1CukIPN&df(H2o%c`#L3da/N+*bmXk!30?B-NHP_?881%q<6^$2k0^6>[O&'F#/i#SLi,VG>D'-*'RgW6;ss[?]=p6+6-V1lHEJ\bgW\(9@KNfVp*8\Yqq6q).[#Jn=?k'@M.3:^V.P'CauBB%:t-mV$8kn21k0k-h=QM.[F]`NiR,\eFd`T%QPpn`+m7mCNQ^?+\oRrDiQ9jh"6Afkh)WP4B\Um3h;7J@Wt*_5bF@Tp>s`heTrROk%06Ylsm:P*!/<Mb6I,.T$3cHFjJ5Iu-cWiiPlN30[0!QDc(t:Y6DA&U)QIV]B=GZM-FPb(YUWX]AeWBuM?r\-WLb?c_Pr/^hJoP7K%LdaaPCW5JtDMptqWT]:Bo[:?J#k2k.02&c%'LFou]qaf1P.f0$%/0V-'RH_:B@2S<O\R8^Ab]D*L^Vo#PUW>$;(?lIlZqpPP:CN/%&&H@n#6S=KlPZ'l?<G"g[U*(f0o_"\_R`Ji8BYQuSfQR5^0R'4\[eVPLA-rUEF1"=bPSmKC;%OG^4KMW/:(ZSUW*R(k1md*8/$kS%0J(1*]sH3sc_BKKPt9b5JSD`Dn8FuObmE6r3[Jj>/+D1/=_H$F?kN3$#/&qR'uBfco!nf(e7u63+l"JUSZH6.>uKs.,LDC)+U;B/%o5ii>g[*>_#_rFI-Fg,_luo1HQ-Y"uDFl[$I#6TnB/khm&It",N\7gMT*@EN%#.?pj]#,1*\*qH@)'-=VBg<D:rsBG@.[_\(.OCA%Kh4sA77t>T]Z2cG7PG@._2Rn97qops6ft_WGS'Ak!)2EDF@k3N6N`bH0F;I"lAL2f\l;bf9B/Z;SOtTfWQ63,<`-@m(RQ6k49+dS%=rd'5C+l_$9Vi)P3B0s:!mTUiLgHg%q&IhkM`1sWoE6qa;PXbAnMJ8+\#-!`T'RU3Qb?6.8>oOF\R'uIC/Z^AT-GMTCkkM:[r^0W%#L8fKfCb"kT?^)OW38.t54pB8cmXfY7;OV?odUCC&l^0:P:Ze.DTs-^B9/JZK#9;^P%rN_'3;MuO$^7gpbqVtVc!'.d?ds?;oGOK%iR\dJA,;kckTcKm=b_&]gHk>9A6<oS&De7mNYB%&'$5JM0\IWU82#>'a7>h]>M2C'/-%ftdL?]?V<qN8)tj?<*`,,s]Q2:c,&p='%VTil?6@H[fFu[@]YI`!pg!SFD;SaR.$#GXii4Qtg[th<WhI7)1,JUq.,5u;-BGUeLX/(XD[Ds0!letWMUTF>r.+kBuYsq1SP<]`Y%"O,,PmQ9V+c69`nHkCR,1JBNX=7qMr0*P)[B9Zlt;iYog5KVR$\AZ&9@I$&U)rGH0pHQ>3:,r".#nniKFN>j"q)6s7jkoNFJ+HHc%qnq=)^&S&cQTtCXs,TDDr29:-s7cKD++J\8o&X5mrT3pkrqc#sIes'0gL#F,p-7Gaq"F=*^\n)up[A.\p^\GFrpBGeIf98`Du]XV%rrRKDA/>49jcBH>%r_IYg$uP9~>%AI9_PrivateDataEnd